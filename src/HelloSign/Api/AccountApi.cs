/*
 * Dropbox Sign API
 *
 * Dropbox Sign v3 API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: apisupport@hellosign.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using HelloSign.Client;
using HelloSign.Model;

namespace HelloSign.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Account
        /// </summary>
        /// <remarks>
        /// Creates a new Dropbox Sign Account that is associated with the specified &#x60;email_address&#x60;.
        /// </remarks>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountCreateResponse</returns>
        AccountCreateResponse AccountCreate(AccountCreateRequest accountCreateRequest, int operationIndex = 0);

        /// <summary>
        /// Create Account
        /// </summary>
        /// <remarks>
        /// Creates a new Dropbox Sign Account that is associated with the specified &#x60;email_address&#x60;.
        /// </remarks>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountCreateResponse</returns>
        ApiResponse<AccountCreateResponse> AccountCreateWithHttpInfo(AccountCreateRequest accountCreateRequest, int operationIndex = 0);
        /// <summary>
        /// Get Account
        /// </summary>
        /// <remarks>
        /// Returns the properties and settings of your Account.
        /// </remarks>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">&#x60;account_id&#x60; or &#x60;email_address&#x60; is required. If both are provided, the account id prevails.   The ID of the Account. (optional)</param>
        /// <param name="emailAddress">&#x60;account_id&#x60; or &#x60;email_address&#x60; is required, If both are provided, the account id prevails.   The email address of the Account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountGetResponse</returns>
        AccountGetResponse AccountGet(string? accountId = default(string?), string? emailAddress = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get Account
        /// </summary>
        /// <remarks>
        /// Returns the properties and settings of your Account.
        /// </remarks>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">&#x60;account_id&#x60; or &#x60;email_address&#x60; is required. If both are provided, the account id prevails.   The ID of the Account. (optional)</param>
        /// <param name="emailAddress">&#x60;account_id&#x60; or &#x60;email_address&#x60; is required, If both are provided, the account id prevails.   The email address of the Account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountGetResponse</returns>
        ApiResponse<AccountGetResponse> AccountGetWithHttpInfo(string? accountId = default(string?), string? emailAddress = default(string?), int operationIndex = 0);
        /// <summary>
        /// Update Account
        /// </summary>
        /// <remarks>
        /// Updates the properties and settings of your Account. Currently only allows for updates to the [Callback URL](/api/reference/tag/Callbacks-and-Events) and locale.
        /// </remarks>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountGetResponse</returns>
        AccountGetResponse AccountUpdate(AccountUpdateRequest accountUpdateRequest, int operationIndex = 0);

        /// <summary>
        /// Update Account
        /// </summary>
        /// <remarks>
        /// Updates the properties and settings of your Account. Currently only allows for updates to the [Callback URL](/api/reference/tag/Callbacks-and-Events) and locale.
        /// </remarks>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountGetResponse</returns>
        ApiResponse<AccountGetResponse> AccountUpdateWithHttpInfo(AccountUpdateRequest accountUpdateRequest, int operationIndex = 0);
        /// <summary>
        /// Verify Account
        /// </summary>
        /// <remarks>
        /// Verifies whether an Dropbox Sign Account exists for the given email address.
        /// </remarks>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountVerifyRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountVerifyResponse</returns>
        AccountVerifyResponse AccountVerify(AccountVerifyRequest accountVerifyRequest, int operationIndex = 0);

        /// <summary>
        /// Verify Account
        /// </summary>
        /// <remarks>
        /// Verifies whether an Dropbox Sign Account exists for the given email address.
        /// </remarks>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountVerifyRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountVerifyResponse</returns>
        ApiResponse<AccountVerifyResponse> AccountVerifyWithHttpInfo(AccountVerifyRequest accountVerifyRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Account
        /// </summary>
        /// <remarks>
        /// Creates a new Dropbox Sign Account that is associated with the specified &#x60;email_address&#x60;.
        /// </remarks>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountCreateResponse</returns>
        System.Threading.Tasks.Task<AccountCreateResponse> AccountCreateAsync(AccountCreateRequest accountCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Account
        /// </summary>
        /// <remarks>
        /// Creates a new Dropbox Sign Account that is associated with the specified &#x60;email_address&#x60;.
        /// </remarks>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountCreateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountCreateResponse>> AccountCreateWithHttpInfoAsync(AccountCreateRequest accountCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Account
        /// </summary>
        /// <remarks>
        /// Returns the properties and settings of your Account.
        /// </remarks>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">&#x60;account_id&#x60; or &#x60;email_address&#x60; is required. If both are provided, the account id prevails.   The ID of the Account. (optional)</param>
        /// <param name="emailAddress">&#x60;account_id&#x60; or &#x60;email_address&#x60; is required, If both are provided, the account id prevails.   The email address of the Account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountGetResponse</returns>
        System.Threading.Tasks.Task<AccountGetResponse> AccountGetAsync(string? accountId = default(string?), string? emailAddress = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Account
        /// </summary>
        /// <remarks>
        /// Returns the properties and settings of your Account.
        /// </remarks>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">&#x60;account_id&#x60; or &#x60;email_address&#x60; is required. If both are provided, the account id prevails.   The ID of the Account. (optional)</param>
        /// <param name="emailAddress">&#x60;account_id&#x60; or &#x60;email_address&#x60; is required, If both are provided, the account id prevails.   The email address of the Account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountGetResponse>> AccountGetWithHttpInfoAsync(string? accountId = default(string?), string? emailAddress = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Account
        /// </summary>
        /// <remarks>
        /// Updates the properties and settings of your Account. Currently only allows for updates to the [Callback URL](/api/reference/tag/Callbacks-and-Events) and locale.
        /// </remarks>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountGetResponse</returns>
        System.Threading.Tasks.Task<AccountGetResponse> AccountUpdateAsync(AccountUpdateRequest accountUpdateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Account
        /// </summary>
        /// <remarks>
        /// Updates the properties and settings of your Account. Currently only allows for updates to the [Callback URL](/api/reference/tag/Callbacks-and-Events) and locale.
        /// </remarks>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountGetResponse>> AccountUpdateWithHttpInfoAsync(AccountUpdateRequest accountUpdateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Verify Account
        /// </summary>
        /// <remarks>
        /// Verifies whether an Dropbox Sign Account exists for the given email address.
        /// </remarks>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountVerifyRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountVerifyResponse</returns>
        System.Threading.Tasks.Task<AccountVerifyResponse> AccountVerifyAsync(AccountVerifyRequest accountVerifyRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Verify Account
        /// </summary>
        /// <remarks>
        /// Verifies whether an Dropbox Sign Account exists for the given email address.
        /// </remarks>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountVerifyRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountVerifyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountVerifyResponse>> AccountVerifyWithHttpInfoAsync(AccountVerifyRequest accountVerifyRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountApi : IAccountApiSync, IAccountApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AccountApi : IAccountApi
    {
        private HelloSign.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AccountApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AccountApi(string basePath)
        {
            this.Configuration = HelloSign.Client.Configuration.MergeConfigurations(
                HelloSign.Client.GlobalConfiguration.Instance,
                new HelloSign.Client.Configuration { BasePath = basePath }
            );
            this.Client = new HelloSign.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HelloSign.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = HelloSign.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AccountApi(HelloSign.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = HelloSign.Client.Configuration.MergeConfigurations(
                HelloSign.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new HelloSign.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HelloSign.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = HelloSign.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AccountApi(HelloSign.Client.ISynchronousClient client, HelloSign.Client.IAsynchronousClient asyncClient, HelloSign.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = HelloSign.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public HelloSign.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public HelloSign.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public HelloSign.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public HelloSign.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Account Creates a new Dropbox Sign Account that is associated with the specified &#x60;email_address&#x60;.
        /// </summary>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountCreateResponse</returns>
        public AccountCreateResponse AccountCreate(AccountCreateRequest accountCreateRequest, int operationIndex = 0)
        {
            HelloSign.Client.ApiResponse<AccountCreateResponse> localVarResponse = AccountCreateWithHttpInfo(accountCreateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Account Creates a new Dropbox Sign Account that is associated with the specified &#x60;email_address&#x60;.
        /// </summary>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountCreateResponse</returns>
        public HelloSign.Client.ApiResponse<AccountCreateResponse> AccountCreateWithHttpInfo(AccountCreateRequest accountCreateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'accountCreateRequest' is set
            if (accountCreateRequest == null)
            {
                throw new HelloSign.Client.ApiException(400, "Missing required parameter 'accountCreateRequest' when calling AccountApi->AccountCreate");
            }

            HelloSign.Client.RequestOptions localVarRequestOptions = new HelloSign.Client.RequestOptions();

            var localVarContentType = "";
            var openApiTypes = accountCreateRequest.GetOpenApiTypes();
            if (ClientUtils.HasFileType(openApiTypes))
            {
                ClientUtils.SetFormData(localVarRequestOptions, openApiTypes);
                localVarContentType = "multipart/form-data";
            }
            else
            {
                localVarContentType = "application/json";
                localVarRequestOptions.Data = accountCreateRequest;
            }

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HelloSign.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Operation = "AccountApi.AccountCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + HelloSign.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (oauth2) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AccountCreateResponse>("/account/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Account Creates a new Dropbox Sign Account that is associated with the specified &#x60;email_address&#x60;.
        /// </summary>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountCreateResponse</returns>
        public async System.Threading.Tasks.Task<AccountCreateResponse> AccountCreateAsync(AccountCreateRequest accountCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HelloSign.Client.ApiResponse<AccountCreateResponse> localVarResponse = await AccountCreateWithHttpInfoAsync(accountCreateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Account Creates a new Dropbox Sign Account that is associated with the specified &#x60;email_address&#x60;.
        /// </summary>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountCreateResponse)</returns>
        public async System.Threading.Tasks.Task<HelloSign.Client.ApiResponse<AccountCreateResponse>> AccountCreateWithHttpInfoAsync(AccountCreateRequest accountCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountCreateRequest' is set
            if (accountCreateRequest == null)
            {
                throw new HelloSign.Client.ApiException(400, "Missing required parameter 'accountCreateRequest' when calling AccountApi->AccountCreate");
            }


            HelloSign.Client.RequestOptions localVarRequestOptions = new HelloSign.Client.RequestOptions();

            var localVarContentType = "";
            var openApiTypes = accountCreateRequest.GetOpenApiTypes();
            if (ClientUtils.HasFileType(openApiTypes))
            {
                ClientUtils.SetFormData(localVarRequestOptions, openApiTypes);
                localVarContentType = "multipart/form-data";
            }
            else
            {
                localVarContentType = "application/json";
                localVarRequestOptions.Data = accountCreateRequest;
            }

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HelloSign.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Operation = "AccountApi.AccountCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + HelloSign.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (oauth2) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AccountCreateResponse>("/account/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Account Returns the properties and settings of your Account.
        /// </summary>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">&#x60;account_id&#x60; or &#x60;email_address&#x60; is required. If both are provided, the account id prevails.   The ID of the Account. (optional)</param>
        /// <param name="emailAddress">&#x60;account_id&#x60; or &#x60;email_address&#x60; is required, If both are provided, the account id prevails.   The email address of the Account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountGetResponse</returns>
        public AccountGetResponse AccountGet(string? accountId = default(string?), string? emailAddress = default(string?), int operationIndex = 0)
        {
            HelloSign.Client.ApiResponse<AccountGetResponse> localVarResponse = AccountGetWithHttpInfo(accountId, emailAddress);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Account Returns the properties and settings of your Account.
        /// </summary>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">&#x60;account_id&#x60; or &#x60;email_address&#x60; is required. If both are provided, the account id prevails.   The ID of the Account. (optional)</param>
        /// <param name="emailAddress">&#x60;account_id&#x60; or &#x60;email_address&#x60; is required, If both are provided, the account id prevails.   The email address of the Account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountGetResponse</returns>
        public HelloSign.Client.ApiResponse<AccountGetResponse> AccountGetWithHttpInfo(string? accountId = default(string?), string? emailAddress = default(string?), int operationIndex = 0)
        {
            HelloSign.Client.RequestOptions localVarRequestOptions = new HelloSign.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };
            var localVarContentType = HelloSign.Client.ClientUtils.SelectHeaderContentType(_contentTypes);

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HelloSign.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (accountId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HelloSign.Client.ClientUtils.ParameterToMultiMap("", "account_id", accountId));
            }
            if (emailAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(HelloSign.Client.ClientUtils.ParameterToMultiMap("", "email_address", emailAddress));
            }
            localVarRequestOptions.Operation = "AccountApi.AccountGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + HelloSign.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (oauth2) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AccountGetResponse>("/account", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Account Returns the properties and settings of your Account.
        /// </summary>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">&#x60;account_id&#x60; or &#x60;email_address&#x60; is required. If both are provided, the account id prevails.   The ID of the Account. (optional)</param>
        /// <param name="emailAddress">&#x60;account_id&#x60; or &#x60;email_address&#x60; is required, If both are provided, the account id prevails.   The email address of the Account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountGetResponse</returns>
        public async System.Threading.Tasks.Task<AccountGetResponse> AccountGetAsync(string? accountId = default(string?), string? emailAddress = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HelloSign.Client.ApiResponse<AccountGetResponse> localVarResponse = await AccountGetWithHttpInfoAsync(accountId, emailAddress, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Account Returns the properties and settings of your Account.
        /// </summary>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">&#x60;account_id&#x60; or &#x60;email_address&#x60; is required. If both are provided, the account id prevails.   The ID of the Account. (optional)</param>
        /// <param name="emailAddress">&#x60;account_id&#x60; or &#x60;email_address&#x60; is required, If both are provided, the account id prevails.   The email address of the Account. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountGetResponse)</returns>
        public async System.Threading.Tasks.Task<HelloSign.Client.ApiResponse<AccountGetResponse>> AccountGetWithHttpInfoAsync(string? accountId = default(string?), string? emailAddress = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            HelloSign.Client.RequestOptions localVarRequestOptions = new HelloSign.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            var localVarContentType = HelloSign.Client.ClientUtils.SelectHeaderContentType(_contentTypes);

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HelloSign.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (accountId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HelloSign.Client.ClientUtils.ParameterToMultiMap("", "account_id", accountId));
            }
            if (emailAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(HelloSign.Client.ClientUtils.ParameterToMultiMap("", "email_address", emailAddress));
            }
            localVarRequestOptions.Operation = "AccountApi.AccountGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + HelloSign.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (oauth2) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AccountGetResponse>("/account", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Account Updates the properties and settings of your Account. Currently only allows for updates to the [Callback URL](/api/reference/tag/Callbacks-and-Events) and locale.
        /// </summary>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountGetResponse</returns>
        public AccountGetResponse AccountUpdate(AccountUpdateRequest accountUpdateRequest, int operationIndex = 0)
        {
            HelloSign.Client.ApiResponse<AccountGetResponse> localVarResponse = AccountUpdateWithHttpInfo(accountUpdateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Account Updates the properties and settings of your Account. Currently only allows for updates to the [Callback URL](/api/reference/tag/Callbacks-and-Events) and locale.
        /// </summary>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountGetResponse</returns>
        public HelloSign.Client.ApiResponse<AccountGetResponse> AccountUpdateWithHttpInfo(AccountUpdateRequest accountUpdateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'accountUpdateRequest' is set
            if (accountUpdateRequest == null)
            {
                throw new HelloSign.Client.ApiException(400, "Missing required parameter 'accountUpdateRequest' when calling AccountApi->AccountUpdate");
            }

            HelloSign.Client.RequestOptions localVarRequestOptions = new HelloSign.Client.RequestOptions();

            var localVarContentType = "";
            var openApiTypes = accountUpdateRequest.GetOpenApiTypes();
            if (ClientUtils.HasFileType(openApiTypes))
            {
                ClientUtils.SetFormData(localVarRequestOptions, openApiTypes);
                localVarContentType = "multipart/form-data";
            }
            else
            {
                localVarContentType = "application/json";
                localVarRequestOptions.Data = accountUpdateRequest;
            }

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HelloSign.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Operation = "AccountApi.AccountUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + HelloSign.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (oauth2) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<AccountGetResponse>("/account", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Account Updates the properties and settings of your Account. Currently only allows for updates to the [Callback URL](/api/reference/tag/Callbacks-and-Events) and locale.
        /// </summary>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountGetResponse</returns>
        public async System.Threading.Tasks.Task<AccountGetResponse> AccountUpdateAsync(AccountUpdateRequest accountUpdateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HelloSign.Client.ApiResponse<AccountGetResponse> localVarResponse = await AccountUpdateWithHttpInfoAsync(accountUpdateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Account Updates the properties and settings of your Account. Currently only allows for updates to the [Callback URL](/api/reference/tag/Callbacks-and-Events) and locale.
        /// </summary>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountGetResponse)</returns>
        public async System.Threading.Tasks.Task<HelloSign.Client.ApiResponse<AccountGetResponse>> AccountUpdateWithHttpInfoAsync(AccountUpdateRequest accountUpdateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountUpdateRequest' is set
            if (accountUpdateRequest == null)
            {
                throw new HelloSign.Client.ApiException(400, "Missing required parameter 'accountUpdateRequest' when calling AccountApi->AccountUpdate");
            }


            HelloSign.Client.RequestOptions localVarRequestOptions = new HelloSign.Client.RequestOptions();

            var localVarContentType = "";
            var openApiTypes = accountUpdateRequest.GetOpenApiTypes();
            if (ClientUtils.HasFileType(openApiTypes))
            {
                ClientUtils.SetFormData(localVarRequestOptions, openApiTypes);
                localVarContentType = "multipart/form-data";
            }
            else
            {
                localVarContentType = "application/json";
                localVarRequestOptions.Data = accountUpdateRequest;
            }

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HelloSign.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Operation = "AccountApi.AccountUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + HelloSign.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (oauth2) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<AccountGetResponse>("/account", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Verify Account Verifies whether an Dropbox Sign Account exists for the given email address.
        /// </summary>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountVerifyRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountVerifyResponse</returns>
        public AccountVerifyResponse AccountVerify(AccountVerifyRequest accountVerifyRequest, int operationIndex = 0)
        {
            HelloSign.Client.ApiResponse<AccountVerifyResponse> localVarResponse = AccountVerifyWithHttpInfo(accountVerifyRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Verify Account Verifies whether an Dropbox Sign Account exists for the given email address.
        /// </summary>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountVerifyRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountVerifyResponse</returns>
        public HelloSign.Client.ApiResponse<AccountVerifyResponse> AccountVerifyWithHttpInfo(AccountVerifyRequest accountVerifyRequest, int operationIndex = 0)
        {
            // verify the required parameter 'accountVerifyRequest' is set
            if (accountVerifyRequest == null)
            {
                throw new HelloSign.Client.ApiException(400, "Missing required parameter 'accountVerifyRequest' when calling AccountApi->AccountVerify");
            }

            HelloSign.Client.RequestOptions localVarRequestOptions = new HelloSign.Client.RequestOptions();

            var localVarContentType = "";
            var openApiTypes = accountVerifyRequest.GetOpenApiTypes();
            if (ClientUtils.HasFileType(openApiTypes))
            {
                ClientUtils.SetFormData(localVarRequestOptions, openApiTypes);
                localVarContentType = "multipart/form-data";
            }
            else
            {
                localVarContentType = "application/json";
                localVarRequestOptions.Data = accountVerifyRequest;
            }

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HelloSign.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Operation = "AccountApi.AccountVerify";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + HelloSign.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (oauth2) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AccountVerifyResponse>("/account/verify", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountVerify", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Verify Account Verifies whether an Dropbox Sign Account exists for the given email address.
        /// </summary>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountVerifyRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountVerifyResponse</returns>
        public async System.Threading.Tasks.Task<AccountVerifyResponse> AccountVerifyAsync(AccountVerifyRequest accountVerifyRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HelloSign.Client.ApiResponse<AccountVerifyResponse> localVarResponse = await AccountVerifyWithHttpInfoAsync(accountVerifyRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Verify Account Verifies whether an Dropbox Sign Account exists for the given email address.
        /// </summary>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountVerifyRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountVerifyResponse)</returns>
        public async System.Threading.Tasks.Task<HelloSign.Client.ApiResponse<AccountVerifyResponse>> AccountVerifyWithHttpInfoAsync(AccountVerifyRequest accountVerifyRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountVerifyRequest' is set
            if (accountVerifyRequest == null)
            {
                throw new HelloSign.Client.ApiException(400, "Missing required parameter 'accountVerifyRequest' when calling AccountApi->AccountVerify");
            }


            HelloSign.Client.RequestOptions localVarRequestOptions = new HelloSign.Client.RequestOptions();

            var localVarContentType = "";
            var openApiTypes = accountVerifyRequest.GetOpenApiTypes();
            if (ClientUtils.HasFileType(openApiTypes))
            {
                ClientUtils.SetFormData(localVarRequestOptions, openApiTypes);
                localVarContentType = "multipart/form-data";
            }
            else
            {
                localVarContentType = "application/json";
                localVarRequestOptions.Data = accountVerifyRequest;
            }

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HelloSign.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Operation = "AccountApi.AccountVerify";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + HelloSign.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (oauth2) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AccountVerifyResponse>("/account/verify", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountVerify", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
