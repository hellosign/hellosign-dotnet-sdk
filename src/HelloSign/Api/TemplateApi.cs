/*
 * Dropbox Sign API
 *
 * Dropbox Sign v3 API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: apisupport@hellosign.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using HelloSign.Client;
using HelloSign.Model;

namespace HelloSign.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITemplateApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add User to Template
        /// </summary>
        /// <remarks>
        /// Gives the specified Account access to the specified Template. The specified Account must be a part of your Team.
        /// </remarks>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the Template to give the Account access to.</param>
        /// <param name="templateAddUserRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TemplateGetResponse</returns>
        TemplateGetResponse TemplateAddUser(string templateId, TemplateAddUserRequest templateAddUserRequest, int operationIndex = 0);

        /// <summary>
        /// Add User to Template
        /// </summary>
        /// <remarks>
        /// Gives the specified Account access to the specified Template. The specified Account must be a part of your Team.
        /// </remarks>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the Template to give the Account access to.</param>
        /// <param name="templateAddUserRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TemplateGetResponse</returns>
        ApiResponse<TemplateGetResponse> TemplateAddUserWithHttpInfo(string templateId, TemplateAddUserRequest templateAddUserRequest, int operationIndex = 0);
        /// <summary>
        /// Create Embedded Template Draft
        /// </summary>
        /// <remarks>
        /// The first step in an embedded template workflow. Creates a draft template that can then be further set up in the template &#39;edit&#39; stage.
        /// </remarks>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateCreateEmbeddedDraftRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TemplateCreateEmbeddedDraftResponse</returns>
        TemplateCreateEmbeddedDraftResponse TemplateCreateEmbeddedDraft(TemplateCreateEmbeddedDraftRequest templateCreateEmbeddedDraftRequest, int operationIndex = 0);

        /// <summary>
        /// Create Embedded Template Draft
        /// </summary>
        /// <remarks>
        /// The first step in an embedded template workflow. Creates a draft template that can then be further set up in the template &#39;edit&#39; stage.
        /// </remarks>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateCreateEmbeddedDraftRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TemplateCreateEmbeddedDraftResponse</returns>
        ApiResponse<TemplateCreateEmbeddedDraftResponse> TemplateCreateEmbeddedDraftWithHttpInfo(TemplateCreateEmbeddedDraftRequest templateCreateEmbeddedDraftRequest, int operationIndex = 0);
        /// <summary>
        /// Delete Template
        /// </summary>
        /// <remarks>
        /// Completely deletes the template specified from the account.
        /// </remarks>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the Template to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void TemplateDelete(string templateId, int operationIndex = 0);

        /// <summary>
        /// Delete Template
        /// </summary>
        /// <remarks>
        /// Completely deletes the template specified from the account.
        /// </remarks>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the Template to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TemplateDeleteWithHttpInfo(string templateId, int operationIndex = 0);
        /// <summary>
        /// Get Template File
        /// </summary>
        /// <remarks>
        /// Obtain a copy of the current documents specified by the &#x60;template_id&#x60; parameter. Returns a PDF or ZIP file.  If the files are currently being prepared, a status code of &#x60;409&#x60; will be returned instead. In this case please wait for the &#x60;template_created&#x60; callback event.
        /// </remarks>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template files to retrieve.</param>
        /// <param name="fileType">Set to &#x60;pdf&#x60; for a single merged document or &#x60;zip&#x60; for a collection of individual documents. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream TemplateFiles(string templateId, string? fileType = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get Template File
        /// </summary>
        /// <remarks>
        /// Obtain a copy of the current documents specified by the &#x60;template_id&#x60; parameter. Returns a PDF or ZIP file.  If the files are currently being prepared, a status code of &#x60;409&#x60; will be returned instead. In this case please wait for the &#x60;template_created&#x60; callback event.
        /// </remarks>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template files to retrieve.</param>
        /// <param name="fileType">Set to &#x60;pdf&#x60; for a single merged document or &#x60;zip&#x60; for a collection of individual documents. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> TemplateFilesWithHttpInfo(string templateId, string? fileType = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get Template File as Encoded String
        /// </summary>
        /// <remarks>
        /// Obtain a copy of the current documents specified by the &#x60;template_id&#x60; parameter. Returns a JSON object with a &#x60;data_uri&#x60; representing the base64 encoded file (PDFs only).   If the files are currently being prepared, a status code of &#x60;409&#x60; will be returned instead. In this case please wait for the &#x60;template_created&#x60; callback event.
        /// </remarks>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template files to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FileResponseDataUri</returns>
        FileResponseDataUri TemplateFilesAsEncodedString(string templateId, int operationIndex = 0);

        /// <summary>
        /// Get Template File as Encoded String
        /// </summary>
        /// <remarks>
        /// Obtain a copy of the current documents specified by the &#x60;template_id&#x60; parameter. Returns a JSON object with a &#x60;data_uri&#x60; representing the base64 encoded file (PDFs only).   If the files are currently being prepared, a status code of &#x60;409&#x60; will be returned instead. In this case please wait for the &#x60;template_created&#x60; callback event.
        /// </remarks>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template files to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FileResponseDataUri</returns>
        ApiResponse<FileResponseDataUri> TemplateFilesAsEncodedStringWithHttpInfo(string templateId, int operationIndex = 0);
        /// <summary>
        /// Get Template File as File Url
        /// </summary>
        /// <remarks>
        /// Obtain a copy of the current documents specified by the &#x60;template_id&#x60; parameter. Returns a JSON object with a url to the file (PDFs only).   If the files are currently being prepared, a status code of &#x60;409&#x60; will be returned instead. In this case please wait for the &#x60;template_created&#x60; callback event.
        /// </remarks>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template files to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FileResponse</returns>
        FileResponse TemplateFilesAsFileUrl(string templateId, int operationIndex = 0);

        /// <summary>
        /// Get Template File as File Url
        /// </summary>
        /// <remarks>
        /// Obtain a copy of the current documents specified by the &#x60;template_id&#x60; parameter. Returns a JSON object with a url to the file (PDFs only).   If the files are currently being prepared, a status code of &#x60;409&#x60; will be returned instead. In this case please wait for the &#x60;template_created&#x60; callback event.
        /// </remarks>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template files to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FileResponse</returns>
        ApiResponse<FileResponse> TemplateFilesAsFileUrlWithHttpInfo(string templateId, int operationIndex = 0);
        /// <summary>
        /// Get Template
        /// </summary>
        /// <remarks>
        /// Returns the Template specified by the &#x60;template_id&#x60; parameter.
        /// </remarks>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the Template to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TemplateGetResponse</returns>
        TemplateGetResponse TemplateGet(string templateId, int operationIndex = 0);

        /// <summary>
        /// Get Template
        /// </summary>
        /// <remarks>
        /// Returns the Template specified by the &#x60;template_id&#x60; parameter.
        /// </remarks>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the Template to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TemplateGetResponse</returns>
        ApiResponse<TemplateGetResponse> TemplateGetWithHttpInfo(string templateId, int operationIndex = 0);
        /// <summary>
        /// List Templates
        /// </summary>
        /// <remarks>
        /// Returns a list of the Templates that are accessible by you.  Take a look at our [search guide](/api/reference/search/) to learn more about querying templates.
        /// </remarks>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Which account to return Templates for. Must be a team member. Use &#x60;all&#x60; to indicate all team members. Defaults to your account. (optional)</param>
        /// <param name="page">Which page number of the Template List to return. Defaults to &#x60;1&#x60;. (optional, default to 1)</param>
        /// <param name="pageSize">Number of objects to be returned per page. Must be between &#x60;1&#x60; and &#x60;100&#x60;. Default is &#x60;20&#x60;. (optional, default to 20)</param>
        /// <param name="query">String that includes search terms and/or fields to be used to filter the Template objects. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TemplateListResponse</returns>
        TemplateListResponse TemplateList(string? accountId = default(string?), int? page = default(int?), int? pageSize = default(int?), string? query = default(string?), int operationIndex = 0);

        /// <summary>
        /// List Templates
        /// </summary>
        /// <remarks>
        /// Returns a list of the Templates that are accessible by you.  Take a look at our [search guide](/api/reference/search/) to learn more about querying templates.
        /// </remarks>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Which account to return Templates for. Must be a team member. Use &#x60;all&#x60; to indicate all team members. Defaults to your account. (optional)</param>
        /// <param name="page">Which page number of the Template List to return. Defaults to &#x60;1&#x60;. (optional, default to 1)</param>
        /// <param name="pageSize">Number of objects to be returned per page. Must be between &#x60;1&#x60; and &#x60;100&#x60;. Default is &#x60;20&#x60;. (optional, default to 20)</param>
        /// <param name="query">String that includes search terms and/or fields to be used to filter the Template objects. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TemplateListResponse</returns>
        ApiResponse<TemplateListResponse> TemplateListWithHttpInfo(string? accountId = default(string?), int? page = default(int?), int? pageSize = default(int?), string? query = default(string?), int operationIndex = 0);
        /// <summary>
        /// Remove User from Template
        /// </summary>
        /// <remarks>
        /// Removes the specified Account&#39;s access to the specified Template.
        /// </remarks>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the Template to remove the Account&#39;s access to.</param>
        /// <param name="templateRemoveUserRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TemplateGetResponse</returns>
        TemplateGetResponse TemplateRemoveUser(string templateId, TemplateRemoveUserRequest templateRemoveUserRequest, int operationIndex = 0);

        /// <summary>
        /// Remove User from Template
        /// </summary>
        /// <remarks>
        /// Removes the specified Account&#39;s access to the specified Template.
        /// </remarks>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the Template to remove the Account&#39;s access to.</param>
        /// <param name="templateRemoveUserRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TemplateGetResponse</returns>
        ApiResponse<TemplateGetResponse> TemplateRemoveUserWithHttpInfo(string templateId, TemplateRemoveUserRequest templateRemoveUserRequest, int operationIndex = 0);
        /// <summary>
        /// Update Template Files
        /// </summary>
        /// <remarks>
        /// Overlays a new file with the overlay of an existing template. The new file(s) must:  1. have the same or higher page count 2. the same orientation as the file(s) being replaced.  This will not overwrite or in any way affect the existing template. Both the existing template and new template will be available for use after executing this endpoint. Also note that this will decrement your template quota.  Overlaying new files is asynchronous and a successful call to this endpoint will return 200 OK response if the request passes initial validation checks.  It is recommended that a callback be implemented to listen for the callback event. A &#x60;template_created&#x60; event will be sent when the files are updated or a &#x60;template_error&#x60; event will be sent if there was a problem while updating the files. If a callback handler has been configured and the event has not been received within 60 minutes of making the call, check the status of the request in the API dashboard and retry the request if necessary.  If the page orientation or page count is different from the original template document, we will notify you with a &#x60;template_error&#x60; [callback event](https://app.hellosign.com/api/eventsAndCallbacksWalkthrough).
        /// </remarks>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The ID of the template whose files to update.</param>
        /// <param name="templateUpdateFilesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TemplateUpdateFilesResponse</returns>
        TemplateUpdateFilesResponse TemplateUpdateFiles(string templateId, TemplateUpdateFilesRequest templateUpdateFilesRequest, int operationIndex = 0);

        /// <summary>
        /// Update Template Files
        /// </summary>
        /// <remarks>
        /// Overlays a new file with the overlay of an existing template. The new file(s) must:  1. have the same or higher page count 2. the same orientation as the file(s) being replaced.  This will not overwrite or in any way affect the existing template. Both the existing template and new template will be available for use after executing this endpoint. Also note that this will decrement your template quota.  Overlaying new files is asynchronous and a successful call to this endpoint will return 200 OK response if the request passes initial validation checks.  It is recommended that a callback be implemented to listen for the callback event. A &#x60;template_created&#x60; event will be sent when the files are updated or a &#x60;template_error&#x60; event will be sent if there was a problem while updating the files. If a callback handler has been configured and the event has not been received within 60 minutes of making the call, check the status of the request in the API dashboard and retry the request if necessary.  If the page orientation or page count is different from the original template document, we will notify you with a &#x60;template_error&#x60; [callback event](https://app.hellosign.com/api/eventsAndCallbacksWalkthrough).
        /// </remarks>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The ID of the template whose files to update.</param>
        /// <param name="templateUpdateFilesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TemplateUpdateFilesResponse</returns>
        ApiResponse<TemplateUpdateFilesResponse> TemplateUpdateFilesWithHttpInfo(string templateId, TemplateUpdateFilesRequest templateUpdateFilesRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITemplateApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add User to Template
        /// </summary>
        /// <remarks>
        /// Gives the specified Account access to the specified Template. The specified Account must be a part of your Team.
        /// </remarks>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the Template to give the Account access to.</param>
        /// <param name="templateAddUserRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TemplateGetResponse</returns>
        System.Threading.Tasks.Task<TemplateGetResponse> TemplateAddUserAsync(string templateId, TemplateAddUserRequest templateAddUserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add User to Template
        /// </summary>
        /// <remarks>
        /// Gives the specified Account access to the specified Template. The specified Account must be a part of your Team.
        /// </remarks>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the Template to give the Account access to.</param>
        /// <param name="templateAddUserRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TemplateGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateGetResponse>> TemplateAddUserWithHttpInfoAsync(string templateId, TemplateAddUserRequest templateAddUserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Embedded Template Draft
        /// </summary>
        /// <remarks>
        /// The first step in an embedded template workflow. Creates a draft template that can then be further set up in the template &#39;edit&#39; stage.
        /// </remarks>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateCreateEmbeddedDraftRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TemplateCreateEmbeddedDraftResponse</returns>
        System.Threading.Tasks.Task<TemplateCreateEmbeddedDraftResponse> TemplateCreateEmbeddedDraftAsync(TemplateCreateEmbeddedDraftRequest templateCreateEmbeddedDraftRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Embedded Template Draft
        /// </summary>
        /// <remarks>
        /// The first step in an embedded template workflow. Creates a draft template that can then be further set up in the template &#39;edit&#39; stage.
        /// </remarks>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateCreateEmbeddedDraftRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TemplateCreateEmbeddedDraftResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateCreateEmbeddedDraftResponse>> TemplateCreateEmbeddedDraftWithHttpInfoAsync(TemplateCreateEmbeddedDraftRequest templateCreateEmbeddedDraftRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Template
        /// </summary>
        /// <remarks>
        /// Completely deletes the template specified from the account.
        /// </remarks>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the Template to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TemplateDeleteAsync(string templateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Template
        /// </summary>
        /// <remarks>
        /// Completely deletes the template specified from the account.
        /// </remarks>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the Template to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TemplateDeleteWithHttpInfoAsync(string templateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Template File
        /// </summary>
        /// <remarks>
        /// Obtain a copy of the current documents specified by the &#x60;template_id&#x60; parameter. Returns a PDF or ZIP file.  If the files are currently being prepared, a status code of &#x60;409&#x60; will be returned instead. In this case please wait for the &#x60;template_created&#x60; callback event.
        /// </remarks>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template files to retrieve.</param>
        /// <param name="fileType">Set to &#x60;pdf&#x60; for a single merged document or &#x60;zip&#x60; for a collection of individual documents. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> TemplateFilesAsync(string templateId, string? fileType = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Template File
        /// </summary>
        /// <remarks>
        /// Obtain a copy of the current documents specified by the &#x60;template_id&#x60; parameter. Returns a PDF or ZIP file.  If the files are currently being prepared, a status code of &#x60;409&#x60; will be returned instead. In this case please wait for the &#x60;template_created&#x60; callback event.
        /// </remarks>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template files to retrieve.</param>
        /// <param name="fileType">Set to &#x60;pdf&#x60; for a single merged document or &#x60;zip&#x60; for a collection of individual documents. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> TemplateFilesWithHttpInfoAsync(string templateId, string? fileType = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Template File as Encoded String
        /// </summary>
        /// <remarks>
        /// Obtain a copy of the current documents specified by the &#x60;template_id&#x60; parameter. Returns a JSON object with a &#x60;data_uri&#x60; representing the base64 encoded file (PDFs only).   If the files are currently being prepared, a status code of &#x60;409&#x60; will be returned instead. In this case please wait for the &#x60;template_created&#x60; callback event.
        /// </remarks>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template files to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileResponseDataUri</returns>
        System.Threading.Tasks.Task<FileResponseDataUri> TemplateFilesAsEncodedStringAsync(string templateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Template File as Encoded String
        /// </summary>
        /// <remarks>
        /// Obtain a copy of the current documents specified by the &#x60;template_id&#x60; parameter. Returns a JSON object with a &#x60;data_uri&#x60; representing the base64 encoded file (PDFs only).   If the files are currently being prepared, a status code of &#x60;409&#x60; will be returned instead. In this case please wait for the &#x60;template_created&#x60; callback event.
        /// </remarks>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template files to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileResponseDataUri)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileResponseDataUri>> TemplateFilesAsEncodedStringWithHttpInfoAsync(string templateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Template File as File Url
        /// </summary>
        /// <remarks>
        /// Obtain a copy of the current documents specified by the &#x60;template_id&#x60; parameter. Returns a JSON object with a url to the file (PDFs only).   If the files are currently being prepared, a status code of &#x60;409&#x60; will be returned instead. In this case please wait for the &#x60;template_created&#x60; callback event.
        /// </remarks>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template files to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileResponse</returns>
        System.Threading.Tasks.Task<FileResponse> TemplateFilesAsFileUrlAsync(string templateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Template File as File Url
        /// </summary>
        /// <remarks>
        /// Obtain a copy of the current documents specified by the &#x60;template_id&#x60; parameter. Returns a JSON object with a url to the file (PDFs only).   If the files are currently being prepared, a status code of &#x60;409&#x60; will be returned instead. In this case please wait for the &#x60;template_created&#x60; callback event.
        /// </remarks>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template files to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileResponse>> TemplateFilesAsFileUrlWithHttpInfoAsync(string templateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Template
        /// </summary>
        /// <remarks>
        /// Returns the Template specified by the &#x60;template_id&#x60; parameter.
        /// </remarks>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the Template to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TemplateGetResponse</returns>
        System.Threading.Tasks.Task<TemplateGetResponse> TemplateGetAsync(string templateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Template
        /// </summary>
        /// <remarks>
        /// Returns the Template specified by the &#x60;template_id&#x60; parameter.
        /// </remarks>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the Template to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TemplateGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateGetResponse>> TemplateGetWithHttpInfoAsync(string templateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Templates
        /// </summary>
        /// <remarks>
        /// Returns a list of the Templates that are accessible by you.  Take a look at our [search guide](/api/reference/search/) to learn more about querying templates.
        /// </remarks>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Which account to return Templates for. Must be a team member. Use &#x60;all&#x60; to indicate all team members. Defaults to your account. (optional)</param>
        /// <param name="page">Which page number of the Template List to return. Defaults to &#x60;1&#x60;. (optional, default to 1)</param>
        /// <param name="pageSize">Number of objects to be returned per page. Must be between &#x60;1&#x60; and &#x60;100&#x60;. Default is &#x60;20&#x60;. (optional, default to 20)</param>
        /// <param name="query">String that includes search terms and/or fields to be used to filter the Template objects. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TemplateListResponse</returns>
        System.Threading.Tasks.Task<TemplateListResponse> TemplateListAsync(string? accountId = default(string?), int? page = default(int?), int? pageSize = default(int?), string? query = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Templates
        /// </summary>
        /// <remarks>
        /// Returns a list of the Templates that are accessible by you.  Take a look at our [search guide](/api/reference/search/) to learn more about querying templates.
        /// </remarks>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Which account to return Templates for. Must be a team member. Use &#x60;all&#x60; to indicate all team members. Defaults to your account. (optional)</param>
        /// <param name="page">Which page number of the Template List to return. Defaults to &#x60;1&#x60;. (optional, default to 1)</param>
        /// <param name="pageSize">Number of objects to be returned per page. Must be between &#x60;1&#x60; and &#x60;100&#x60;. Default is &#x60;20&#x60;. (optional, default to 20)</param>
        /// <param name="query">String that includes search terms and/or fields to be used to filter the Template objects. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TemplateListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateListResponse>> TemplateListWithHttpInfoAsync(string? accountId = default(string?), int? page = default(int?), int? pageSize = default(int?), string? query = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove User from Template
        /// </summary>
        /// <remarks>
        /// Removes the specified Account&#39;s access to the specified Template.
        /// </remarks>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the Template to remove the Account&#39;s access to.</param>
        /// <param name="templateRemoveUserRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TemplateGetResponse</returns>
        System.Threading.Tasks.Task<TemplateGetResponse> TemplateRemoveUserAsync(string templateId, TemplateRemoveUserRequest templateRemoveUserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove User from Template
        /// </summary>
        /// <remarks>
        /// Removes the specified Account&#39;s access to the specified Template.
        /// </remarks>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the Template to remove the Account&#39;s access to.</param>
        /// <param name="templateRemoveUserRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TemplateGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateGetResponse>> TemplateRemoveUserWithHttpInfoAsync(string templateId, TemplateRemoveUserRequest templateRemoveUserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Template Files
        /// </summary>
        /// <remarks>
        /// Overlays a new file with the overlay of an existing template. The new file(s) must:  1. have the same or higher page count 2. the same orientation as the file(s) being replaced.  This will not overwrite or in any way affect the existing template. Both the existing template and new template will be available for use after executing this endpoint. Also note that this will decrement your template quota.  Overlaying new files is asynchronous and a successful call to this endpoint will return 200 OK response if the request passes initial validation checks.  It is recommended that a callback be implemented to listen for the callback event. A &#x60;template_created&#x60; event will be sent when the files are updated or a &#x60;template_error&#x60; event will be sent if there was a problem while updating the files. If a callback handler has been configured and the event has not been received within 60 minutes of making the call, check the status of the request in the API dashboard and retry the request if necessary.  If the page orientation or page count is different from the original template document, we will notify you with a &#x60;template_error&#x60; [callback event](https://app.hellosign.com/api/eventsAndCallbacksWalkthrough).
        /// </remarks>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The ID of the template whose files to update.</param>
        /// <param name="templateUpdateFilesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TemplateUpdateFilesResponse</returns>
        System.Threading.Tasks.Task<TemplateUpdateFilesResponse> TemplateUpdateFilesAsync(string templateId, TemplateUpdateFilesRequest templateUpdateFilesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Template Files
        /// </summary>
        /// <remarks>
        /// Overlays a new file with the overlay of an existing template. The new file(s) must:  1. have the same or higher page count 2. the same orientation as the file(s) being replaced.  This will not overwrite or in any way affect the existing template. Both the existing template and new template will be available for use after executing this endpoint. Also note that this will decrement your template quota.  Overlaying new files is asynchronous and a successful call to this endpoint will return 200 OK response if the request passes initial validation checks.  It is recommended that a callback be implemented to listen for the callback event. A &#x60;template_created&#x60; event will be sent when the files are updated or a &#x60;template_error&#x60; event will be sent if there was a problem while updating the files. If a callback handler has been configured and the event has not been received within 60 minutes of making the call, check the status of the request in the API dashboard and retry the request if necessary.  If the page orientation or page count is different from the original template document, we will notify you with a &#x60;template_error&#x60; [callback event](https://app.hellosign.com/api/eventsAndCallbacksWalkthrough).
        /// </remarks>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The ID of the template whose files to update.</param>
        /// <param name="templateUpdateFilesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TemplateUpdateFilesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateUpdateFilesResponse>> TemplateUpdateFilesWithHttpInfoAsync(string templateId, TemplateUpdateFilesRequest templateUpdateFilesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITemplateApi : ITemplateApiSync, ITemplateApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TemplateApi : ITemplateApi
    {
        private HelloSign.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TemplateApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TemplateApi(string basePath)
        {
            this.Configuration = HelloSign.Client.Configuration.MergeConfigurations(
                HelloSign.Client.GlobalConfiguration.Instance,
                new HelloSign.Client.Configuration { BasePath = basePath }
            );
            this.Client = new HelloSign.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HelloSign.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = HelloSign.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TemplateApi(HelloSign.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = HelloSign.Client.Configuration.MergeConfigurations(
                HelloSign.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new HelloSign.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HelloSign.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = HelloSign.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TemplateApi(HelloSign.Client.ISynchronousClient client, HelloSign.Client.IAsynchronousClient asyncClient, HelloSign.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = HelloSign.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public HelloSign.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public HelloSign.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public HelloSign.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public HelloSign.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add User to Template Gives the specified Account access to the specified Template. The specified Account must be a part of your Team.
        /// </summary>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the Template to give the Account access to.</param>
        /// <param name="templateAddUserRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TemplateGetResponse</returns>
        public TemplateGetResponse TemplateAddUser(string templateId, TemplateAddUserRequest templateAddUserRequest, int operationIndex = 0)
        {
            HelloSign.Client.ApiResponse<TemplateGetResponse> localVarResponse = TemplateAddUserWithHttpInfo(templateId, templateAddUserRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add User to Template Gives the specified Account access to the specified Template. The specified Account must be a part of your Team.
        /// </summary>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the Template to give the Account access to.</param>
        /// <param name="templateAddUserRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TemplateGetResponse</returns>
        public HelloSign.Client.ApiResponse<TemplateGetResponse> TemplateAddUserWithHttpInfo(string templateId, TemplateAddUserRequest templateAddUserRequest, int operationIndex = 0)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new HelloSign.Client.ApiException(400, "Missing required parameter 'templateId' when calling TemplateApi->TemplateAddUser");
            }

            // verify the required parameter 'templateAddUserRequest' is set
            if (templateAddUserRequest == null)
            {
                throw new HelloSign.Client.ApiException(400, "Missing required parameter 'templateAddUserRequest' when calling TemplateApi->TemplateAddUser");
            }

            HelloSign.Client.RequestOptions localVarRequestOptions = new HelloSign.Client.RequestOptions();

            var localVarContentType = "";
            var openApiTypes = templateAddUserRequest.GetOpenApiTypes();
            if (ClientUtils.HasFileType(openApiTypes))
            {
                ClientUtils.SetFormData(localVarRequestOptions, openApiTypes);
                localVarContentType = "multipart/form-data";
            }
            else
            {
                localVarContentType = "application/json";
                localVarRequestOptions.Data = templateAddUserRequest;
            }

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HelloSign.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", HelloSign.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            localVarRequestOptions.Operation = "TemplateApi.TemplateAddUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + HelloSign.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (oauth2) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TemplateGetResponse>("/template/add_user/{template_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TemplateAddUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add User to Template Gives the specified Account access to the specified Template. The specified Account must be a part of your Team.
        /// </summary>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the Template to give the Account access to.</param>
        /// <param name="templateAddUserRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TemplateGetResponse</returns>
        public async System.Threading.Tasks.Task<TemplateGetResponse> TemplateAddUserAsync(string templateId, TemplateAddUserRequest templateAddUserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HelloSign.Client.ApiResponse<TemplateGetResponse> localVarResponse = await TemplateAddUserWithHttpInfoAsync(templateId, templateAddUserRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add User to Template Gives the specified Account access to the specified Template. The specified Account must be a part of your Team.
        /// </summary>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the Template to give the Account access to.</param>
        /// <param name="templateAddUserRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TemplateGetResponse)</returns>
        public async System.Threading.Tasks.Task<HelloSign.Client.ApiResponse<TemplateGetResponse>> TemplateAddUserWithHttpInfoAsync(string templateId, TemplateAddUserRequest templateAddUserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new HelloSign.Client.ApiException(400, "Missing required parameter 'templateId' when calling TemplateApi->TemplateAddUser");
            }

            // verify the required parameter 'templateAddUserRequest' is set
            if (templateAddUserRequest == null)
            {
                throw new HelloSign.Client.ApiException(400, "Missing required parameter 'templateAddUserRequest' when calling TemplateApi->TemplateAddUser");
            }


            HelloSign.Client.RequestOptions localVarRequestOptions = new HelloSign.Client.RequestOptions();

            var localVarContentType = "";
            var openApiTypes = templateAddUserRequest.GetOpenApiTypes();
            if (ClientUtils.HasFileType(openApiTypes))
            {
                ClientUtils.SetFormData(localVarRequestOptions, openApiTypes);
                localVarContentType = "multipart/form-data";
            }
            else
            {
                localVarContentType = "application/json";
                localVarRequestOptions.Data = templateAddUserRequest;
            }

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HelloSign.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", HelloSign.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            localVarRequestOptions.Operation = "TemplateApi.TemplateAddUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + HelloSign.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (oauth2) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TemplateGetResponse>("/template/add_user/{template_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TemplateAddUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Embedded Template Draft The first step in an embedded template workflow. Creates a draft template that can then be further set up in the template &#39;edit&#39; stage.
        /// </summary>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateCreateEmbeddedDraftRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TemplateCreateEmbeddedDraftResponse</returns>
        public TemplateCreateEmbeddedDraftResponse TemplateCreateEmbeddedDraft(TemplateCreateEmbeddedDraftRequest templateCreateEmbeddedDraftRequest, int operationIndex = 0)
        {
            HelloSign.Client.ApiResponse<TemplateCreateEmbeddedDraftResponse> localVarResponse = TemplateCreateEmbeddedDraftWithHttpInfo(templateCreateEmbeddedDraftRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Embedded Template Draft The first step in an embedded template workflow. Creates a draft template that can then be further set up in the template &#39;edit&#39; stage.
        /// </summary>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateCreateEmbeddedDraftRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TemplateCreateEmbeddedDraftResponse</returns>
        public HelloSign.Client.ApiResponse<TemplateCreateEmbeddedDraftResponse> TemplateCreateEmbeddedDraftWithHttpInfo(TemplateCreateEmbeddedDraftRequest templateCreateEmbeddedDraftRequest, int operationIndex = 0)
        {
            // verify the required parameter 'templateCreateEmbeddedDraftRequest' is set
            if (templateCreateEmbeddedDraftRequest == null)
            {
                throw new HelloSign.Client.ApiException(400, "Missing required parameter 'templateCreateEmbeddedDraftRequest' when calling TemplateApi->TemplateCreateEmbeddedDraft");
            }

            HelloSign.Client.RequestOptions localVarRequestOptions = new HelloSign.Client.RequestOptions();

            var localVarContentType = "";
            var openApiTypes = templateCreateEmbeddedDraftRequest.GetOpenApiTypes();
            if (ClientUtils.HasFileType(openApiTypes))
            {
                ClientUtils.SetFormData(localVarRequestOptions, openApiTypes);
                localVarContentType = "multipart/form-data";
            }
            else
            {
                localVarContentType = "application/json";
                localVarRequestOptions.Data = templateCreateEmbeddedDraftRequest;
            }

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HelloSign.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Operation = "TemplateApi.TemplateCreateEmbeddedDraft";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + HelloSign.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (oauth2) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TemplateCreateEmbeddedDraftResponse>("/template/create_embedded_draft", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TemplateCreateEmbeddedDraft", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Embedded Template Draft The first step in an embedded template workflow. Creates a draft template that can then be further set up in the template &#39;edit&#39; stage.
        /// </summary>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateCreateEmbeddedDraftRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TemplateCreateEmbeddedDraftResponse</returns>
        public async System.Threading.Tasks.Task<TemplateCreateEmbeddedDraftResponse> TemplateCreateEmbeddedDraftAsync(TemplateCreateEmbeddedDraftRequest templateCreateEmbeddedDraftRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HelloSign.Client.ApiResponse<TemplateCreateEmbeddedDraftResponse> localVarResponse = await TemplateCreateEmbeddedDraftWithHttpInfoAsync(templateCreateEmbeddedDraftRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Embedded Template Draft The first step in an embedded template workflow. Creates a draft template that can then be further set up in the template &#39;edit&#39; stage.
        /// </summary>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateCreateEmbeddedDraftRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TemplateCreateEmbeddedDraftResponse)</returns>
        public async System.Threading.Tasks.Task<HelloSign.Client.ApiResponse<TemplateCreateEmbeddedDraftResponse>> TemplateCreateEmbeddedDraftWithHttpInfoAsync(TemplateCreateEmbeddedDraftRequest templateCreateEmbeddedDraftRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'templateCreateEmbeddedDraftRequest' is set
            if (templateCreateEmbeddedDraftRequest == null)
            {
                throw new HelloSign.Client.ApiException(400, "Missing required parameter 'templateCreateEmbeddedDraftRequest' when calling TemplateApi->TemplateCreateEmbeddedDraft");
            }


            HelloSign.Client.RequestOptions localVarRequestOptions = new HelloSign.Client.RequestOptions();

            var localVarContentType = "";
            var openApiTypes = templateCreateEmbeddedDraftRequest.GetOpenApiTypes();
            if (ClientUtils.HasFileType(openApiTypes))
            {
                ClientUtils.SetFormData(localVarRequestOptions, openApiTypes);
                localVarContentType = "multipart/form-data";
            }
            else
            {
                localVarContentType = "application/json";
                localVarRequestOptions.Data = templateCreateEmbeddedDraftRequest;
            }

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HelloSign.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Operation = "TemplateApi.TemplateCreateEmbeddedDraft";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + HelloSign.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (oauth2) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TemplateCreateEmbeddedDraftResponse>("/template/create_embedded_draft", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TemplateCreateEmbeddedDraft", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Template Completely deletes the template specified from the account.
        /// </summary>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the Template to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void TemplateDelete(string templateId, int operationIndex = 0)
        {
            TemplateDeleteWithHttpInfo(templateId);
        }

        /// <summary>
        /// Delete Template Completely deletes the template specified from the account.
        /// </summary>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the Template to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HelloSign.Client.ApiResponse<Object> TemplateDeleteWithHttpInfo(string templateId, int operationIndex = 0)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new HelloSign.Client.ApiException(400, "Missing required parameter 'templateId' when calling TemplateApi->TemplateDelete");
            }

            HelloSign.Client.RequestOptions localVarRequestOptions = new HelloSign.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };
            var localVarContentType = HelloSign.Client.ClientUtils.SelectHeaderContentType(_contentTypes);

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HelloSign.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", HelloSign.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            localVarRequestOptions.Operation = "TemplateApi.TemplateDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + HelloSign.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (oauth2) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/template/delete/{template_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TemplateDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Template Completely deletes the template specified from the account.
        /// </summary>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the Template to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TemplateDeleteAsync(string templateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await TemplateDeleteWithHttpInfoAsync(templateId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Template Completely deletes the template specified from the account.
        /// </summary>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the Template to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HelloSign.Client.ApiResponse<Object>> TemplateDeleteWithHttpInfoAsync(string templateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new HelloSign.Client.ApiException(400, "Missing required parameter 'templateId' when calling TemplateApi->TemplateDelete");
            }


            HelloSign.Client.RequestOptions localVarRequestOptions = new HelloSign.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            var localVarContentType = HelloSign.Client.ClientUtils.SelectHeaderContentType(_contentTypes);

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HelloSign.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", HelloSign.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            localVarRequestOptions.Operation = "TemplateApi.TemplateDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + HelloSign.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (oauth2) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/template/delete/{template_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TemplateDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Template File Obtain a copy of the current documents specified by the &#x60;template_id&#x60; parameter. Returns a PDF or ZIP file.  If the files are currently being prepared, a status code of &#x60;409&#x60; will be returned instead. In this case please wait for the &#x60;template_created&#x60; callback event.
        /// </summary>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template files to retrieve.</param>
        /// <param name="fileType">Set to &#x60;pdf&#x60; for a single merged document or &#x60;zip&#x60; for a collection of individual documents. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream TemplateFiles(string templateId, string? fileType = default(string?), int operationIndex = 0)
        {
            HelloSign.Client.ApiResponse<System.IO.Stream> localVarResponse = TemplateFilesWithHttpInfo(templateId, fileType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Template File Obtain a copy of the current documents specified by the &#x60;template_id&#x60; parameter. Returns a PDF or ZIP file.  If the files are currently being prepared, a status code of &#x60;409&#x60; will be returned instead. In this case please wait for the &#x60;template_created&#x60; callback event.
        /// </summary>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template files to retrieve.</param>
        /// <param name="fileType">Set to &#x60;pdf&#x60; for a single merged document or &#x60;zip&#x60; for a collection of individual documents. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public HelloSign.Client.ApiResponse<System.IO.Stream> TemplateFilesWithHttpInfo(string templateId, string? fileType = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new HelloSign.Client.ApiException(400, "Missing required parameter 'templateId' when calling TemplateApi->TemplateFiles");
            }

            HelloSign.Client.RequestOptions localVarRequestOptions = new HelloSign.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };
            var localVarContentType = HelloSign.Client.ClientUtils.SelectHeaderContentType(_contentTypes);

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/pdf",
                "application/zip",
                "application/json"
            };

            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HelloSign.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", HelloSign.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            if (fileType != null)
            {
                localVarRequestOptions.QueryParameters.Add(HelloSign.Client.ClientUtils.ParameterToMultiMap("", "file_type", fileType));
            }
            localVarRequestOptions.Operation = "TemplateApi.TemplateFiles";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + HelloSign.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (oauth2) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/template/files/{template_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TemplateFiles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Template File Obtain a copy of the current documents specified by the &#x60;template_id&#x60; parameter. Returns a PDF or ZIP file.  If the files are currently being prepared, a status code of &#x60;409&#x60; will be returned instead. In this case please wait for the &#x60;template_created&#x60; callback event.
        /// </summary>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template files to retrieve.</param>
        /// <param name="fileType">Set to &#x60;pdf&#x60; for a single merged document or &#x60;zip&#x60; for a collection of individual documents. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> TemplateFilesAsync(string templateId, string? fileType = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HelloSign.Client.ApiResponse<System.IO.Stream> localVarResponse = await TemplateFilesWithHttpInfoAsync(templateId, fileType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Template File Obtain a copy of the current documents specified by the &#x60;template_id&#x60; parameter. Returns a PDF or ZIP file.  If the files are currently being prepared, a status code of &#x60;409&#x60; will be returned instead. In this case please wait for the &#x60;template_created&#x60; callback event.
        /// </summary>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template files to retrieve.</param>
        /// <param name="fileType">Set to &#x60;pdf&#x60; for a single merged document or &#x60;zip&#x60; for a collection of individual documents. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<HelloSign.Client.ApiResponse<System.IO.Stream>> TemplateFilesWithHttpInfoAsync(string templateId, string? fileType = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new HelloSign.Client.ApiException(400, "Missing required parameter 'templateId' when calling TemplateApi->TemplateFiles");
            }


            HelloSign.Client.RequestOptions localVarRequestOptions = new HelloSign.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            var localVarContentType = HelloSign.Client.ClientUtils.SelectHeaderContentType(_contentTypes);

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/pdf",
                "application/zip",
                "application/json"
            };

            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HelloSign.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", HelloSign.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            if (fileType != null)
            {
                localVarRequestOptions.QueryParameters.Add(HelloSign.Client.ClientUtils.ParameterToMultiMap("", "file_type", fileType));
            }
            localVarRequestOptions.Operation = "TemplateApi.TemplateFiles";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + HelloSign.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (oauth2) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/template/files/{template_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TemplateFiles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Template File as Encoded String Obtain a copy of the current documents specified by the &#x60;template_id&#x60; parameter. Returns a JSON object with a &#x60;data_uri&#x60; representing the base64 encoded file (PDFs only).   If the files are currently being prepared, a status code of &#x60;409&#x60; will be returned instead. In this case please wait for the &#x60;template_created&#x60; callback event.
        /// </summary>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template files to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FileResponseDataUri</returns>
        public FileResponseDataUri TemplateFilesAsEncodedString(string templateId, int operationIndex = 0)
        {
            HelloSign.Client.ApiResponse<FileResponseDataUri> localVarResponse = TemplateFilesAsEncodedStringWithHttpInfo(templateId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Template File as Encoded String Obtain a copy of the current documents specified by the &#x60;template_id&#x60; parameter. Returns a JSON object with a &#x60;data_uri&#x60; representing the base64 encoded file (PDFs only).   If the files are currently being prepared, a status code of &#x60;409&#x60; will be returned instead. In this case please wait for the &#x60;template_created&#x60; callback event.
        /// </summary>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template files to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FileResponseDataUri</returns>
        public HelloSign.Client.ApiResponse<FileResponseDataUri> TemplateFilesAsEncodedStringWithHttpInfo(string templateId, int operationIndex = 0)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new HelloSign.Client.ApiException(400, "Missing required parameter 'templateId' when calling TemplateApi->TemplateFilesAsEncodedString");
            }

            HelloSign.Client.RequestOptions localVarRequestOptions = new HelloSign.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };
            var localVarContentType = HelloSign.Client.ClientUtils.SelectHeaderContentType(_contentTypes);

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HelloSign.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", HelloSign.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            localVarRequestOptions.Operation = "TemplateApi.TemplateFilesAsEncodedString";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + HelloSign.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (oauth2) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FileResponseDataUri>("/template/files/{template_id}?get_data_uri=1&file_type=pdf", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TemplateFilesAsEncodedString", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Template File as Encoded String Obtain a copy of the current documents specified by the &#x60;template_id&#x60; parameter. Returns a JSON object with a &#x60;data_uri&#x60; representing the base64 encoded file (PDFs only).   If the files are currently being prepared, a status code of &#x60;409&#x60; will be returned instead. In this case please wait for the &#x60;template_created&#x60; callback event.
        /// </summary>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template files to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileResponseDataUri</returns>
        public async System.Threading.Tasks.Task<FileResponseDataUri> TemplateFilesAsEncodedStringAsync(string templateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HelloSign.Client.ApiResponse<FileResponseDataUri> localVarResponse = await TemplateFilesAsEncodedStringWithHttpInfoAsync(templateId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Template File as Encoded String Obtain a copy of the current documents specified by the &#x60;template_id&#x60; parameter. Returns a JSON object with a &#x60;data_uri&#x60; representing the base64 encoded file (PDFs only).   If the files are currently being prepared, a status code of &#x60;409&#x60; will be returned instead. In this case please wait for the &#x60;template_created&#x60; callback event.
        /// </summary>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template files to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileResponseDataUri)</returns>
        public async System.Threading.Tasks.Task<HelloSign.Client.ApiResponse<FileResponseDataUri>> TemplateFilesAsEncodedStringWithHttpInfoAsync(string templateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new HelloSign.Client.ApiException(400, "Missing required parameter 'templateId' when calling TemplateApi->TemplateFilesAsEncodedString");
            }


            HelloSign.Client.RequestOptions localVarRequestOptions = new HelloSign.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            var localVarContentType = HelloSign.Client.ClientUtils.SelectHeaderContentType(_contentTypes);

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HelloSign.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", HelloSign.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            localVarRequestOptions.Operation = "TemplateApi.TemplateFilesAsEncodedString";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + HelloSign.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (oauth2) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FileResponseDataUri>("/template/files/{template_id}?get_data_uri=1&file_type=pdf", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TemplateFilesAsEncodedString", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Template File as File Url Obtain a copy of the current documents specified by the &#x60;template_id&#x60; parameter. Returns a JSON object with a url to the file (PDFs only).   If the files are currently being prepared, a status code of &#x60;409&#x60; will be returned instead. In this case please wait for the &#x60;template_created&#x60; callback event.
        /// </summary>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template files to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FileResponse</returns>
        public FileResponse TemplateFilesAsFileUrl(string templateId, int operationIndex = 0)
        {
            HelloSign.Client.ApiResponse<FileResponse> localVarResponse = TemplateFilesAsFileUrlWithHttpInfo(templateId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Template File as File Url Obtain a copy of the current documents specified by the &#x60;template_id&#x60; parameter. Returns a JSON object with a url to the file (PDFs only).   If the files are currently being prepared, a status code of &#x60;409&#x60; will be returned instead. In this case please wait for the &#x60;template_created&#x60; callback event.
        /// </summary>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template files to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FileResponse</returns>
        public HelloSign.Client.ApiResponse<FileResponse> TemplateFilesAsFileUrlWithHttpInfo(string templateId, int operationIndex = 0)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new HelloSign.Client.ApiException(400, "Missing required parameter 'templateId' when calling TemplateApi->TemplateFilesAsFileUrl");
            }

            HelloSign.Client.RequestOptions localVarRequestOptions = new HelloSign.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };
            var localVarContentType = HelloSign.Client.ClientUtils.SelectHeaderContentType(_contentTypes);

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HelloSign.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", HelloSign.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            localVarRequestOptions.Operation = "TemplateApi.TemplateFilesAsFileUrl";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + HelloSign.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (oauth2) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FileResponse>("/template/files/{template_id}?get_url=1&file_type=pdf", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TemplateFilesAsFileUrl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Template File as File Url Obtain a copy of the current documents specified by the &#x60;template_id&#x60; parameter. Returns a JSON object with a url to the file (PDFs only).   If the files are currently being prepared, a status code of &#x60;409&#x60; will be returned instead. In this case please wait for the &#x60;template_created&#x60; callback event.
        /// </summary>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template files to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileResponse</returns>
        public async System.Threading.Tasks.Task<FileResponse> TemplateFilesAsFileUrlAsync(string templateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HelloSign.Client.ApiResponse<FileResponse> localVarResponse = await TemplateFilesAsFileUrlWithHttpInfoAsync(templateId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Template File as File Url Obtain a copy of the current documents specified by the &#x60;template_id&#x60; parameter. Returns a JSON object with a url to the file (PDFs only).   If the files are currently being prepared, a status code of &#x60;409&#x60; will be returned instead. In this case please wait for the &#x60;template_created&#x60; callback event.
        /// </summary>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template files to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileResponse)</returns>
        public async System.Threading.Tasks.Task<HelloSign.Client.ApiResponse<FileResponse>> TemplateFilesAsFileUrlWithHttpInfoAsync(string templateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new HelloSign.Client.ApiException(400, "Missing required parameter 'templateId' when calling TemplateApi->TemplateFilesAsFileUrl");
            }


            HelloSign.Client.RequestOptions localVarRequestOptions = new HelloSign.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            var localVarContentType = HelloSign.Client.ClientUtils.SelectHeaderContentType(_contentTypes);

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HelloSign.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", HelloSign.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            localVarRequestOptions.Operation = "TemplateApi.TemplateFilesAsFileUrl";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + HelloSign.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (oauth2) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FileResponse>("/template/files/{template_id}?get_url=1&file_type=pdf", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TemplateFilesAsFileUrl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Template Returns the Template specified by the &#x60;template_id&#x60; parameter.
        /// </summary>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the Template to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TemplateGetResponse</returns>
        public TemplateGetResponse TemplateGet(string templateId, int operationIndex = 0)
        {
            HelloSign.Client.ApiResponse<TemplateGetResponse> localVarResponse = TemplateGetWithHttpInfo(templateId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Template Returns the Template specified by the &#x60;template_id&#x60; parameter.
        /// </summary>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the Template to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TemplateGetResponse</returns>
        public HelloSign.Client.ApiResponse<TemplateGetResponse> TemplateGetWithHttpInfo(string templateId, int operationIndex = 0)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new HelloSign.Client.ApiException(400, "Missing required parameter 'templateId' when calling TemplateApi->TemplateGet");
            }

            HelloSign.Client.RequestOptions localVarRequestOptions = new HelloSign.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };
            var localVarContentType = HelloSign.Client.ClientUtils.SelectHeaderContentType(_contentTypes);

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HelloSign.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", HelloSign.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            localVarRequestOptions.Operation = "TemplateApi.TemplateGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + HelloSign.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (oauth2) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TemplateGetResponse>("/template/{template_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TemplateGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Template Returns the Template specified by the &#x60;template_id&#x60; parameter.
        /// </summary>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the Template to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TemplateGetResponse</returns>
        public async System.Threading.Tasks.Task<TemplateGetResponse> TemplateGetAsync(string templateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HelloSign.Client.ApiResponse<TemplateGetResponse> localVarResponse = await TemplateGetWithHttpInfoAsync(templateId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Template Returns the Template specified by the &#x60;template_id&#x60; parameter.
        /// </summary>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the Template to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TemplateGetResponse)</returns>
        public async System.Threading.Tasks.Task<HelloSign.Client.ApiResponse<TemplateGetResponse>> TemplateGetWithHttpInfoAsync(string templateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new HelloSign.Client.ApiException(400, "Missing required parameter 'templateId' when calling TemplateApi->TemplateGet");
            }


            HelloSign.Client.RequestOptions localVarRequestOptions = new HelloSign.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            var localVarContentType = HelloSign.Client.ClientUtils.SelectHeaderContentType(_contentTypes);

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HelloSign.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", HelloSign.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            localVarRequestOptions.Operation = "TemplateApi.TemplateGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + HelloSign.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (oauth2) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TemplateGetResponse>("/template/{template_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TemplateGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Templates Returns a list of the Templates that are accessible by you.  Take a look at our [search guide](/api/reference/search/) to learn more about querying templates.
        /// </summary>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Which account to return Templates for. Must be a team member. Use &#x60;all&#x60; to indicate all team members. Defaults to your account. (optional)</param>
        /// <param name="page">Which page number of the Template List to return. Defaults to &#x60;1&#x60;. (optional, default to 1)</param>
        /// <param name="pageSize">Number of objects to be returned per page. Must be between &#x60;1&#x60; and &#x60;100&#x60;. Default is &#x60;20&#x60;. (optional, default to 20)</param>
        /// <param name="query">String that includes search terms and/or fields to be used to filter the Template objects. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TemplateListResponse</returns>
        public TemplateListResponse TemplateList(string? accountId = default(string?), int? page = default(int?), int? pageSize = default(int?), string? query = default(string?), int operationIndex = 0)
        {
            HelloSign.Client.ApiResponse<TemplateListResponse> localVarResponse = TemplateListWithHttpInfo(accountId, page, pageSize, query);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Templates Returns a list of the Templates that are accessible by you.  Take a look at our [search guide](/api/reference/search/) to learn more about querying templates.
        /// </summary>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Which account to return Templates for. Must be a team member. Use &#x60;all&#x60; to indicate all team members. Defaults to your account. (optional)</param>
        /// <param name="page">Which page number of the Template List to return. Defaults to &#x60;1&#x60;. (optional, default to 1)</param>
        /// <param name="pageSize">Number of objects to be returned per page. Must be between &#x60;1&#x60; and &#x60;100&#x60;. Default is &#x60;20&#x60;. (optional, default to 20)</param>
        /// <param name="query">String that includes search terms and/or fields to be used to filter the Template objects. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TemplateListResponse</returns>
        public HelloSign.Client.ApiResponse<TemplateListResponse> TemplateListWithHttpInfo(string? accountId = default(string?), int? page = default(int?), int? pageSize = default(int?), string? query = default(string?), int operationIndex = 0)
        {
            HelloSign.Client.RequestOptions localVarRequestOptions = new HelloSign.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };
            var localVarContentType = HelloSign.Client.ClientUtils.SelectHeaderContentType(_contentTypes);

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HelloSign.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (accountId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HelloSign.Client.ClientUtils.ParameterToMultiMap("", "account_id", accountId));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(HelloSign.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(HelloSign.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(HelloSign.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            localVarRequestOptions.Operation = "TemplateApi.TemplateList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + HelloSign.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (oauth2) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TemplateListResponse>("/template/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TemplateList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Templates Returns a list of the Templates that are accessible by you.  Take a look at our [search guide](/api/reference/search/) to learn more about querying templates.
        /// </summary>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Which account to return Templates for. Must be a team member. Use &#x60;all&#x60; to indicate all team members. Defaults to your account. (optional)</param>
        /// <param name="page">Which page number of the Template List to return. Defaults to &#x60;1&#x60;. (optional, default to 1)</param>
        /// <param name="pageSize">Number of objects to be returned per page. Must be between &#x60;1&#x60; and &#x60;100&#x60;. Default is &#x60;20&#x60;. (optional, default to 20)</param>
        /// <param name="query">String that includes search terms and/or fields to be used to filter the Template objects. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TemplateListResponse</returns>
        public async System.Threading.Tasks.Task<TemplateListResponse> TemplateListAsync(string? accountId = default(string?), int? page = default(int?), int? pageSize = default(int?), string? query = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HelloSign.Client.ApiResponse<TemplateListResponse> localVarResponse = await TemplateListWithHttpInfoAsync(accountId, page, pageSize, query, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Templates Returns a list of the Templates that are accessible by you.  Take a look at our [search guide](/api/reference/search/) to learn more about querying templates.
        /// </summary>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Which account to return Templates for. Must be a team member. Use &#x60;all&#x60; to indicate all team members. Defaults to your account. (optional)</param>
        /// <param name="page">Which page number of the Template List to return. Defaults to &#x60;1&#x60;. (optional, default to 1)</param>
        /// <param name="pageSize">Number of objects to be returned per page. Must be between &#x60;1&#x60; and &#x60;100&#x60;. Default is &#x60;20&#x60;. (optional, default to 20)</param>
        /// <param name="query">String that includes search terms and/or fields to be used to filter the Template objects. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TemplateListResponse)</returns>
        public async System.Threading.Tasks.Task<HelloSign.Client.ApiResponse<TemplateListResponse>> TemplateListWithHttpInfoAsync(string? accountId = default(string?), int? page = default(int?), int? pageSize = default(int?), string? query = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            HelloSign.Client.RequestOptions localVarRequestOptions = new HelloSign.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            var localVarContentType = HelloSign.Client.ClientUtils.SelectHeaderContentType(_contentTypes);

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HelloSign.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (accountId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HelloSign.Client.ClientUtils.ParameterToMultiMap("", "account_id", accountId));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(HelloSign.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(HelloSign.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(HelloSign.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            localVarRequestOptions.Operation = "TemplateApi.TemplateList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + HelloSign.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (oauth2) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TemplateListResponse>("/template/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TemplateList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove User from Template Removes the specified Account&#39;s access to the specified Template.
        /// </summary>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the Template to remove the Account&#39;s access to.</param>
        /// <param name="templateRemoveUserRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TemplateGetResponse</returns>
        public TemplateGetResponse TemplateRemoveUser(string templateId, TemplateRemoveUserRequest templateRemoveUserRequest, int operationIndex = 0)
        {
            HelloSign.Client.ApiResponse<TemplateGetResponse> localVarResponse = TemplateRemoveUserWithHttpInfo(templateId, templateRemoveUserRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove User from Template Removes the specified Account&#39;s access to the specified Template.
        /// </summary>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the Template to remove the Account&#39;s access to.</param>
        /// <param name="templateRemoveUserRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TemplateGetResponse</returns>
        public HelloSign.Client.ApiResponse<TemplateGetResponse> TemplateRemoveUserWithHttpInfo(string templateId, TemplateRemoveUserRequest templateRemoveUserRequest, int operationIndex = 0)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new HelloSign.Client.ApiException(400, "Missing required parameter 'templateId' when calling TemplateApi->TemplateRemoveUser");
            }

            // verify the required parameter 'templateRemoveUserRequest' is set
            if (templateRemoveUserRequest == null)
            {
                throw new HelloSign.Client.ApiException(400, "Missing required parameter 'templateRemoveUserRequest' when calling TemplateApi->TemplateRemoveUser");
            }

            HelloSign.Client.RequestOptions localVarRequestOptions = new HelloSign.Client.RequestOptions();

            var localVarContentType = "";
            var openApiTypes = templateRemoveUserRequest.GetOpenApiTypes();
            if (ClientUtils.HasFileType(openApiTypes))
            {
                ClientUtils.SetFormData(localVarRequestOptions, openApiTypes);
                localVarContentType = "multipart/form-data";
            }
            else
            {
                localVarContentType = "application/json";
                localVarRequestOptions.Data = templateRemoveUserRequest;
            }

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HelloSign.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", HelloSign.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            localVarRequestOptions.Operation = "TemplateApi.TemplateRemoveUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + HelloSign.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (oauth2) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TemplateGetResponse>("/template/remove_user/{template_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TemplateRemoveUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove User from Template Removes the specified Account&#39;s access to the specified Template.
        /// </summary>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the Template to remove the Account&#39;s access to.</param>
        /// <param name="templateRemoveUserRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TemplateGetResponse</returns>
        public async System.Threading.Tasks.Task<TemplateGetResponse> TemplateRemoveUserAsync(string templateId, TemplateRemoveUserRequest templateRemoveUserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HelloSign.Client.ApiResponse<TemplateGetResponse> localVarResponse = await TemplateRemoveUserWithHttpInfoAsync(templateId, templateRemoveUserRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove User from Template Removes the specified Account&#39;s access to the specified Template.
        /// </summary>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the Template to remove the Account&#39;s access to.</param>
        /// <param name="templateRemoveUserRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TemplateGetResponse)</returns>
        public async System.Threading.Tasks.Task<HelloSign.Client.ApiResponse<TemplateGetResponse>> TemplateRemoveUserWithHttpInfoAsync(string templateId, TemplateRemoveUserRequest templateRemoveUserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new HelloSign.Client.ApiException(400, "Missing required parameter 'templateId' when calling TemplateApi->TemplateRemoveUser");
            }

            // verify the required parameter 'templateRemoveUserRequest' is set
            if (templateRemoveUserRequest == null)
            {
                throw new HelloSign.Client.ApiException(400, "Missing required parameter 'templateRemoveUserRequest' when calling TemplateApi->TemplateRemoveUser");
            }


            HelloSign.Client.RequestOptions localVarRequestOptions = new HelloSign.Client.RequestOptions();

            var localVarContentType = "";
            var openApiTypes = templateRemoveUserRequest.GetOpenApiTypes();
            if (ClientUtils.HasFileType(openApiTypes))
            {
                ClientUtils.SetFormData(localVarRequestOptions, openApiTypes);
                localVarContentType = "multipart/form-data";
            }
            else
            {
                localVarContentType = "application/json";
                localVarRequestOptions.Data = templateRemoveUserRequest;
            }

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HelloSign.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", HelloSign.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            localVarRequestOptions.Operation = "TemplateApi.TemplateRemoveUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + HelloSign.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (oauth2) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TemplateGetResponse>("/template/remove_user/{template_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TemplateRemoveUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Template Files Overlays a new file with the overlay of an existing template. The new file(s) must:  1. have the same or higher page count 2. the same orientation as the file(s) being replaced.  This will not overwrite or in any way affect the existing template. Both the existing template and new template will be available for use after executing this endpoint. Also note that this will decrement your template quota.  Overlaying new files is asynchronous and a successful call to this endpoint will return 200 OK response if the request passes initial validation checks.  It is recommended that a callback be implemented to listen for the callback event. A &#x60;template_created&#x60; event will be sent when the files are updated or a &#x60;template_error&#x60; event will be sent if there was a problem while updating the files. If a callback handler has been configured and the event has not been received within 60 minutes of making the call, check the status of the request in the API dashboard and retry the request if necessary.  If the page orientation or page count is different from the original template document, we will notify you with a &#x60;template_error&#x60; [callback event](https://app.hellosign.com/api/eventsAndCallbacksWalkthrough).
        /// </summary>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The ID of the template whose files to update.</param>
        /// <param name="templateUpdateFilesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TemplateUpdateFilesResponse</returns>
        public TemplateUpdateFilesResponse TemplateUpdateFiles(string templateId, TemplateUpdateFilesRequest templateUpdateFilesRequest, int operationIndex = 0)
        {
            HelloSign.Client.ApiResponse<TemplateUpdateFilesResponse> localVarResponse = TemplateUpdateFilesWithHttpInfo(templateId, templateUpdateFilesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Template Files Overlays a new file with the overlay of an existing template. The new file(s) must:  1. have the same or higher page count 2. the same orientation as the file(s) being replaced.  This will not overwrite or in any way affect the existing template. Both the existing template and new template will be available for use after executing this endpoint. Also note that this will decrement your template quota.  Overlaying new files is asynchronous and a successful call to this endpoint will return 200 OK response if the request passes initial validation checks.  It is recommended that a callback be implemented to listen for the callback event. A &#x60;template_created&#x60; event will be sent when the files are updated or a &#x60;template_error&#x60; event will be sent if there was a problem while updating the files. If a callback handler has been configured and the event has not been received within 60 minutes of making the call, check the status of the request in the API dashboard and retry the request if necessary.  If the page orientation or page count is different from the original template document, we will notify you with a &#x60;template_error&#x60; [callback event](https://app.hellosign.com/api/eventsAndCallbacksWalkthrough).
        /// </summary>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The ID of the template whose files to update.</param>
        /// <param name="templateUpdateFilesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TemplateUpdateFilesResponse</returns>
        public HelloSign.Client.ApiResponse<TemplateUpdateFilesResponse> TemplateUpdateFilesWithHttpInfo(string templateId, TemplateUpdateFilesRequest templateUpdateFilesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new HelloSign.Client.ApiException(400, "Missing required parameter 'templateId' when calling TemplateApi->TemplateUpdateFiles");
            }

            // verify the required parameter 'templateUpdateFilesRequest' is set
            if (templateUpdateFilesRequest == null)
            {
                throw new HelloSign.Client.ApiException(400, "Missing required parameter 'templateUpdateFilesRequest' when calling TemplateApi->TemplateUpdateFiles");
            }

            HelloSign.Client.RequestOptions localVarRequestOptions = new HelloSign.Client.RequestOptions();

            var localVarContentType = "";
            var openApiTypes = templateUpdateFilesRequest.GetOpenApiTypes();
            if (ClientUtils.HasFileType(openApiTypes))
            {
                ClientUtils.SetFormData(localVarRequestOptions, openApiTypes);
                localVarContentType = "multipart/form-data";
            }
            else
            {
                localVarContentType = "application/json";
                localVarRequestOptions.Data = templateUpdateFilesRequest;
            }

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HelloSign.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", HelloSign.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            localVarRequestOptions.Operation = "TemplateApi.TemplateUpdateFiles";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + HelloSign.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (oauth2) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TemplateUpdateFilesResponse>("/template/update_files/{template_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TemplateUpdateFiles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Template Files Overlays a new file with the overlay of an existing template. The new file(s) must:  1. have the same or higher page count 2. the same orientation as the file(s) being replaced.  This will not overwrite or in any way affect the existing template. Both the existing template and new template will be available for use after executing this endpoint. Also note that this will decrement your template quota.  Overlaying new files is asynchronous and a successful call to this endpoint will return 200 OK response if the request passes initial validation checks.  It is recommended that a callback be implemented to listen for the callback event. A &#x60;template_created&#x60; event will be sent when the files are updated or a &#x60;template_error&#x60; event will be sent if there was a problem while updating the files. If a callback handler has been configured and the event has not been received within 60 minutes of making the call, check the status of the request in the API dashboard and retry the request if necessary.  If the page orientation or page count is different from the original template document, we will notify you with a &#x60;template_error&#x60; [callback event](https://app.hellosign.com/api/eventsAndCallbacksWalkthrough).
        /// </summary>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The ID of the template whose files to update.</param>
        /// <param name="templateUpdateFilesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TemplateUpdateFilesResponse</returns>
        public async System.Threading.Tasks.Task<TemplateUpdateFilesResponse> TemplateUpdateFilesAsync(string templateId, TemplateUpdateFilesRequest templateUpdateFilesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HelloSign.Client.ApiResponse<TemplateUpdateFilesResponse> localVarResponse = await TemplateUpdateFilesWithHttpInfoAsync(templateId, templateUpdateFilesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Template Files Overlays a new file with the overlay of an existing template. The new file(s) must:  1. have the same or higher page count 2. the same orientation as the file(s) being replaced.  This will not overwrite or in any way affect the existing template. Both the existing template and new template will be available for use after executing this endpoint. Also note that this will decrement your template quota.  Overlaying new files is asynchronous and a successful call to this endpoint will return 200 OK response if the request passes initial validation checks.  It is recommended that a callback be implemented to listen for the callback event. A &#x60;template_created&#x60; event will be sent when the files are updated or a &#x60;template_error&#x60; event will be sent if there was a problem while updating the files. If a callback handler has been configured and the event has not been received within 60 minutes of making the call, check the status of the request in the API dashboard and retry the request if necessary.  If the page orientation or page count is different from the original template document, we will notify you with a &#x60;template_error&#x60; [callback event](https://app.hellosign.com/api/eventsAndCallbacksWalkthrough).
        /// </summary>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The ID of the template whose files to update.</param>
        /// <param name="templateUpdateFilesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TemplateUpdateFilesResponse)</returns>
        public async System.Threading.Tasks.Task<HelloSign.Client.ApiResponse<TemplateUpdateFilesResponse>> TemplateUpdateFilesWithHttpInfoAsync(string templateId, TemplateUpdateFilesRequest templateUpdateFilesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new HelloSign.Client.ApiException(400, "Missing required parameter 'templateId' when calling TemplateApi->TemplateUpdateFiles");
            }

            // verify the required parameter 'templateUpdateFilesRequest' is set
            if (templateUpdateFilesRequest == null)
            {
                throw new HelloSign.Client.ApiException(400, "Missing required parameter 'templateUpdateFilesRequest' when calling TemplateApi->TemplateUpdateFiles");
            }


            HelloSign.Client.RequestOptions localVarRequestOptions = new HelloSign.Client.RequestOptions();

            var localVarContentType = "";
            var openApiTypes = templateUpdateFilesRequest.GetOpenApiTypes();
            if (ClientUtils.HasFileType(openApiTypes))
            {
                ClientUtils.SetFormData(localVarRequestOptions, openApiTypes);
                localVarContentType = "multipart/form-data";
            }
            else
            {
                localVarContentType = "application/json";
                localVarRequestOptions.Data = templateUpdateFilesRequest;
            }

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HelloSign.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", HelloSign.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            localVarRequestOptions.Operation = "TemplateApi.TemplateUpdateFiles";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + HelloSign.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (oauth2) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TemplateUpdateFilesResponse>("/template/update_files/{template_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TemplateUpdateFiles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
