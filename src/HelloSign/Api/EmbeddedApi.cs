/*
 * Dropbox Sign API
 *
 * Dropbox Sign v3 API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: apisupport@hellosign.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using HelloSign.Client;
using HelloSign.Model;

namespace HelloSign.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEmbeddedApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Embedded Template Edit URL
        /// </summary>
        /// <remarks>
        /// Retrieves an embedded object containing a template url that can be opened in an iFrame. Note that only templates created via the embedded template process are available to be edited with this endpoint.
        /// </remarks>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template to edit.</param>
        /// <param name="embeddedEditUrlRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EmbeddedEditUrlResponse</returns>
        EmbeddedEditUrlResponse EmbeddedEditUrl(string templateId, EmbeddedEditUrlRequest embeddedEditUrlRequest, int operationIndex = 0);

        /// <summary>
        /// Get Embedded Template Edit URL
        /// </summary>
        /// <remarks>
        /// Retrieves an embedded object containing a template url that can be opened in an iFrame. Note that only templates created via the embedded template process are available to be edited with this endpoint.
        /// </remarks>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template to edit.</param>
        /// <param name="embeddedEditUrlRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EmbeddedEditUrlResponse</returns>
        ApiResponse<EmbeddedEditUrlResponse> EmbeddedEditUrlWithHttpInfo(string templateId, EmbeddedEditUrlRequest embeddedEditUrlRequest, int operationIndex = 0);
        /// <summary>
        /// Get Embedded Sign URL
        /// </summary>
        /// <remarks>
        /// Retrieves an embedded object containing a signature url that can be opened in an iFrame. Note that templates created via the embedded template process will only be accessible through the API.
        /// </remarks>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signatureId">The id of the signature to get a signature url for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EmbeddedSignUrlResponse</returns>
        EmbeddedSignUrlResponse EmbeddedSignUrl(string signatureId, int operationIndex = 0);

        /// <summary>
        /// Get Embedded Sign URL
        /// </summary>
        /// <remarks>
        /// Retrieves an embedded object containing a signature url that can be opened in an iFrame. Note that templates created via the embedded template process will only be accessible through the API.
        /// </remarks>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signatureId">The id of the signature to get a signature url for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EmbeddedSignUrlResponse</returns>
        ApiResponse<EmbeddedSignUrlResponse> EmbeddedSignUrlWithHttpInfo(string signatureId, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEmbeddedApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Embedded Template Edit URL
        /// </summary>
        /// <remarks>
        /// Retrieves an embedded object containing a template url that can be opened in an iFrame. Note that only templates created via the embedded template process are available to be edited with this endpoint.
        /// </remarks>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template to edit.</param>
        /// <param name="embeddedEditUrlRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmbeddedEditUrlResponse</returns>
        System.Threading.Tasks.Task<EmbeddedEditUrlResponse> EmbeddedEditUrlAsync(string templateId, EmbeddedEditUrlRequest embeddedEditUrlRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Embedded Template Edit URL
        /// </summary>
        /// <remarks>
        /// Retrieves an embedded object containing a template url that can be opened in an iFrame. Note that only templates created via the embedded template process are available to be edited with this endpoint.
        /// </remarks>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template to edit.</param>
        /// <param name="embeddedEditUrlRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmbeddedEditUrlResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmbeddedEditUrlResponse>> EmbeddedEditUrlWithHttpInfoAsync(string templateId, EmbeddedEditUrlRequest embeddedEditUrlRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Embedded Sign URL
        /// </summary>
        /// <remarks>
        /// Retrieves an embedded object containing a signature url that can be opened in an iFrame. Note that templates created via the embedded template process will only be accessible through the API.
        /// </remarks>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signatureId">The id of the signature to get a signature url for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmbeddedSignUrlResponse</returns>
        System.Threading.Tasks.Task<EmbeddedSignUrlResponse> EmbeddedSignUrlAsync(string signatureId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Embedded Sign URL
        /// </summary>
        /// <remarks>
        /// Retrieves an embedded object containing a signature url that can be opened in an iFrame. Note that templates created via the embedded template process will only be accessible through the API.
        /// </remarks>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signatureId">The id of the signature to get a signature url for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmbeddedSignUrlResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmbeddedSignUrlResponse>> EmbeddedSignUrlWithHttpInfoAsync(string signatureId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEmbeddedApi : IEmbeddedApiSync, IEmbeddedApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EmbeddedApi : IEmbeddedApi
    {
        private HelloSign.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EmbeddedApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EmbeddedApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmbeddedApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EmbeddedApi(string basePath)
        {
            this.Configuration = HelloSign.Client.Configuration.MergeConfigurations(
                HelloSign.Client.GlobalConfiguration.Instance,
                new HelloSign.Client.Configuration { BasePath = basePath }
            );
            this.Client = new HelloSign.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HelloSign.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = HelloSign.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmbeddedApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EmbeddedApi(HelloSign.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = HelloSign.Client.Configuration.MergeConfigurations(
                HelloSign.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new HelloSign.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HelloSign.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = HelloSign.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmbeddedApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public EmbeddedApi(HelloSign.Client.ISynchronousClient client, HelloSign.Client.IAsynchronousClient asyncClient, HelloSign.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = HelloSign.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public HelloSign.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public HelloSign.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public HelloSign.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public HelloSign.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Embedded Template Edit URL Retrieves an embedded object containing a template url that can be opened in an iFrame. Note that only templates created via the embedded template process are available to be edited with this endpoint.
        /// </summary>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template to edit.</param>
        /// <param name="embeddedEditUrlRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EmbeddedEditUrlResponse</returns>
        public EmbeddedEditUrlResponse EmbeddedEditUrl(string templateId, EmbeddedEditUrlRequest embeddedEditUrlRequest, int operationIndex = 0)
        {
            HelloSign.Client.ApiResponse<EmbeddedEditUrlResponse> localVarResponse = EmbeddedEditUrlWithHttpInfo(templateId, embeddedEditUrlRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Embedded Template Edit URL Retrieves an embedded object containing a template url that can be opened in an iFrame. Note that only templates created via the embedded template process are available to be edited with this endpoint.
        /// </summary>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template to edit.</param>
        /// <param name="embeddedEditUrlRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EmbeddedEditUrlResponse</returns>
        public HelloSign.Client.ApiResponse<EmbeddedEditUrlResponse> EmbeddedEditUrlWithHttpInfo(string templateId, EmbeddedEditUrlRequest embeddedEditUrlRequest, int operationIndex = 0)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new HelloSign.Client.ApiException(400, "Missing required parameter 'templateId' when calling EmbeddedApi->EmbeddedEditUrl");
            }

            // verify the required parameter 'embeddedEditUrlRequest' is set
            if (embeddedEditUrlRequest == null)
            {
                throw new HelloSign.Client.ApiException(400, "Missing required parameter 'embeddedEditUrlRequest' when calling EmbeddedApi->EmbeddedEditUrl");
            }

            HelloSign.Client.RequestOptions localVarRequestOptions = new HelloSign.Client.RequestOptions();

            var localVarContentType = "";
            var openApiTypes = embeddedEditUrlRequest.GetOpenApiTypes();
            if (ClientUtils.HasFileType(openApiTypes))
            {
                ClientUtils.SetFormData(localVarRequestOptions, openApiTypes);
                localVarContentType = "multipart/form-data";
            }
            else
            {
                localVarContentType = "application/json";
                localVarRequestOptions.Data = embeddedEditUrlRequest;
            }

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HelloSign.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", HelloSign.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            localVarRequestOptions.Operation = "EmbeddedApi.EmbeddedEditUrl";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + HelloSign.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (oauth2) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EmbeddedEditUrlResponse>("/embedded/edit_url/{template_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EmbeddedEditUrl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Embedded Template Edit URL Retrieves an embedded object containing a template url that can be opened in an iFrame. Note that only templates created via the embedded template process are available to be edited with this endpoint.
        /// </summary>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template to edit.</param>
        /// <param name="embeddedEditUrlRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmbeddedEditUrlResponse</returns>
        public async System.Threading.Tasks.Task<EmbeddedEditUrlResponse> EmbeddedEditUrlAsync(string templateId, EmbeddedEditUrlRequest embeddedEditUrlRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HelloSign.Client.ApiResponse<EmbeddedEditUrlResponse> localVarResponse = await EmbeddedEditUrlWithHttpInfoAsync(templateId, embeddedEditUrlRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Embedded Template Edit URL Retrieves an embedded object containing a template url that can be opened in an iFrame. Note that only templates created via the embedded template process are available to be edited with this endpoint.
        /// </summary>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The id of the template to edit.</param>
        /// <param name="embeddedEditUrlRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmbeddedEditUrlResponse)</returns>
        public async System.Threading.Tasks.Task<HelloSign.Client.ApiResponse<EmbeddedEditUrlResponse>> EmbeddedEditUrlWithHttpInfoAsync(string templateId, EmbeddedEditUrlRequest embeddedEditUrlRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new HelloSign.Client.ApiException(400, "Missing required parameter 'templateId' when calling EmbeddedApi->EmbeddedEditUrl");
            }

            // verify the required parameter 'embeddedEditUrlRequest' is set
            if (embeddedEditUrlRequest == null)
            {
                throw new HelloSign.Client.ApiException(400, "Missing required parameter 'embeddedEditUrlRequest' when calling EmbeddedApi->EmbeddedEditUrl");
            }


            HelloSign.Client.RequestOptions localVarRequestOptions = new HelloSign.Client.RequestOptions();

            var localVarContentType = "";
            var openApiTypes = embeddedEditUrlRequest.GetOpenApiTypes();
            if (ClientUtils.HasFileType(openApiTypes))
            {
                ClientUtils.SetFormData(localVarRequestOptions, openApiTypes);
                localVarContentType = "multipart/form-data";
            }
            else
            {
                localVarContentType = "application/json";
                localVarRequestOptions.Data = embeddedEditUrlRequest;
            }

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HelloSign.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", HelloSign.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            localVarRequestOptions.Operation = "EmbeddedApi.EmbeddedEditUrl";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + HelloSign.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (oauth2) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EmbeddedEditUrlResponse>("/embedded/edit_url/{template_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EmbeddedEditUrl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Embedded Sign URL Retrieves an embedded object containing a signature url that can be opened in an iFrame. Note that templates created via the embedded template process will only be accessible through the API.
        /// </summary>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signatureId">The id of the signature to get a signature url for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EmbeddedSignUrlResponse</returns>
        public EmbeddedSignUrlResponse EmbeddedSignUrl(string signatureId, int operationIndex = 0)
        {
            HelloSign.Client.ApiResponse<EmbeddedSignUrlResponse> localVarResponse = EmbeddedSignUrlWithHttpInfo(signatureId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Embedded Sign URL Retrieves an embedded object containing a signature url that can be opened in an iFrame. Note that templates created via the embedded template process will only be accessible through the API.
        /// </summary>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signatureId">The id of the signature to get a signature url for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EmbeddedSignUrlResponse</returns>
        public HelloSign.Client.ApiResponse<EmbeddedSignUrlResponse> EmbeddedSignUrlWithHttpInfo(string signatureId, int operationIndex = 0)
        {
            // verify the required parameter 'signatureId' is set
            if (signatureId == null)
            {
                throw new HelloSign.Client.ApiException(400, "Missing required parameter 'signatureId' when calling EmbeddedApi->EmbeddedSignUrl");
            }

            HelloSign.Client.RequestOptions localVarRequestOptions = new HelloSign.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };
            var localVarContentType = HelloSign.Client.ClientUtils.SelectHeaderContentType(_contentTypes);

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HelloSign.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("signature_id", HelloSign.Client.ClientUtils.ParameterToString(signatureId)); // path parameter
            localVarRequestOptions.Operation = "EmbeddedApi.EmbeddedSignUrl";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + HelloSign.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (oauth2) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EmbeddedSignUrlResponse>("/embedded/sign_url/{signature_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EmbeddedSignUrl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Embedded Sign URL Retrieves an embedded object containing a signature url that can be opened in an iFrame. Note that templates created via the embedded template process will only be accessible through the API.
        /// </summary>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signatureId">The id of the signature to get a signature url for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmbeddedSignUrlResponse</returns>
        public async System.Threading.Tasks.Task<EmbeddedSignUrlResponse> EmbeddedSignUrlAsync(string signatureId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HelloSign.Client.ApiResponse<EmbeddedSignUrlResponse> localVarResponse = await EmbeddedSignUrlWithHttpInfoAsync(signatureId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Embedded Sign URL Retrieves an embedded object containing a signature url that can be opened in an iFrame. Note that templates created via the embedded template process will only be accessible through the API.
        /// </summary>
        /// <exception cref="HelloSign.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signatureId">The id of the signature to get a signature url for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmbeddedSignUrlResponse)</returns>
        public async System.Threading.Tasks.Task<HelloSign.Client.ApiResponse<EmbeddedSignUrlResponse>> EmbeddedSignUrlWithHttpInfoAsync(string signatureId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'signatureId' is set
            if (signatureId == null)
            {
                throw new HelloSign.Client.ApiException(400, "Missing required parameter 'signatureId' when calling EmbeddedApi->EmbeddedSignUrl");
            }


            HelloSign.Client.RequestOptions localVarRequestOptions = new HelloSign.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            var localVarContentType = HelloSign.Client.ClientUtils.SelectHeaderContentType(_contentTypes);

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HelloSign.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("signature_id", HelloSign.Client.ClientUtils.ParameterToString(signatureId)); // path parameter
            localVarRequestOptions.Operation = "EmbeddedApi.EmbeddedSignUrl";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + HelloSign.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (oauth2) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EmbeddedSignUrlResponse>("/embedded/sign_url/{signature_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EmbeddedSignUrl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
