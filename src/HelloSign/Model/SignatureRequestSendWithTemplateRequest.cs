/*
 * Dropbox Sign API
 *
 * Dropbox Sign v3 API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: apisupport@hellosign.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HelloSign.Client.OpenAPIDateConverter;

namespace HelloSign.Model
{
    /// <summary>
    /// SignatureRequestSendWithTemplateRequest
    /// </summary>
    [DataContract(Name = "SignatureRequestSendWithTemplateRequest")]
    [JsonObject(ItemNullValueHandling = NullValueHandling.Ignore)]
    public partial class SignatureRequestSendWithTemplateRequest : IOpenApiTyped, IEquatable<SignatureRequestSendWithTemplateRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SignatureRequestSendWithTemplateRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SignatureRequestSendWithTemplateRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SignatureRequestSendWithTemplateRequest" /> class.
        /// </summary>
        /// <param name="templateIds">Use &#x60;template_ids&#x60; to create a SignatureRequest from one or more templates, in the order in which the template will be used. (required).</param>
        /// <param name="allowDecline">Allows signers to decline to sign a document if &#x60;true&#x60;. Defaults to &#x60;false&#x60;. (default to false).</param>
        /// <param name="ccs">Add CC email recipients. Required when a CC role exists for the Template..</param>
        /// <param name="clientId">Client id of the app to associate with the signature request. Used to apply the branding and callback url defined for the app..</param>
        /// <param name="customFields">An array defining values and options for custom fields. Required when a custom field exists in the Template..</param>
        /// <param name="file">Use &#x60;file[]&#x60; to indicate the uploaded file(s) to send for signature.  This endpoint requires either **file** or **file_url[]**, but not both..</param>
        /// <param name="fileUrl">Use &#x60;file_url[]&#x60; to have Dropbox Sign download the file(s) to send for signature.  This endpoint requires either **file** or **file_url[]**, but not both..</param>
        /// <param name="isQualifiedSignature">Send with a value of &#x60;true&#x60; if you wish to enable [Qualified Electronic Signatures](https://www.hellosign.com/features/qualified-electronic-signatures) (QES), which requires a face-to-face call to verify the signer&#39;s identity.&lt;br&gt; **Note**: QES is only available on the Premium API plan as an add-on purchase. Cannot be used in &#x60;test_mode&#x60;. Only works on requests with one signer. (default to false).</param>
        /// <param name="message">The custom message in the email that will be sent to the signers..</param>
        /// <param name="metadata">Key-value data that should be attached to the signature request. This metadata is included in all API responses and events involving the signature request. For example, use the metadata field to store a signer&#39;s order number for look up when receiving events for the signature request.  Each request can include up to 10 metadata keys (or 50 nested metadata keys), with key names up to 40 characters long and values up to 1000 characters long..</param>
        /// <param name="signers">Add Signers to your Templated-based Signature Request. (required).</param>
        /// <param name="signingOptions">signingOptions.</param>
        /// <param name="signingRedirectUrl">The URL you want signers redirected to after they successfully sign..</param>
        /// <param name="subject">The subject in the email that will be sent to the signers..</param>
        /// <param name="testMode">Whether this is a test, the signature request will not be legally binding if set to &#x60;true&#x60;. Defaults to &#x60;false&#x60;. (default to false).</param>
        /// <param name="title">The title you want to assign to the SignatureRequest..</param>
        public SignatureRequestSendWithTemplateRequest(List<string> templateIds = default(List<string>), bool allowDecline = false, List<SubCC> ccs = default(List<SubCC>), string clientId = default(string), List<SubCustomField> customFields = default(List<SubCustomField>), List<System.IO.Stream> file = default(List<System.IO.Stream>), List<string> fileUrl = default(List<string>), bool isQualifiedSignature = false, string message = default(string), Dictionary<string, Object> metadata = default(Dictionary<string, Object>), List<SubSignatureRequestTemplateSigner> signers = default(List<SubSignatureRequestTemplateSigner>), SubSigningOptions signingOptions = default(SubSigningOptions), string signingRedirectUrl = default(string), string subject = default(string), bool testMode = false, string title = default(string))
        {
            
            // to ensure "templateIds" is required (not null)
            if (templateIds == null)
            {
                throw new ArgumentNullException("templateIds is a required property for SignatureRequestSendWithTemplateRequest and cannot be null");
            }
            this.TemplateIds = templateIds;
            // to ensure "signers" is required (not null)
            if (signers == null)
            {
                throw new ArgumentNullException("signers is a required property for SignatureRequestSendWithTemplateRequest and cannot be null");
            }
            this.Signers = signers;
            this.AllowDecline = allowDecline;
            this.Ccs = ccs;
            this.ClientId = clientId;
            this.CustomFields = customFields;
            this.File = file;
            this.FileUrl = fileUrl;
            this.IsQualifiedSignature = isQualifiedSignature;
            this.Message = message;
            this.Metadata = metadata;
            this.SigningOptions = signingOptions;
            this.SigningRedirectUrl = signingRedirectUrl;
            this.Subject = subject;
            this.TestMode = testMode;
            this.Title = title;
        }

        /// <summary>
        /// Use &#x60;template_ids&#x60; to create a SignatureRequest from one or more templates, in the order in which the template will be used.
        /// </summary>
        /// <value>Use &#x60;template_ids&#x60; to create a SignatureRequest from one or more templates, in the order in which the template will be used.</value>
        [DataMember(Name = "template_ids", IsRequired = true, EmitDefaultValue = true)]
        public List<string> TemplateIds { get; set; }

        /// <summary>
        /// Add Signers to your Templated-based Signature Request.
        /// </summary>
        /// <value>Add Signers to your Templated-based Signature Request.</value>
        [DataMember(Name = "signers", IsRequired = true, EmitDefaultValue = true)]
        public List<SubSignatureRequestTemplateSigner> Signers { get; set; }

        /// <summary>
        /// Allows signers to decline to sign a document if &#x60;true&#x60;. Defaults to &#x60;false&#x60;.
        /// </summary>
        /// <value>Allows signers to decline to sign a document if &#x60;true&#x60;. Defaults to &#x60;false&#x60;.</value>
        [DataMember(Name = "allow_decline", EmitDefaultValue = true)]
        public bool AllowDecline { get; set; }

        /// <summary>
        /// Add CC email recipients. Required when a CC role exists for the Template.
        /// </summary>
        /// <value>Add CC email recipients. Required when a CC role exists for the Template.</value>
        [DataMember(Name = "ccs", EmitDefaultValue = true)]
        public List<SubCC> Ccs { get; set; }

        /// <summary>
        /// Client id of the app to associate with the signature request. Used to apply the branding and callback url defined for the app.
        /// </summary>
        /// <value>Client id of the app to associate with the signature request. Used to apply the branding and callback url defined for the app.</value>
        [DataMember(Name = "client_id", EmitDefaultValue = true)]
        public string ClientId { get; set; }

        /// <summary>
        /// An array defining values and options for custom fields. Required when a custom field exists in the Template.
        /// </summary>
        /// <value>An array defining values and options for custom fields. Required when a custom field exists in the Template.</value>
        [DataMember(Name = "custom_fields", EmitDefaultValue = true)]
        public List<SubCustomField> CustomFields { get; set; }

        /// <summary>
        /// Use &#x60;file[]&#x60; to indicate the uploaded file(s) to send for signature.  This endpoint requires either **file** or **file_url[]**, but not both.
        /// </summary>
        /// <value>Use &#x60;file[]&#x60; to indicate the uploaded file(s) to send for signature.  This endpoint requires either **file** or **file_url[]**, but not both.</value>
        [DataMember(Name = "file", EmitDefaultValue = true)]
        public List<System.IO.Stream> File { get; set; }

        /// <summary>
        /// Use &#x60;file_url[]&#x60; to have Dropbox Sign download the file(s) to send for signature.  This endpoint requires either **file** or **file_url[]**, but not both.
        /// </summary>
        /// <value>Use &#x60;file_url[]&#x60; to have Dropbox Sign download the file(s) to send for signature.  This endpoint requires either **file** or **file_url[]**, but not both.</value>
        [DataMember(Name = "file_url", EmitDefaultValue = true)]
        public List<string> FileUrl { get; set; }

        /// <summary>
        /// Send with a value of &#x60;true&#x60; if you wish to enable [Qualified Electronic Signatures](https://www.hellosign.com/features/qualified-electronic-signatures) (QES), which requires a face-to-face call to verify the signer&#39;s identity.&lt;br&gt; **Note**: QES is only available on the Premium API plan as an add-on purchase. Cannot be used in &#x60;test_mode&#x60;. Only works on requests with one signer.
        /// </summary>
        /// <value>Send with a value of &#x60;true&#x60; if you wish to enable [Qualified Electronic Signatures](https://www.hellosign.com/features/qualified-electronic-signatures) (QES), which requires a face-to-face call to verify the signer&#39;s identity.&lt;br&gt; **Note**: QES is only available on the Premium API plan as an add-on purchase. Cannot be used in &#x60;test_mode&#x60;. Only works on requests with one signer.</value>
        [DataMember(Name = "is_qualified_signature", EmitDefaultValue = true)]
        public bool IsQualifiedSignature { get; set; }

        /// <summary>
        /// The custom message in the email that will be sent to the signers.
        /// </summary>
        /// <value>The custom message in the email that will be sent to the signers.</value>
        [DataMember(Name = "message", EmitDefaultValue = true)]
        public string Message { get; set; }

        /// <summary>
        /// Key-value data that should be attached to the signature request. This metadata is included in all API responses and events involving the signature request. For example, use the metadata field to store a signer&#39;s order number for look up when receiving events for the signature request.  Each request can include up to 10 metadata keys (or 50 nested metadata keys), with key names up to 40 characters long and values up to 1000 characters long.
        /// </summary>
        /// <value>Key-value data that should be attached to the signature request. This metadata is included in all API responses and events involving the signature request. For example, use the metadata field to store a signer&#39;s order number for look up when receiving events for the signature request.  Each request can include up to 10 metadata keys (or 50 nested metadata keys), with key names up to 40 characters long and values up to 1000 characters long.</value>
        [DataMember(Name = "metadata", EmitDefaultValue = true)]
        public Dictionary<string, Object> Metadata { get; set; }

        /// <summary>
        /// Gets or Sets SigningOptions
        /// </summary>
        [DataMember(Name = "signing_options", EmitDefaultValue = true)]
        public SubSigningOptions SigningOptions { get; set; }

        /// <summary>
        /// The URL you want signers redirected to after they successfully sign.
        /// </summary>
        /// <value>The URL you want signers redirected to after they successfully sign.</value>
        [DataMember(Name = "signing_redirect_url", EmitDefaultValue = true)]
        public string SigningRedirectUrl { get; set; }

        /// <summary>
        /// The subject in the email that will be sent to the signers.
        /// </summary>
        /// <value>The subject in the email that will be sent to the signers.</value>
        [DataMember(Name = "subject", EmitDefaultValue = true)]
        public string Subject { get; set; }

        /// <summary>
        /// Whether this is a test, the signature request will not be legally binding if set to &#x60;true&#x60;. Defaults to &#x60;false&#x60;.
        /// </summary>
        /// <value>Whether this is a test, the signature request will not be legally binding if set to &#x60;true&#x60;. Defaults to &#x60;false&#x60;.</value>
        [DataMember(Name = "test_mode", EmitDefaultValue = true)]
        public bool TestMode { get; set; }

        /// <summary>
        /// The title you want to assign to the SignatureRequest.
        /// </summary>
        /// <value>The title you want to assign to the SignatureRequest.</value>
        [DataMember(Name = "title", EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SignatureRequestSendWithTemplateRequest {\n");
            sb.Append("  TemplateIds: ").Append(TemplateIds).Append("\n");
            sb.Append("  Signers: ").Append(Signers).Append("\n");
            sb.Append("  AllowDecline: ").Append(AllowDecline).Append("\n");
            sb.Append("  Ccs: ").Append(Ccs).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  File: ").Append(File).Append("\n");
            sb.Append("  FileUrl: ").Append(FileUrl).Append("\n");
            sb.Append("  IsQualifiedSignature: ").Append(IsQualifiedSignature).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  SigningOptions: ").Append(SigningOptions).Append("\n");
            sb.Append("  SigningRedirectUrl: ").Append(SigningRedirectUrl).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  TestMode: ").Append(TestMode).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SignatureRequestSendWithTemplateRequest);
        }

        /// <summary>
        /// Returns true if SignatureRequestSendWithTemplateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SignatureRequestSendWithTemplateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SignatureRequestSendWithTemplateRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TemplateIds == input.TemplateIds ||
                    this.TemplateIds != null &&
                    input.TemplateIds != null &&
                    this.TemplateIds.SequenceEqual(input.TemplateIds)
                ) && 
                (
                    this.Signers == input.Signers ||
                    this.Signers != null &&
                    input.Signers != null &&
                    this.Signers.SequenceEqual(input.Signers)
                ) && 
                (
                    this.AllowDecline == input.AllowDecline ||
                    this.AllowDecline.Equals(input.AllowDecline)
                ) && 
                (
                    this.Ccs == input.Ccs ||
                    this.Ccs != null &&
                    input.Ccs != null &&
                    this.Ccs.SequenceEqual(input.Ccs)
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.CustomFields == input.CustomFields ||
                    this.CustomFields != null &&
                    input.CustomFields != null &&
                    this.CustomFields.SequenceEqual(input.CustomFields)
                ) && 
                (
                    this.File == input.File ||
                    this.File != null &&
                    input.File != null &&
                    this.File.SequenceEqual(input.File)
                ) && 
                (
                    this.FileUrl == input.FileUrl ||
                    this.FileUrl != null &&
                    input.FileUrl != null &&
                    this.FileUrl.SequenceEqual(input.FileUrl)
                ) && 
                (
                    this.IsQualifiedSignature == input.IsQualifiedSignature ||
                    this.IsQualifiedSignature.Equals(input.IsQualifiedSignature)
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    input.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                ) && 
                (
                    this.SigningOptions == input.SigningOptions ||
                    (this.SigningOptions != null &&
                    this.SigningOptions.Equals(input.SigningOptions))
                ) && 
                (
                    this.SigningRedirectUrl == input.SigningRedirectUrl ||
                    (this.SigningRedirectUrl != null &&
                    this.SigningRedirectUrl.Equals(input.SigningRedirectUrl))
                ) && 
                (
                    this.Subject == input.Subject ||
                    (this.Subject != null &&
                    this.Subject.Equals(input.Subject))
                ) && 
                (
                    this.TestMode == input.TestMode ||
                    this.TestMode.Equals(input.TestMode)
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TemplateIds != null)
                {
                    hashCode = (hashCode * 59) + this.TemplateIds.GetHashCode();
                }
                if (this.Signers != null)
                {
                    hashCode = (hashCode * 59) + this.Signers.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AllowDecline.GetHashCode();
                if (this.Ccs != null)
                {
                    hashCode = (hashCode * 59) + this.Ccs.GetHashCode();
                }
                if (this.ClientId != null)
                {
                    hashCode = (hashCode * 59) + this.ClientId.GetHashCode();
                }
                if (this.CustomFields != null)
                {
                    hashCode = (hashCode * 59) + this.CustomFields.GetHashCode();
                }
                if (this.File != null)
                {
                    hashCode = (hashCode * 59) + this.File.GetHashCode();
                }
                if (this.FileUrl != null)
                {
                    hashCode = (hashCode * 59) + this.FileUrl.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsQualifiedSignature.GetHashCode();
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                if (this.Metadata != null)
                {
                    hashCode = (hashCode * 59) + this.Metadata.GetHashCode();
                }
                if (this.SigningOptions != null)
                {
                    hashCode = (hashCode * 59) + this.SigningOptions.GetHashCode();
                }
                if (this.SigningRedirectUrl != null)
                {
                    hashCode = (hashCode * 59) + this.SigningRedirectUrl.GetHashCode();
                }
                if (this.Subject != null)
                {
                    hashCode = (hashCode * 59) + this.Subject.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TestMode.GetHashCode();
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                return hashCode;
            }
        }

        public List<OpenApiType> GetOpenApiTypes()
        {
            var types = new List<OpenApiType>();
            types.Add(new OpenApiType(){
                Name = "template_ids",
                Property = "TemplateIds",
                Type = "List<string>",
                Value = TemplateIds,
            });
            types.Add(new OpenApiType(){
                Name = "signers",
                Property = "Signers",
                Type = "List<SubSignatureRequestTemplateSigner>",
                Value = Signers,
            });
            types.Add(new OpenApiType(){
                Name = "allow_decline",
                Property = "AllowDecline",
                Type = "bool",
                Value = AllowDecline,
            });
            types.Add(new OpenApiType(){
                Name = "ccs",
                Property = "Ccs",
                Type = "List<SubCC>",
                Value = Ccs,
            });
            types.Add(new OpenApiType(){
                Name = "client_id",
                Property = "ClientId",
                Type = "string",
                Value = ClientId,
            });
            types.Add(new OpenApiType(){
                Name = "custom_fields",
                Property = "CustomFields",
                Type = "List<SubCustomField>",
                Value = CustomFields,
            });
            types.Add(new OpenApiType(){
                Name = "file",
                Property = "File",
                Type = "List<System.IO.Stream>",
                Value = File,
            });
            types.Add(new OpenApiType(){
                Name = "file_url",
                Property = "FileUrl",
                Type = "List<string>",
                Value = FileUrl,
            });
            types.Add(new OpenApiType(){
                Name = "is_qualified_signature",
                Property = "IsQualifiedSignature",
                Type = "bool",
                Value = IsQualifiedSignature,
            });
            types.Add(new OpenApiType(){
                Name = "message",
                Property = "Message",
                Type = "string",
                Value = Message,
            });
            types.Add(new OpenApiType(){
                Name = "metadata",
                Property = "Metadata",
                Type = "Dictionary<string, Object>",
                Value = Metadata,
            });
            types.Add(new OpenApiType(){
                Name = "signing_options",
                Property = "SigningOptions",
                Type = "SubSigningOptions",
                Value = SigningOptions,
            });
            types.Add(new OpenApiType(){
                Name = "signing_redirect_url",
                Property = "SigningRedirectUrl",
                Type = "string",
                Value = SigningRedirectUrl,
            });
            types.Add(new OpenApiType(){
                Name = "subject",
                Property = "Subject",
                Type = "string",
                Value = Subject,
            });
            types.Add(new OpenApiType(){
                Name = "test_mode",
                Property = "TestMode",
                Type = "bool",
                Value = TestMode,
            });
            types.Add(new OpenApiType(){
                Name = "title",
                Property = "Title",
                Type = "string",
                Value = Title,
            });

            return types;
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Message (string) maxLength
            if (this.Message != null && this.Message.Length > 5000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Message, length must be less than 5000.", new [] { "Message" });
            }

            // Subject (string) maxLength
            if (this.Subject != null && this.Subject.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Subject, length must be less than 255.", new [] { "Subject" });
            }

            // Title (string) maxLength
            if (this.Title != null && this.Title.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Title, length must be less than 255.", new [] { "Title" });
            }

            yield break;
        }
    }

}
