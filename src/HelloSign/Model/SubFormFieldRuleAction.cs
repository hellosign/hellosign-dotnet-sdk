/*
 * HelloSign API
 *
 * HelloSign v3 API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: apisupport@hellosign.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HelloSign.Client.OpenAPIDateConverter;

namespace HelloSign.Model
{
    /// <summary>
    /// SubFormFieldRuleAction
    /// </summary>
    [DataContract(Name = "SubFormFieldRuleAction")]
    [JsonObject(ItemNullValueHandling = NullValueHandling.Ignore)]
    public partial class SubFormFieldRuleAction : IOpenApiTyped, IEquatable<SubFormFieldRuleAction>, IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum FieldVisibility for value: change-field-visibility
            /// </summary>
            [EnumMember(Value = "change-field-visibility")]
            FieldVisibility = 1,

            /// <summary>
            /// Enum GroupVisibility for value: change-group-visibility
            /// </summary>
            [EnumMember(Value = "change-group-visibility")]
            GroupVisibility = 2

        }


        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubFormFieldRuleAction" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SubFormFieldRuleAction() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubFormFieldRuleAction" /> class.
        /// </summary>
        /// <param name="fieldId">**field_id** or **group_id** is required, but not both.  Must reference the &#x60;api_id&#x60; of an existing field defined within &#x60;form_fields_per_document&#x60;.  Cannot use with &#x60;group_id&#x60;. Trigger and action fields must belong to the same signer..</param>
        /// <param name="groupId">**group_id** or **field_id** is required, but not both.  Must reference the ID of an existing group defined within &#x60;form_field_groups&#x60;.  Cannot use with &#x60;field_id&#x60;. Trigger and action fields and groups must belong to the same signer..</param>
        /// <param name="hidden">&#x60;true&#x60; to hide the target field when rule is satisfied, otherwise &#x60;false&#x60;. (required).</param>
        /// <param name="type">type (required).</param>
        public SubFormFieldRuleAction(string fieldId = default(string), string groupId = default(string), bool hidden = default(bool), TypeEnum type = default(TypeEnum))
        {
            
            this.Hidden = hidden;
            this.Type = type;
            this.FieldId = fieldId;
            this.GroupId = groupId;
        }

        /// <summary>
        /// &#x60;true&#x60; to hide the target field when rule is satisfied, otherwise &#x60;false&#x60;.
        /// </summary>
        /// <value>&#x60;true&#x60; to hide the target field when rule is satisfied, otherwise &#x60;false&#x60;.</value>
        [DataMember(Name = "hidden", IsRequired = true, EmitDefaultValue = true)]
        public bool Hidden { get; set; }

        /// <summary>
        /// **field_id** or **group_id** is required, but not both.  Must reference the &#x60;api_id&#x60; of an existing field defined within &#x60;form_fields_per_document&#x60;.  Cannot use with &#x60;group_id&#x60;. Trigger and action fields must belong to the same signer.
        /// </summary>
        /// <value>**field_id** or **group_id** is required, but not both.  Must reference the &#x60;api_id&#x60; of an existing field defined within &#x60;form_fields_per_document&#x60;.  Cannot use with &#x60;group_id&#x60;. Trigger and action fields must belong to the same signer.</value>
        [DataMember(Name = "field_id", EmitDefaultValue = true)]
        public string FieldId { get; set; }

        /// <summary>
        /// **group_id** or **field_id** is required, but not both.  Must reference the ID of an existing group defined within &#x60;form_field_groups&#x60;.  Cannot use with &#x60;field_id&#x60;. Trigger and action fields and groups must belong to the same signer.
        /// </summary>
        /// <value>**group_id** or **field_id** is required, but not both.  Must reference the ID of an existing group defined within &#x60;form_field_groups&#x60;.  Cannot use with &#x60;field_id&#x60;. Trigger and action fields and groups must belong to the same signer.</value>
        [DataMember(Name = "group_id", EmitDefaultValue = true)]
        public string GroupId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SubFormFieldRuleAction {\n");
            sb.Append("  Hidden: ").Append(Hidden).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  FieldId: ").Append(FieldId).Append("\n");
            sb.Append("  GroupId: ").Append(GroupId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubFormFieldRuleAction);
        }

        /// <summary>
        /// Returns true if SubFormFieldRuleAction instances are equal
        /// </summary>
        /// <param name="input">Instance of SubFormFieldRuleAction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubFormFieldRuleAction input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Hidden == input.Hidden ||
                    this.Hidden.Equals(input.Hidden)
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.FieldId == input.FieldId ||
                    (this.FieldId != null &&
                    this.FieldId.Equals(input.FieldId))
                ) && 
                (
                    this.GroupId == input.GroupId ||
                    (this.GroupId != null &&
                    this.GroupId.Equals(input.GroupId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Hidden.GetHashCode();
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.FieldId != null)
                {
                    hashCode = (hashCode * 59) + this.FieldId.GetHashCode();
                }
                if (this.GroupId != null)
                {
                    hashCode = (hashCode * 59) + this.GroupId.GetHashCode();
                }
                return hashCode;
            }
        }

        public List<OpenApiType> GetOpenApiTypes()
        {
            var types = new List<OpenApiType>();
            types.Add(new OpenApiType(){
                Name = "hidden",
                Property = "Hidden",
                Type = "bool",
                Value = Hidden,
            });
            types.Add(new OpenApiType(){
                Name = "type",
                Property = "Type",
                Type = "string",
                Value = Type,
            });
            types.Add(new OpenApiType(){
                Name = "field_id",
                Property = "FieldId",
                Type = "string",
                Value = FieldId,
            });
            types.Add(new OpenApiType(){
                Name = "group_id",
                Property = "GroupId",
                Type = "string",
                Value = GroupId,
            });

            return types;
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
