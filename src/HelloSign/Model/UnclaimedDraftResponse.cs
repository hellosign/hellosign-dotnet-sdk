/*
 * HelloSign API
 *
 * HelloSign v3 API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: apisupport@hellosign.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HelloSign.Client.OpenAPIDateConverter;

namespace HelloSign.Model
{
    /// <summary>
    /// A group of documents that a user can take ownership of via the claim URL.
    /// </summary>
    [DataContract(Name = "UnclaimedDraftResponse")]
    [JsonObject(ItemNullValueHandling = NullValueHandling.Ignore)]
    public partial class UnclaimedDraftResponse : IOpenApiTyped, IEquatable<UnclaimedDraftResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UnclaimedDraftResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UnclaimedDraftResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UnclaimedDraftResponse" /> class.
        /// </summary>
        /// <param name="signatureRequestId">The ID of the signature request that is represented by this UnclaimedDraft..</param>
        /// <param name="claimUrl">The URL to be used to claim this UnclaimedDraft..</param>
        /// <param name="signingRedirectUrl">The URL you want signers redirected to after they successfully sign..</param>
        /// <param name="requestingRedirectUrl">The URL you want signers redirected to after they successfully request a signature (Will only be returned in the response if it is applicable to the request.)..</param>
        /// <param name="expiresAt">When the link expires..</param>
        /// <param name="testMode">Whether this is a test draft. Signature requests made from test drafts have no legal value..</param>
        public UnclaimedDraftResponse(string signatureRequestId = default(string), string claimUrl = default(string), string signingRedirectUrl = default(string), string requestingRedirectUrl = default(string), int? expiresAt = default(int?), bool testMode = default(bool))
        {
            
            this.SignatureRequestId = signatureRequestId;
            this.ClaimUrl = claimUrl;
            this.SigningRedirectUrl = signingRedirectUrl;
            this.RequestingRedirectUrl = requestingRedirectUrl;
            this.ExpiresAt = expiresAt;
            this.TestMode = testMode;
        }

        /// <summary>
        /// The ID of the signature request that is represented by this UnclaimedDraft.
        /// </summary>
        /// <value>The ID of the signature request that is represented by this UnclaimedDraft.</value>
        [DataMember(Name = "signature_request_id", EmitDefaultValue = true)]
        public string SignatureRequestId { get; set; }

        /// <summary>
        /// The URL to be used to claim this UnclaimedDraft.
        /// </summary>
        /// <value>The URL to be used to claim this UnclaimedDraft.</value>
        [DataMember(Name = "claim_url", EmitDefaultValue = true)]
        public string ClaimUrl { get; set; }

        /// <summary>
        /// The URL you want signers redirected to after they successfully sign.
        /// </summary>
        /// <value>The URL you want signers redirected to after they successfully sign.</value>
        [DataMember(Name = "signing_redirect_url", EmitDefaultValue = true)]
        public string SigningRedirectUrl { get; set; }

        /// <summary>
        /// The URL you want signers redirected to after they successfully request a signature (Will only be returned in the response if it is applicable to the request.).
        /// </summary>
        /// <value>The URL you want signers redirected to after they successfully request a signature (Will only be returned in the response if it is applicable to the request.).</value>
        [DataMember(Name = "requesting_redirect_url", EmitDefaultValue = true)]
        public string RequestingRedirectUrl { get; set; }

        /// <summary>
        /// When the link expires.
        /// </summary>
        /// <value>When the link expires.</value>
        [DataMember(Name = "expires_at", EmitDefaultValue = true)]
        public int? ExpiresAt { get; set; }

        /// <summary>
        /// Whether this is a test draft. Signature requests made from test drafts have no legal value.
        /// </summary>
        /// <value>Whether this is a test draft. Signature requests made from test drafts have no legal value.</value>
        [DataMember(Name = "test_mode", EmitDefaultValue = true)]
        public bool TestMode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UnclaimedDraftResponse {\n");
            sb.Append("  SignatureRequestId: ").Append(SignatureRequestId).Append("\n");
            sb.Append("  ClaimUrl: ").Append(ClaimUrl).Append("\n");
            sb.Append("  SigningRedirectUrl: ").Append(SigningRedirectUrl).Append("\n");
            sb.Append("  RequestingRedirectUrl: ").Append(RequestingRedirectUrl).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("  TestMode: ").Append(TestMode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UnclaimedDraftResponse);
        }

        /// <summary>
        /// Returns true if UnclaimedDraftResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of UnclaimedDraftResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UnclaimedDraftResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SignatureRequestId == input.SignatureRequestId ||
                    (this.SignatureRequestId != null &&
                    this.SignatureRequestId.Equals(input.SignatureRequestId))
                ) && 
                (
                    this.ClaimUrl == input.ClaimUrl ||
                    (this.ClaimUrl != null &&
                    this.ClaimUrl.Equals(input.ClaimUrl))
                ) && 
                (
                    this.SigningRedirectUrl == input.SigningRedirectUrl ||
                    (this.SigningRedirectUrl != null &&
                    this.SigningRedirectUrl.Equals(input.SigningRedirectUrl))
                ) && 
                (
                    this.RequestingRedirectUrl == input.RequestingRedirectUrl ||
                    (this.RequestingRedirectUrl != null &&
                    this.RequestingRedirectUrl.Equals(input.RequestingRedirectUrl))
                ) && 
                (
                    this.ExpiresAt == input.ExpiresAt ||
                    (this.ExpiresAt != null &&
                    this.ExpiresAt.Equals(input.ExpiresAt))
                ) && 
                (
                    this.TestMode == input.TestMode ||
                    this.TestMode.Equals(input.TestMode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SignatureRequestId != null)
                {
                    hashCode = (hashCode * 59) + this.SignatureRequestId.GetHashCode();
                }
                if (this.ClaimUrl != null)
                {
                    hashCode = (hashCode * 59) + this.ClaimUrl.GetHashCode();
                }
                if (this.SigningRedirectUrl != null)
                {
                    hashCode = (hashCode * 59) + this.SigningRedirectUrl.GetHashCode();
                }
                if (this.RequestingRedirectUrl != null)
                {
                    hashCode = (hashCode * 59) + this.RequestingRedirectUrl.GetHashCode();
                }
                if (this.ExpiresAt != null)
                {
                    hashCode = (hashCode * 59) + this.ExpiresAt.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TestMode.GetHashCode();
                return hashCode;
            }
        }

        public List<OpenApiType> GetOpenApiTypes()
        {
            var types = new List<OpenApiType>();
            types.Add(new OpenApiType(){
                Name = "signature_request_id",
                Property = "SignatureRequestId",
                Type = "string",
                Value = SignatureRequestId,
            });
            types.Add(new OpenApiType(){
                Name = "claim_url",
                Property = "ClaimUrl",
                Type = "string",
                Value = ClaimUrl,
            });
            types.Add(new OpenApiType(){
                Name = "signing_redirect_url",
                Property = "SigningRedirectUrl",
                Type = "string",
                Value = SigningRedirectUrl,
            });
            types.Add(new OpenApiType(){
                Name = "requesting_redirect_url",
                Property = "RequestingRedirectUrl",
                Type = "string",
                Value = RequestingRedirectUrl,
            });
            types.Add(new OpenApiType(){
                Name = "expires_at",
                Property = "ExpiresAt",
                Type = "int?",
                Value = ExpiresAt,
            });
            types.Add(new OpenApiType(){
                Name = "test_mode",
                Property = "TestMode",
                Type = "bool",
                Value = TestMode,
            });

            return types;
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
