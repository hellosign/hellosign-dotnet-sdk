/*
 * HelloSign API
 *
 * HelloSign v3 API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: apisupport@hellosign.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HelloSign.Client.OpenAPIDateConverter;

namespace HelloSign.Model
{
    /// <summary>
    /// EmbeddedEditUrlRequest
    /// </summary>
    [DataContract(Name = "EmbeddedEditUrlRequest")]
    [JsonObject(ItemNullValueHandling = NullValueHandling.Ignore)]
    public partial class EmbeddedEditUrlRequest : IOpenApiTyped, IEquatable<EmbeddedEditUrlRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmbeddedEditUrlRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EmbeddedEditUrlRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EmbeddedEditUrlRequest" /> class.
        /// </summary>
        /// <param name="allowEditCcs">This allows the requester to enable/disable to add or change CC roles when editing the template. (default to false).</param>
        /// <param name="ccRoles">The CC roles that must be assigned when using the template to send a signature request. To remove all CC roles, pass in a single role with no name. For use in a POST request..</param>
        /// <param name="editorOptions">editorOptions.</param>
        /// <param name="forceSignerRoles">Provide users the ability to review/edit the template signer roles. (default to false).</param>
        /// <param name="forceSubjectMessage">Provide users the ability to review/edit the template subject and message. (default to false).</param>
        /// <param name="mergeFields">Add additional merge fields to the template, which can be used used to pre-fill data by passing values into signature requests made with that template.      Remove all merge fields on the template by passing an empty array &#x60;[]&#x60;..</param>
        /// <param name="previewOnly">This allows the requester to enable the preview experience (i.e. does not allow the requester&#39;s end user to add any additional fields via the editor).  **Note**: This parameter overwrites &#x60;show_preview&#x3D;true&#x60; (if set). (default to false).</param>
        /// <param name="showPreview">This allows the requester to enable the editor/preview experience. (default to false).</param>
        /// <param name="showProgressStepper">When only one step remains in the signature request process and this parameter is set to &#x60;false&#x60; then the progress stepper will be hidden. (default to true).</param>
        /// <param name="testMode">Whether this is a test, locked templates will only be available for editing if this is set to &#x60;true&#x60;. Defaults to &#x60;false&#x60;. (default to false).</param>
        public EmbeddedEditUrlRequest(bool allowEditCcs = false, List<string> ccRoles = default(List<string>), SubEditorOptions editorOptions = default(SubEditorOptions), bool forceSignerRoles = false, bool forceSubjectMessage = false, List<SubMergeField> mergeFields = default(List<SubMergeField>), bool previewOnly = false, bool showPreview = false, bool showProgressStepper = true, bool testMode = false)
        {
            
            this.AllowEditCcs = allowEditCcs;
            this.CcRoles = ccRoles;
            this.EditorOptions = editorOptions;
            this.ForceSignerRoles = forceSignerRoles;
            this.ForceSubjectMessage = forceSubjectMessage;
            this.MergeFields = mergeFields;
            this.PreviewOnly = previewOnly;
            this.ShowPreview = showPreview;
            this.ShowProgressStepper = showProgressStepper;
            this.TestMode = testMode;
        }

        /// <summary>
        /// This allows the requester to enable/disable to add or change CC roles when editing the template.
        /// </summary>
        /// <value>This allows the requester to enable/disable to add or change CC roles when editing the template.</value>
        [DataMember(Name = "allow_edit_ccs", EmitDefaultValue = true)]
        public bool AllowEditCcs { get; set; }

        /// <summary>
        /// The CC roles that must be assigned when using the template to send a signature request. To remove all CC roles, pass in a single role with no name. For use in a POST request.
        /// </summary>
        /// <value>The CC roles that must be assigned when using the template to send a signature request. To remove all CC roles, pass in a single role with no name. For use in a POST request.</value>
        [DataMember(Name = "cc_roles", EmitDefaultValue = true)]
        public List<string> CcRoles { get; set; }

        /// <summary>
        /// Gets or Sets EditorOptions
        /// </summary>
        [DataMember(Name = "editor_options", EmitDefaultValue = true)]
        public SubEditorOptions EditorOptions { get; set; }

        /// <summary>
        /// Provide users the ability to review/edit the template signer roles.
        /// </summary>
        /// <value>Provide users the ability to review/edit the template signer roles.</value>
        [DataMember(Name = "force_signer_roles", EmitDefaultValue = true)]
        public bool ForceSignerRoles { get; set; }

        /// <summary>
        /// Provide users the ability to review/edit the template subject and message.
        /// </summary>
        /// <value>Provide users the ability to review/edit the template subject and message.</value>
        [DataMember(Name = "force_subject_message", EmitDefaultValue = true)]
        public bool ForceSubjectMessage { get; set; }

        /// <summary>
        /// Add additional merge fields to the template, which can be used used to pre-fill data by passing values into signature requests made with that template.      Remove all merge fields on the template by passing an empty array &#x60;[]&#x60;.
        /// </summary>
        /// <value>Add additional merge fields to the template, which can be used used to pre-fill data by passing values into signature requests made with that template.      Remove all merge fields on the template by passing an empty array &#x60;[]&#x60;.</value>
        [DataMember(Name = "merge_fields", EmitDefaultValue = true)]
        public List<SubMergeField> MergeFields { get; set; }

        /// <summary>
        /// This allows the requester to enable the preview experience (i.e. does not allow the requester&#39;s end user to add any additional fields via the editor).  **Note**: This parameter overwrites &#x60;show_preview&#x3D;true&#x60; (if set).
        /// </summary>
        /// <value>This allows the requester to enable the preview experience (i.e. does not allow the requester&#39;s end user to add any additional fields via the editor).  **Note**: This parameter overwrites &#x60;show_preview&#x3D;true&#x60; (if set).</value>
        [DataMember(Name = "preview_only", EmitDefaultValue = true)]
        public bool PreviewOnly { get; set; }

        /// <summary>
        /// This allows the requester to enable the editor/preview experience.
        /// </summary>
        /// <value>This allows the requester to enable the editor/preview experience.</value>
        [DataMember(Name = "show_preview", EmitDefaultValue = true)]
        public bool ShowPreview { get; set; }

        /// <summary>
        /// When only one step remains in the signature request process and this parameter is set to &#x60;false&#x60; then the progress stepper will be hidden.
        /// </summary>
        /// <value>When only one step remains in the signature request process and this parameter is set to &#x60;false&#x60; then the progress stepper will be hidden.</value>
        [DataMember(Name = "show_progress_stepper", EmitDefaultValue = true)]
        public bool ShowProgressStepper { get; set; }

        /// <summary>
        /// Whether this is a test, locked templates will only be available for editing if this is set to &#x60;true&#x60;. Defaults to &#x60;false&#x60;.
        /// </summary>
        /// <value>Whether this is a test, locked templates will only be available for editing if this is set to &#x60;true&#x60;. Defaults to &#x60;false&#x60;.</value>
        [DataMember(Name = "test_mode", EmitDefaultValue = true)]
        public bool TestMode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmbeddedEditUrlRequest {\n");
            sb.Append("  AllowEditCcs: ").Append(AllowEditCcs).Append("\n");
            sb.Append("  CcRoles: ").Append(CcRoles).Append("\n");
            sb.Append("  EditorOptions: ").Append(EditorOptions).Append("\n");
            sb.Append("  ForceSignerRoles: ").Append(ForceSignerRoles).Append("\n");
            sb.Append("  ForceSubjectMessage: ").Append(ForceSubjectMessage).Append("\n");
            sb.Append("  MergeFields: ").Append(MergeFields).Append("\n");
            sb.Append("  PreviewOnly: ").Append(PreviewOnly).Append("\n");
            sb.Append("  ShowPreview: ").Append(ShowPreview).Append("\n");
            sb.Append("  ShowProgressStepper: ").Append(ShowProgressStepper).Append("\n");
            sb.Append("  TestMode: ").Append(TestMode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmbeddedEditUrlRequest);
        }

        /// <summary>
        /// Returns true if EmbeddedEditUrlRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of EmbeddedEditUrlRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmbeddedEditUrlRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AllowEditCcs == input.AllowEditCcs ||
                    this.AllowEditCcs.Equals(input.AllowEditCcs)
                ) && 
                (
                    this.CcRoles == input.CcRoles ||
                    this.CcRoles != null &&
                    input.CcRoles != null &&
                    this.CcRoles.SequenceEqual(input.CcRoles)
                ) && 
                (
                    this.EditorOptions == input.EditorOptions ||
                    (this.EditorOptions != null &&
                    this.EditorOptions.Equals(input.EditorOptions))
                ) && 
                (
                    this.ForceSignerRoles == input.ForceSignerRoles ||
                    this.ForceSignerRoles.Equals(input.ForceSignerRoles)
                ) && 
                (
                    this.ForceSubjectMessage == input.ForceSubjectMessage ||
                    this.ForceSubjectMessage.Equals(input.ForceSubjectMessage)
                ) && 
                (
                    this.MergeFields == input.MergeFields ||
                    this.MergeFields != null &&
                    input.MergeFields != null &&
                    this.MergeFields.SequenceEqual(input.MergeFields)
                ) && 
                (
                    this.PreviewOnly == input.PreviewOnly ||
                    this.PreviewOnly.Equals(input.PreviewOnly)
                ) && 
                (
                    this.ShowPreview == input.ShowPreview ||
                    this.ShowPreview.Equals(input.ShowPreview)
                ) && 
                (
                    this.ShowProgressStepper == input.ShowProgressStepper ||
                    this.ShowProgressStepper.Equals(input.ShowProgressStepper)
                ) && 
                (
                    this.TestMode == input.TestMode ||
                    this.TestMode.Equals(input.TestMode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.AllowEditCcs.GetHashCode();
                if (this.CcRoles != null)
                {
                    hashCode = (hashCode * 59) + this.CcRoles.GetHashCode();
                }
                if (this.EditorOptions != null)
                {
                    hashCode = (hashCode * 59) + this.EditorOptions.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ForceSignerRoles.GetHashCode();
                hashCode = (hashCode * 59) + this.ForceSubjectMessage.GetHashCode();
                if (this.MergeFields != null)
                {
                    hashCode = (hashCode * 59) + this.MergeFields.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PreviewOnly.GetHashCode();
                hashCode = (hashCode * 59) + this.ShowPreview.GetHashCode();
                hashCode = (hashCode * 59) + this.ShowProgressStepper.GetHashCode();
                hashCode = (hashCode * 59) + this.TestMode.GetHashCode();
                return hashCode;
            }
        }

        public List<OpenApiType> GetOpenApiTypes()
        {
            var types = new List<OpenApiType>();
            types.Add(new OpenApiType(){
                Name = "allow_edit_ccs",
                Property = "AllowEditCcs",
                Type = "bool",
                Value = AllowEditCcs,
            });
            types.Add(new OpenApiType(){
                Name = "cc_roles",
                Property = "CcRoles",
                Type = "List<string>",
                Value = CcRoles,
            });
            types.Add(new OpenApiType(){
                Name = "editor_options",
                Property = "EditorOptions",
                Type = "SubEditorOptions",
                Value = EditorOptions,
            });
            types.Add(new OpenApiType(){
                Name = "force_signer_roles",
                Property = "ForceSignerRoles",
                Type = "bool",
                Value = ForceSignerRoles,
            });
            types.Add(new OpenApiType(){
                Name = "force_subject_message",
                Property = "ForceSubjectMessage",
                Type = "bool",
                Value = ForceSubjectMessage,
            });
            types.Add(new OpenApiType(){
                Name = "merge_fields",
                Property = "MergeFields",
                Type = "List<SubMergeField>",
                Value = MergeFields,
            });
            types.Add(new OpenApiType(){
                Name = "preview_only",
                Property = "PreviewOnly",
                Type = "bool",
                Value = PreviewOnly,
            });
            types.Add(new OpenApiType(){
                Name = "show_preview",
                Property = "ShowPreview",
                Type = "bool",
                Value = ShowPreview,
            });
            types.Add(new OpenApiType(){
                Name = "show_progress_stepper",
                Property = "ShowProgressStepper",
                Type = "bool",
                Value = ShowProgressStepper,
            });
            types.Add(new OpenApiType(){
                Name = "test_mode",
                Property = "TestMode",
                Type = "bool",
                Value = TestMode,
            });

            return types;
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
