/*
 * Dropbox Sign API
 *
 * Dropbox Sign v3 API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: apisupport@hellosign.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HelloSign.Client.OpenAPIDateConverter;

namespace HelloSign.Model
{
    /// <summary>
    /// SubSignatureRequestTemplateSigner
    /// </summary>
    [DataContract(Name = "SubSignatureRequestTemplateSigner")]
    [JsonObject(ItemNullValueHandling = NullValueHandling.Ignore)]
    public partial class SubSignatureRequestTemplateSigner : IOpenApiTyped, IEquatable<SubSignatureRequestTemplateSigner>, IValidatableObject
    {
        /// <summary>
        /// Specifies the feature used with the &#x60;sms_phone_number&#x60;. Default &#x60;authentication&#x60;.  If &#x60;authentication&#x60;, signer is sent a verification code via SMS that is required to access the document.  If &#x60;delivery&#x60;, a link to complete the signature request is delivered via SMS (_and_ email).
        /// </summary>
        /// <value>Specifies the feature used with the &#x60;sms_phone_number&#x60;. Default &#x60;authentication&#x60;.  If &#x60;authentication&#x60;, signer is sent a verification code via SMS that is required to access the document.  If &#x60;delivery&#x60;, a link to complete the signature request is delivered via SMS (_and_ email).</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SmsPhoneNumberTypeEnum
        {
            /// <summary>
            /// Enum Authentication for value: authentication
            /// </summary>
            [EnumMember(Value = "authentication")]
            Authentication = 1,

            /// <summary>
            /// Enum Delivery for value: delivery
            /// </summary>
            [EnumMember(Value = "delivery")]
            Delivery = 2

        }


        /// <summary>
        /// Specifies the feature used with the &#x60;sms_phone_number&#x60;. Default &#x60;authentication&#x60;.  If &#x60;authentication&#x60;, signer is sent a verification code via SMS that is required to access the document.  If &#x60;delivery&#x60;, a link to complete the signature request is delivered via SMS (_and_ email).
        /// </summary>
        /// <value>Specifies the feature used with the &#x60;sms_phone_number&#x60;. Default &#x60;authentication&#x60;.  If &#x60;authentication&#x60;, signer is sent a verification code via SMS that is required to access the document.  If &#x60;delivery&#x60;, a link to complete the signature request is delivered via SMS (_and_ email).</value>
        [DataMember(Name = "sms_phone_number_type", EmitDefaultValue = true)]
        public SmsPhoneNumberTypeEnum? SmsPhoneNumberType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubSignatureRequestTemplateSigner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SubSignatureRequestTemplateSigner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubSignatureRequestTemplateSigner" /> class.
        /// </summary>
        /// <param name="role">Must match an existing role in chosen Template(s). It&#39;s case-sensitive. (required).</param>
        /// <param name="name">The name of the signer. (required).</param>
        /// <param name="emailAddress">The email address of the signer. (required).</param>
        /// <param name="pin">The 4- to 12-character access code that will secure this signer&#39;s signature page..</param>
        /// <param name="smsPhoneNumber">An E.164 formatted phone number.  **Note**: Not available in test mode and requires a Standard plan or higher..</param>
        /// <param name="smsPhoneNumberType">Specifies the feature used with the &#x60;sms_phone_number&#x60;. Default &#x60;authentication&#x60;.  If &#x60;authentication&#x60;, signer is sent a verification code via SMS that is required to access the document.  If &#x60;delivery&#x60;, a link to complete the signature request is delivered via SMS (_and_ email)..</param>
        public SubSignatureRequestTemplateSigner(string role = default(string), string name = default(string), string emailAddress = default(string), string pin = default(string), string smsPhoneNumber = default(string), SmsPhoneNumberTypeEnum? smsPhoneNumberType = default(SmsPhoneNumberTypeEnum?))
        {
            
            // to ensure "role" is required (not null)
            if (role == null)
            {
                throw new ArgumentNullException("role is a required property for SubSignatureRequestTemplateSigner and cannot be null");
            }
            this.Role = role;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for SubSignatureRequestTemplateSigner and cannot be null");
            }
            this.Name = name;
            // to ensure "emailAddress" is required (not null)
            if (emailAddress == null)
            {
                throw new ArgumentNullException("emailAddress is a required property for SubSignatureRequestTemplateSigner and cannot be null");
            }
            this.EmailAddress = emailAddress;
            this.Pin = pin;
            this.SmsPhoneNumber = smsPhoneNumber;
            this.SmsPhoneNumberType = smsPhoneNumberType;
        }

        /// <summary>
        /// Must match an existing role in chosen Template(s). It&#39;s case-sensitive.
        /// </summary>
        /// <value>Must match an existing role in chosen Template(s). It&#39;s case-sensitive.</value>
        [DataMember(Name = "role", IsRequired = true, EmitDefaultValue = true)]
        public string Role { get; set; }

        /// <summary>
        /// The name of the signer.
        /// </summary>
        /// <value>The name of the signer.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The email address of the signer.
        /// </summary>
        /// <value>The email address of the signer.</value>
        [DataMember(Name = "email_address", IsRequired = true, EmitDefaultValue = true)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// The 4- to 12-character access code that will secure this signer&#39;s signature page.
        /// </summary>
        /// <value>The 4- to 12-character access code that will secure this signer&#39;s signature page.</value>
        [DataMember(Name = "pin", EmitDefaultValue = true)]
        public string Pin { get; set; }

        /// <summary>
        /// An E.164 formatted phone number.  **Note**: Not available in test mode and requires a Standard plan or higher.
        /// </summary>
        /// <value>An E.164 formatted phone number.  **Note**: Not available in test mode and requires a Standard plan or higher.</value>
        [DataMember(Name = "sms_phone_number", EmitDefaultValue = true)]
        public string SmsPhoneNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SubSignatureRequestTemplateSigner {\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  Pin: ").Append(Pin).Append("\n");
            sb.Append("  SmsPhoneNumber: ").Append(SmsPhoneNumber).Append("\n");
            sb.Append("  SmsPhoneNumberType: ").Append(SmsPhoneNumberType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubSignatureRequestTemplateSigner);
        }

        /// <summary>
        /// Returns true if SubSignatureRequestTemplateSigner instances are equal
        /// </summary>
        /// <param name="input">Instance of SubSignatureRequestTemplateSigner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubSignatureRequestTemplateSigner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Role == input.Role ||
                    (this.Role != null &&
                    this.Role.Equals(input.Role))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.EmailAddress == input.EmailAddress ||
                    (this.EmailAddress != null &&
                    this.EmailAddress.Equals(input.EmailAddress))
                ) && 
                (
                    this.Pin == input.Pin ||
                    (this.Pin != null &&
                    this.Pin.Equals(input.Pin))
                ) && 
                (
                    this.SmsPhoneNumber == input.SmsPhoneNumber ||
                    (this.SmsPhoneNumber != null &&
                    this.SmsPhoneNumber.Equals(input.SmsPhoneNumber))
                ) && 
                (
                    this.SmsPhoneNumberType == input.SmsPhoneNumberType ||
                    this.SmsPhoneNumberType.Equals(input.SmsPhoneNumberType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Role != null)
                {
                    hashCode = (hashCode * 59) + this.Role.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.EmailAddress != null)
                {
                    hashCode = (hashCode * 59) + this.EmailAddress.GetHashCode();
                }
                if (this.Pin != null)
                {
                    hashCode = (hashCode * 59) + this.Pin.GetHashCode();
                }
                if (this.SmsPhoneNumber != null)
                {
                    hashCode = (hashCode * 59) + this.SmsPhoneNumber.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SmsPhoneNumberType.GetHashCode();
                return hashCode;
            }
        }

        public List<OpenApiType> GetOpenApiTypes()
        {
            var types = new List<OpenApiType>();
            types.Add(new OpenApiType(){
                Name = "role",
                Property = "Role",
                Type = "string",
                Value = Role,
            });
            types.Add(new OpenApiType(){
                Name = "name",
                Property = "Name",
                Type = "string",
                Value = Name,
            });
            types.Add(new OpenApiType(){
                Name = "email_address",
                Property = "EmailAddress",
                Type = "string",
                Value = EmailAddress,
            });
            types.Add(new OpenApiType(){
                Name = "pin",
                Property = "Pin",
                Type = "string",
                Value = Pin,
            });
            types.Add(new OpenApiType(){
                Name = "sms_phone_number",
                Property = "SmsPhoneNumber",
                Type = "string",
                Value = SmsPhoneNumber,
            });
            types.Add(new OpenApiType(){
                Name = "sms_phone_number_type",
                Property = "SmsPhoneNumberType",
                Type = "string",
                Value = SmsPhoneNumberType,
            });

            return types;
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Pin (string) maxLength
            if (this.Pin != null && this.Pin.Length > 12)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Pin, length must be less than 12.", new [] { "Pin" });
            }

            // Pin (string) minLength
            if (this.Pin != null && this.Pin.Length < 4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Pin, length must be greater than 4.", new [] { "Pin" });
            }

            yield break;
        }
    }

}
