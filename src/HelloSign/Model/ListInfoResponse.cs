/*
 * HelloSign API
 *
 * HelloSign v3 API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: apisupport@hellosign.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HelloSign.Client.OpenAPIDateConverter;

namespace HelloSign.Model
{
    /// <summary>
    /// Contains pagination information about the data returned.
    /// </summary>
    [DataContract(Name = "ListInfoResponse")]
    [JsonObject(ItemNullValueHandling = NullValueHandling.Ignore)]
    public partial class ListInfoResponse : IOpenApiTyped, IEquatable<ListInfoResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListInfoResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ListInfoResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ListInfoResponse" /> class.
        /// </summary>
        /// <param name="numPages">Total number of pages available..</param>
        /// <param name="numResults">Total number of objects available..</param>
        /// <param name="page">Number of the page being returned..</param>
        /// <param name="pageSize">Objects returned per page..</param>
        public ListInfoResponse(int numPages = default(int), int? numResults = default(int?), int page = default(int), int pageSize = default(int))
        {
            
            this.NumPages = numPages;
            this.NumResults = numResults;
            this.Page = page;
            this.PageSize = pageSize;
        }

        /// <summary>
        /// Total number of pages available.
        /// </summary>
        /// <value>Total number of pages available.</value>
        [DataMember(Name = "num_pages", EmitDefaultValue = true)]
        public int NumPages { get; set; }

        /// <summary>
        /// Total number of objects available.
        /// </summary>
        /// <value>Total number of objects available.</value>
        [DataMember(Name = "num_results", EmitDefaultValue = true)]
        public int? NumResults { get; set; }

        /// <summary>
        /// Number of the page being returned.
        /// </summary>
        /// <value>Number of the page being returned.</value>
        [DataMember(Name = "page", EmitDefaultValue = true)]
        public int Page { get; set; }

        /// <summary>
        /// Objects returned per page.
        /// </summary>
        /// <value>Objects returned per page.</value>
        [DataMember(Name = "page_size", EmitDefaultValue = true)]
        public int PageSize { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ListInfoResponse {\n");
            sb.Append("  NumPages: ").Append(NumPages).Append("\n");
            sb.Append("  NumResults: ").Append(NumResults).Append("\n");
            sb.Append("  Page: ").Append(Page).Append("\n");
            sb.Append("  PageSize: ").Append(PageSize).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListInfoResponse);
        }

        /// <summary>
        /// Returns true if ListInfoResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ListInfoResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListInfoResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.NumPages == input.NumPages ||
                    this.NumPages.Equals(input.NumPages)
                ) && 
                (
                    this.NumResults == input.NumResults ||
                    (this.NumResults != null &&
                    this.NumResults.Equals(input.NumResults))
                ) && 
                (
                    this.Page == input.Page ||
                    this.Page.Equals(input.Page)
                ) && 
                (
                    this.PageSize == input.PageSize ||
                    this.PageSize.Equals(input.PageSize)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.NumPages.GetHashCode();
                if (this.NumResults != null)
                {
                    hashCode = (hashCode * 59) + this.NumResults.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Page.GetHashCode();
                hashCode = (hashCode * 59) + this.PageSize.GetHashCode();
                return hashCode;
            }
        }

        public List<OpenApiType> GetOpenApiTypes()
        {
            var types = new List<OpenApiType>();
            types.Add(new OpenApiType(){
                Name = "num_pages",
                Property = "NumPages",
                Type = "int",
                Value = NumPages,
            });
            types.Add(new OpenApiType(){
                Name = "num_results",
                Property = "NumResults",
                Type = "int?",
                Value = NumResults,
            });
            types.Add(new OpenApiType(){
                Name = "page",
                Property = "Page",
                Type = "int",
                Value = Page,
            });
            types.Add(new OpenApiType(){
                Name = "page_size",
                Property = "PageSize",
                Type = "int",
                Value = PageSize,
            });

            return types;
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
