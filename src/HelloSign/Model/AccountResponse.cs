/*
 * HelloSign API
 *
 * HelloSign v3 API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: apisupport@hellosign.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HelloSign.Client.OpenAPIDateConverter;

namespace HelloSign.Model
{
    /// <summary>
    /// AccountResponse
    /// </summary>
    [DataContract(Name = "AccountResponse")]
    [JsonObject(ItemNullValueHandling = NullValueHandling.Ignore)]
    public partial class AccountResponse : IOpenApiTyped, IEquatable<AccountResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AccountResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountResponse" /> class.
        /// </summary>
        /// <param name="accountId">The ID of the Account.</param>
        /// <param name="emailAddress">The email address associated with the Account..</param>
        /// <param name="isLocked">Returns &#x60;true&#x60; if the user has been locked out of their account by a team admin..</param>
        /// <param name="isPaidHs">Returns &#x60;true&#x60; if the user has a paid HelloSign account..</param>
        /// <param name="isPaidHf">Returns &#x60;true&#x60; if the user has a paid HelloFax account..</param>
        /// <param name="quotas">quotas.</param>
        /// <param name="callbackUrl">The URL that HelloSign events will &#x60;POST&#x60; to..</param>
        /// <param name="roleCode">The membership role for the team..</param>
        /// <param name="teamId">_t__Account::TEAM_ID.</param>
        /// <param name="locale">The locale used in this Account. Check out the list of [supported locales](/api/reference/constants/#supported-locales) to learn more about the possible values..</param>
        public AccountResponse(string accountId = default(string), string emailAddress = default(string), bool isLocked = default(bool), bool isPaidHs = default(bool), bool isPaidHf = default(bool), AccountResponseQuotas quotas = default(AccountResponseQuotas), string callbackUrl = default(string), string roleCode = default(string), string teamId = default(string), string locale = default(string))
        {
            
            this.AccountId = accountId;
            this.EmailAddress = emailAddress;
            this.IsLocked = isLocked;
            this.IsPaidHs = isPaidHs;
            this.IsPaidHf = isPaidHf;
            this.Quotas = quotas;
            this.CallbackUrl = callbackUrl;
            this.RoleCode = roleCode;
            this.TeamId = teamId;
            this.Locale = locale;
        }

        /// <summary>
        /// The ID of the Account
        /// </summary>
        /// <value>The ID of the Account</value>
        [DataMember(Name = "account_id", EmitDefaultValue = true)]
        public string AccountId { get; set; }

        /// <summary>
        /// The email address associated with the Account.
        /// </summary>
        /// <value>The email address associated with the Account.</value>
        [DataMember(Name = "email_address", EmitDefaultValue = true)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Returns &#x60;true&#x60; if the user has been locked out of their account by a team admin.
        /// </summary>
        /// <value>Returns &#x60;true&#x60; if the user has been locked out of their account by a team admin.</value>
        [DataMember(Name = "is_locked", EmitDefaultValue = true)]
        public bool IsLocked { get; set; }

        /// <summary>
        /// Returns &#x60;true&#x60; if the user has a paid HelloSign account.
        /// </summary>
        /// <value>Returns &#x60;true&#x60; if the user has a paid HelloSign account.</value>
        [DataMember(Name = "is_paid_hs", EmitDefaultValue = true)]
        public bool IsPaidHs { get; set; }

        /// <summary>
        /// Returns &#x60;true&#x60; if the user has a paid HelloFax account.
        /// </summary>
        /// <value>Returns &#x60;true&#x60; if the user has a paid HelloFax account.</value>
        [DataMember(Name = "is_paid_hf", EmitDefaultValue = true)]
        public bool IsPaidHf { get; set; }

        /// <summary>
        /// Gets or Sets Quotas
        /// </summary>
        [DataMember(Name = "quotas", EmitDefaultValue = true)]
        public AccountResponseQuotas Quotas { get; set; }

        /// <summary>
        /// The URL that HelloSign events will &#x60;POST&#x60; to.
        /// </summary>
        /// <value>The URL that HelloSign events will &#x60;POST&#x60; to.</value>
        [DataMember(Name = "callback_url", EmitDefaultValue = true)]
        public string CallbackUrl { get; set; }

        /// <summary>
        /// The membership role for the team.
        /// </summary>
        /// <value>The membership role for the team.</value>
        [DataMember(Name = "role_code", EmitDefaultValue = true)]
        public string RoleCode { get; set; }

        /// <summary>
        /// _t__Account::TEAM_ID
        /// </summary>
        /// <value>_t__Account::TEAM_ID</value>
        [DataMember(Name = "team_id", EmitDefaultValue = true)]
        public string TeamId { get; set; }

        /// <summary>
        /// The locale used in this Account. Check out the list of [supported locales](/api/reference/constants/#supported-locales) to learn more about the possible values.
        /// </summary>
        /// <value>The locale used in this Account. Check out the list of [supported locales](/api/reference/constants/#supported-locales) to learn more about the possible values.</value>
        [DataMember(Name = "locale", EmitDefaultValue = true)]
        public string Locale { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AccountResponse {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  IsLocked: ").Append(IsLocked).Append("\n");
            sb.Append("  IsPaidHs: ").Append(IsPaidHs).Append("\n");
            sb.Append("  IsPaidHf: ").Append(IsPaidHf).Append("\n");
            sb.Append("  Quotas: ").Append(Quotas).Append("\n");
            sb.Append("  CallbackUrl: ").Append(CallbackUrl).Append("\n");
            sb.Append("  RoleCode: ").Append(RoleCode).Append("\n");
            sb.Append("  TeamId: ").Append(TeamId).Append("\n");
            sb.Append("  Locale: ").Append(Locale).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountResponse);
        }

        /// <summary>
        /// Returns true if AccountResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.EmailAddress == input.EmailAddress ||
                    (this.EmailAddress != null &&
                    this.EmailAddress.Equals(input.EmailAddress))
                ) && 
                (
                    this.IsLocked == input.IsLocked ||
                    this.IsLocked.Equals(input.IsLocked)
                ) && 
                (
                    this.IsPaidHs == input.IsPaidHs ||
                    this.IsPaidHs.Equals(input.IsPaidHs)
                ) && 
                (
                    this.IsPaidHf == input.IsPaidHf ||
                    this.IsPaidHf.Equals(input.IsPaidHf)
                ) && 
                (
                    this.Quotas == input.Quotas ||
                    (this.Quotas != null &&
                    this.Quotas.Equals(input.Quotas))
                ) && 
                (
                    this.CallbackUrl == input.CallbackUrl ||
                    (this.CallbackUrl != null &&
                    this.CallbackUrl.Equals(input.CallbackUrl))
                ) && 
                (
                    this.RoleCode == input.RoleCode ||
                    (this.RoleCode != null &&
                    this.RoleCode.Equals(input.RoleCode))
                ) && 
                (
                    this.TeamId == input.TeamId ||
                    (this.TeamId != null &&
                    this.TeamId.Equals(input.TeamId))
                ) && 
                (
                    this.Locale == input.Locale ||
                    (this.Locale != null &&
                    this.Locale.Equals(input.Locale))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountId != null)
                {
                    hashCode = (hashCode * 59) + this.AccountId.GetHashCode();
                }
                if (this.EmailAddress != null)
                {
                    hashCode = (hashCode * 59) + this.EmailAddress.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsLocked.GetHashCode();
                hashCode = (hashCode * 59) + this.IsPaidHs.GetHashCode();
                hashCode = (hashCode * 59) + this.IsPaidHf.GetHashCode();
                if (this.Quotas != null)
                {
                    hashCode = (hashCode * 59) + this.Quotas.GetHashCode();
                }
                if (this.CallbackUrl != null)
                {
                    hashCode = (hashCode * 59) + this.CallbackUrl.GetHashCode();
                }
                if (this.RoleCode != null)
                {
                    hashCode = (hashCode * 59) + this.RoleCode.GetHashCode();
                }
                if (this.TeamId != null)
                {
                    hashCode = (hashCode * 59) + this.TeamId.GetHashCode();
                }
                if (this.Locale != null)
                {
                    hashCode = (hashCode * 59) + this.Locale.GetHashCode();
                }
                return hashCode;
            }
        }

        public List<OpenApiType> GetOpenApiTypes()
        {
            var types = new List<OpenApiType>();
            types.Add(new OpenApiType(){
                Name = "account_id",
                Property = "AccountId",
                Type = "string",
                Value = AccountId,
            });
            types.Add(new OpenApiType(){
                Name = "email_address",
                Property = "EmailAddress",
                Type = "string",
                Value = EmailAddress,
            });
            types.Add(new OpenApiType(){
                Name = "is_locked",
                Property = "IsLocked",
                Type = "bool",
                Value = IsLocked,
            });
            types.Add(new OpenApiType(){
                Name = "is_paid_hs",
                Property = "IsPaidHs",
                Type = "bool",
                Value = IsPaidHs,
            });
            types.Add(new OpenApiType(){
                Name = "is_paid_hf",
                Property = "IsPaidHf",
                Type = "bool",
                Value = IsPaidHf,
            });
            types.Add(new OpenApiType(){
                Name = "quotas",
                Property = "Quotas",
                Type = "AccountResponseQuotas",
                Value = Quotas,
            });
            types.Add(new OpenApiType(){
                Name = "callback_url",
                Property = "CallbackUrl",
                Type = "string",
                Value = CallbackUrl,
            });
            types.Add(new OpenApiType(){
                Name = "role_code",
                Property = "RoleCode",
                Type = "string",
                Value = RoleCode,
            });
            types.Add(new OpenApiType(){
                Name = "team_id",
                Property = "TeamId",
                Type = "string",
                Value = TeamId,
            });
            types.Add(new OpenApiType(){
                Name = "locale",
                Property = "Locale",
                Type = "string",
                Value = Locale,
            });

            return types;
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
