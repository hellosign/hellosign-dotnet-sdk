/*
 * Dropbox Sign API
 *
 * Dropbox Sign v3 API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: apisupport@hellosign.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HelloSign.Client.OpenAPIDateConverter;

namespace HelloSign.Model
{
    /// <summary>
    /// ApiAppUpdateRequest
    /// </summary>
    [DataContract(Name = "ApiAppUpdateRequest")]
    [JsonObject(ItemNullValueHandling = NullValueHandling.Ignore)]
    public partial class ApiAppUpdateRequest : IOpenApiTyped, IEquatable<ApiAppUpdateRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiAppUpdateRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ApiAppUpdateRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiAppUpdateRequest" /> class.
        /// </summary>
        /// <param name="callbackUrl">The URL at which the API App should receive event callbacks..</param>
        /// <param name="customLogoFile">An image file to use as a custom logo in embedded contexts. (Only applies to some API plans).</param>
        /// <param name="domains">The domain names the ApiApp will be associated with..</param>
        /// <param name="name">The name you want to assign to the ApiApp..</param>
        /// <param name="oauth">oauth.</param>
        /// <param name="options">options.</param>
        /// <param name="whiteLabelingOptions">whiteLabelingOptions.</param>
        public ApiAppUpdateRequest(string callbackUrl = default(string), System.IO.Stream customLogoFile = default(System.IO.Stream), List<string> domains = default(List<string>), string name = default(string), SubOAuth oauth = default(SubOAuth), SubOptions options = default(SubOptions), SubWhiteLabelingOptions whiteLabelingOptions = default(SubWhiteLabelingOptions))
        {
            
            this.CallbackUrl = callbackUrl;
            this.CustomLogoFile = customLogoFile;
            this.Domains = domains;
            this.Name = name;
            this.Oauth = oauth;
            this.Options = options;
            this.WhiteLabelingOptions = whiteLabelingOptions;
        }

        /// <summary>
        /// The URL at which the API App should receive event callbacks.
        /// </summary>
        /// <value>The URL at which the API App should receive event callbacks.</value>
        [DataMember(Name = "callback_url", EmitDefaultValue = true)]
        public string CallbackUrl { get; set; }

        /// <summary>
        /// An image file to use as a custom logo in embedded contexts. (Only applies to some API plans)
        /// </summary>
        /// <value>An image file to use as a custom logo in embedded contexts. (Only applies to some API plans)</value>
        [DataMember(Name = "custom_logo_file", EmitDefaultValue = true)]
        public System.IO.Stream CustomLogoFile { get; set; }

        /// <summary>
        /// The domain names the ApiApp will be associated with.
        /// </summary>
        /// <value>The domain names the ApiApp will be associated with.</value>
        [DataMember(Name = "domains", EmitDefaultValue = true)]
        public List<string> Domains { get; set; }

        /// <summary>
        /// The name you want to assign to the ApiApp.
        /// </summary>
        /// <value>The name you want to assign to the ApiApp.</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Oauth
        /// </summary>
        [DataMember(Name = "oauth", EmitDefaultValue = true)]
        public SubOAuth Oauth { get; set; }

        /// <summary>
        /// Gets or Sets Options
        /// </summary>
        [DataMember(Name = "options", EmitDefaultValue = true)]
        public SubOptions Options { get; set; }

        /// <summary>
        /// Gets or Sets WhiteLabelingOptions
        /// </summary>
        [DataMember(Name = "white_labeling_options", EmitDefaultValue = true)]
        public SubWhiteLabelingOptions WhiteLabelingOptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApiAppUpdateRequest {\n");
            sb.Append("  CallbackUrl: ").Append(CallbackUrl).Append("\n");
            sb.Append("  CustomLogoFile: ").Append(CustomLogoFile).Append("\n");
            sb.Append("  Domains: ").Append(Domains).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Oauth: ").Append(Oauth).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  WhiteLabelingOptions: ").Append(WhiteLabelingOptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApiAppUpdateRequest);
        }

        /// <summary>
        /// Returns true if ApiAppUpdateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ApiAppUpdateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApiAppUpdateRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CallbackUrl == input.CallbackUrl ||
                    (this.CallbackUrl != null &&
                    this.CallbackUrl.Equals(input.CallbackUrl))
                ) && 
                (
                    this.CustomLogoFile == input.CustomLogoFile ||
                    (this.CustomLogoFile != null &&
                    this.CustomLogoFile.Equals(input.CustomLogoFile))
                ) && 
                (
                    this.Domains == input.Domains ||
                    this.Domains != null &&
                    input.Domains != null &&
                    this.Domains.SequenceEqual(input.Domains)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Oauth == input.Oauth ||
                    (this.Oauth != null &&
                    this.Oauth.Equals(input.Oauth))
                ) && 
                (
                    this.Options == input.Options ||
                    (this.Options != null &&
                    this.Options.Equals(input.Options))
                ) && 
                (
                    this.WhiteLabelingOptions == input.WhiteLabelingOptions ||
                    (this.WhiteLabelingOptions != null &&
                    this.WhiteLabelingOptions.Equals(input.WhiteLabelingOptions))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CallbackUrl != null)
                {
                    hashCode = (hashCode * 59) + this.CallbackUrl.GetHashCode();
                }
                if (this.CustomLogoFile != null)
                {
                    hashCode = (hashCode * 59) + this.CustomLogoFile.GetHashCode();
                }
                if (this.Domains != null)
                {
                    hashCode = (hashCode * 59) + this.Domains.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Oauth != null)
                {
                    hashCode = (hashCode * 59) + this.Oauth.GetHashCode();
                }
                if (this.Options != null)
                {
                    hashCode = (hashCode * 59) + this.Options.GetHashCode();
                }
                if (this.WhiteLabelingOptions != null)
                {
                    hashCode = (hashCode * 59) + this.WhiteLabelingOptions.GetHashCode();
                }
                return hashCode;
            }
        }

        public List<OpenApiType> GetOpenApiTypes()
        {
            var types = new List<OpenApiType>();
            types.Add(new OpenApiType(){
                Name = "callback_url",
                Property = "CallbackUrl",
                Type = "string",
                Value = CallbackUrl,
            });
            types.Add(new OpenApiType(){
                Name = "custom_logo_file",
                Property = "CustomLogoFile",
                Type = "System.IO.Stream",
                Value = CustomLogoFile,
            });
            types.Add(new OpenApiType(){
                Name = "domains",
                Property = "Domains",
                Type = "List<string>",
                Value = Domains,
            });
            types.Add(new OpenApiType(){
                Name = "name",
                Property = "Name",
                Type = "string",
                Value = Name,
            });
            types.Add(new OpenApiType(){
                Name = "oauth",
                Property = "Oauth",
                Type = "SubOAuth",
                Value = Oauth,
            });
            types.Add(new OpenApiType(){
                Name = "options",
                Property = "Options",
                Type = "SubOptions",
                Value = Options,
            });
            types.Add(new OpenApiType(){
                Name = "white_labeling_options",
                Property = "WhiteLabelingOptions",
                Type = "SubWhiteLabelingOptions",
                Value = WhiteLabelingOptions,
            });

            return types;
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
