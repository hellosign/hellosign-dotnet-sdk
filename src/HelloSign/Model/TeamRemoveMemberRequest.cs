/*
 * Dropbox Sign API
 *
 * Dropbox Sign v3 API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: apisupport@hellosign.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HelloSign.Client.OpenAPIDateConverter;

namespace HelloSign.Model
{
    /// <summary>
    /// TeamRemoveMemberRequest
    /// </summary>
    [DataContract(Name = "TeamRemoveMemberRequest")]
    [JsonObject(ItemNullValueHandling = NullValueHandling.Ignore)]
    public partial class TeamRemoveMemberRequest : IOpenApiTyped, IEquatable<TeamRemoveMemberRequest>, IValidatableObject
    {
        /// <summary>
        /// A new role member will take in a new Team.  **Note**: This parameter is used only if &#x60;new_team_id&#x60; is provided.
        /// </summary>
        /// <value>A new role member will take in a new Team.  **Note**: This parameter is used only if &#x60;new_team_id&#x60; is provided.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum NewRoleEnum
        {
            /// <summary>
            /// Enum Member for value: Member
            /// </summary>
            [EnumMember(Value = "Member")]
            Member = 1,

            /// <summary>
            /// Enum Developer for value: Developer
            /// </summary>
            [EnumMember(Value = "Developer")]
            Developer = 2,

            /// <summary>
            /// Enum TeamManager for value: Team Manager
            /// </summary>
            [EnumMember(Value = "Team Manager")]
            TeamManager = 3,

            /// <summary>
            /// Enum Admin for value: Admin
            /// </summary>
            [EnumMember(Value = "Admin")]
            Admin = 4

        }


        /// <summary>
        /// A new role member will take in a new Team.  **Note**: This parameter is used only if &#x60;new_team_id&#x60; is provided.
        /// </summary>
        /// <value>A new role member will take in a new Team.  **Note**: This parameter is used only if &#x60;new_team_id&#x60; is provided.</value>
        [DataMember(Name = "new_role", EmitDefaultValue = true)]
        public NewRoleEnum? NewRole { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TeamRemoveMemberRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TeamRemoveMemberRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TeamRemoveMemberRequest" /> class.
        /// </summary>
        /// <param name="accountId">**account_id** or **email_address** is required. If both are provided, the account id prevails.   Account id to remove from your Team..</param>
        /// <param name="emailAddress">**account_id** or **email_address** is required. If both are provided, the account id prevails.   Email address of the Account to remove from your Team..</param>
        /// <param name="newOwnerEmailAddress">The email address of an Account on this Team to receive all documents, templates, and API apps (if applicable) from the removed Account. If not provided, and on an Enterprise plan, this data will remain with the removed Account.  **Note**: Only available for Enterprise plans..</param>
        /// <param name="newTeamId">Id of the new Team..</param>
        /// <param name="newRole">A new role member will take in a new Team.  **Note**: This parameter is used only if &#x60;new_team_id&#x60; is provided..</param>
        public TeamRemoveMemberRequest(string accountId = default(string), string emailAddress = default(string), string newOwnerEmailAddress = default(string), string newTeamId = default(string), NewRoleEnum? newRole = default(NewRoleEnum?))
        {
            
            this.AccountId = accountId;
            this.EmailAddress = emailAddress;
            this.NewOwnerEmailAddress = newOwnerEmailAddress;
            this.NewTeamId = newTeamId;
            this.NewRole = newRole;
        }

        /// <summary>
        /// **account_id** or **email_address** is required. If both are provided, the account id prevails.   Account id to remove from your Team.
        /// </summary>
        /// <value>**account_id** or **email_address** is required. If both are provided, the account id prevails.   Account id to remove from your Team.</value>
        [DataMember(Name = "account_id", EmitDefaultValue = true)]
        public string AccountId { get; set; }

        /// <summary>
        /// **account_id** or **email_address** is required. If both are provided, the account id prevails.   Email address of the Account to remove from your Team.
        /// </summary>
        /// <value>**account_id** or **email_address** is required. If both are provided, the account id prevails.   Email address of the Account to remove from your Team.</value>
        [DataMember(Name = "email_address", EmitDefaultValue = true)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// The email address of an Account on this Team to receive all documents, templates, and API apps (if applicable) from the removed Account. If not provided, and on an Enterprise plan, this data will remain with the removed Account.  **Note**: Only available for Enterprise plans.
        /// </summary>
        /// <value>The email address of an Account on this Team to receive all documents, templates, and API apps (if applicable) from the removed Account. If not provided, and on an Enterprise plan, this data will remain with the removed Account.  **Note**: Only available for Enterprise plans.</value>
        [DataMember(Name = "new_owner_email_address", EmitDefaultValue = true)]
        public string NewOwnerEmailAddress { get; set; }

        /// <summary>
        /// Id of the new Team.
        /// </summary>
        /// <value>Id of the new Team.</value>
        [DataMember(Name = "new_team_id", EmitDefaultValue = true)]
        public string NewTeamId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TeamRemoveMemberRequest {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  NewOwnerEmailAddress: ").Append(NewOwnerEmailAddress).Append("\n");
            sb.Append("  NewTeamId: ").Append(NewTeamId).Append("\n");
            sb.Append("  NewRole: ").Append(NewRole).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TeamRemoveMemberRequest);
        }

        /// <summary>
        /// Returns true if TeamRemoveMemberRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of TeamRemoveMemberRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TeamRemoveMemberRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.EmailAddress == input.EmailAddress ||
                    (this.EmailAddress != null &&
                    this.EmailAddress.Equals(input.EmailAddress))
                ) && 
                (
                    this.NewOwnerEmailAddress == input.NewOwnerEmailAddress ||
                    (this.NewOwnerEmailAddress != null &&
                    this.NewOwnerEmailAddress.Equals(input.NewOwnerEmailAddress))
                ) && 
                (
                    this.NewTeamId == input.NewTeamId ||
                    (this.NewTeamId != null &&
                    this.NewTeamId.Equals(input.NewTeamId))
                ) && 
                (
                    this.NewRole == input.NewRole ||
                    this.NewRole.Equals(input.NewRole)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountId != null)
                {
                    hashCode = (hashCode * 59) + this.AccountId.GetHashCode();
                }
                if (this.EmailAddress != null)
                {
                    hashCode = (hashCode * 59) + this.EmailAddress.GetHashCode();
                }
                if (this.NewOwnerEmailAddress != null)
                {
                    hashCode = (hashCode * 59) + this.NewOwnerEmailAddress.GetHashCode();
                }
                if (this.NewTeamId != null)
                {
                    hashCode = (hashCode * 59) + this.NewTeamId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NewRole.GetHashCode();
                return hashCode;
            }
        }

        public List<OpenApiType> GetOpenApiTypes()
        {
            var types = new List<OpenApiType>();
            types.Add(new OpenApiType(){
                Name = "account_id",
                Property = "AccountId",
                Type = "string",
                Value = AccountId,
            });
            types.Add(new OpenApiType(){
                Name = "email_address",
                Property = "EmailAddress",
                Type = "string",
                Value = EmailAddress,
            });
            types.Add(new OpenApiType(){
                Name = "new_owner_email_address",
                Property = "NewOwnerEmailAddress",
                Type = "string",
                Value = NewOwnerEmailAddress,
            });
            types.Add(new OpenApiType(){
                Name = "new_team_id",
                Property = "NewTeamId",
                Type = "string",
                Value = NewTeamId,
            });
            types.Add(new OpenApiType(){
                Name = "new_role",
                Property = "NewRole",
                Type = "string",
                Value = NewRole,
            });

            return types;
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
