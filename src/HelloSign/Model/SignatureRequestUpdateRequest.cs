/*
 * HelloSign API
 *
 * HelloSign v3 API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: apisupport@hellosign.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HelloSign.Client.OpenAPIDateConverter;

namespace HelloSign.Model
{
    /// <summary>
    /// SignatureRequestUpdateRequest
    /// </summary>
    [DataContract(Name = "SignatureRequestUpdateRequest")]
    [JsonObject(ItemNullValueHandling = NullValueHandling.Ignore)]
    public partial class SignatureRequestUpdateRequest : IOpenApiTyped, IEquatable<SignatureRequestUpdateRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SignatureRequestUpdateRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SignatureRequestUpdateRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SignatureRequestUpdateRequest" /> class.
        /// </summary>
        /// <param name="emailAddress">The new email address for the recipient.  **NOTE**: Optional if &#x60;name&#x60; is provided..</param>
        /// <param name="name">The new name for the recipient.  **NOTE**: Optional if &#x60;email_address&#x60; is provided..</param>
        /// <param name="signatureId">The signature ID for the recipient. (required).</param>
        /// <param name="expiresAt">_t__SignatureRequestUpdate::EXPIRES_AT.</param>
        public SignatureRequestUpdateRequest(string emailAddress = default(string), string name = default(string), string signatureId = default(string), int? expiresAt = default(int?))
        {
            
            // to ensure "signatureId" is required (not null)
            if (signatureId == null)
            {
                throw new ArgumentNullException("signatureId is a required property for SignatureRequestUpdateRequest and cannot be null");
            }
            this.SignatureId = signatureId;
            this.EmailAddress = emailAddress;
            this.Name = name;
            this.ExpiresAt = expiresAt;
        }

        /// <summary>
        /// The signature ID for the recipient.
        /// </summary>
        /// <value>The signature ID for the recipient.</value>
        [DataMember(Name = "signature_id", IsRequired = true, EmitDefaultValue = true)]
        public string SignatureId { get; set; }

        /// <summary>
        /// The new email address for the recipient.  **NOTE**: Optional if &#x60;name&#x60; is provided.
        /// </summary>
        /// <value>The new email address for the recipient.  **NOTE**: Optional if &#x60;name&#x60; is provided.</value>
        [DataMember(Name = "email_address", EmitDefaultValue = true)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// The new name for the recipient.  **NOTE**: Optional if &#x60;email_address&#x60; is provided.
        /// </summary>
        /// <value>The new name for the recipient.  **NOTE**: Optional if &#x60;email_address&#x60; is provided.</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// _t__SignatureRequestUpdate::EXPIRES_AT
        /// </summary>
        /// <value>_t__SignatureRequestUpdate::EXPIRES_AT</value>
        [DataMember(Name = "expires_at", EmitDefaultValue = true)]
        public int? ExpiresAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SignatureRequestUpdateRequest {\n");
            sb.Append("  SignatureId: ").Append(SignatureId).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SignatureRequestUpdateRequest);
        }

        /// <summary>
        /// Returns true if SignatureRequestUpdateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SignatureRequestUpdateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SignatureRequestUpdateRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SignatureId == input.SignatureId ||
                    (this.SignatureId != null &&
                    this.SignatureId.Equals(input.SignatureId))
                ) && 
                (
                    this.EmailAddress == input.EmailAddress ||
                    (this.EmailAddress != null &&
                    this.EmailAddress.Equals(input.EmailAddress))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ExpiresAt == input.ExpiresAt ||
                    (this.ExpiresAt != null &&
                    this.ExpiresAt.Equals(input.ExpiresAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SignatureId != null)
                {
                    hashCode = (hashCode * 59) + this.SignatureId.GetHashCode();
                }
                if (this.EmailAddress != null)
                {
                    hashCode = (hashCode * 59) + this.EmailAddress.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.ExpiresAt != null)
                {
                    hashCode = (hashCode * 59) + this.ExpiresAt.GetHashCode();
                }
                return hashCode;
            }
        }

        public List<OpenApiType> GetOpenApiTypes()
        {
            var types = new List<OpenApiType>();
            types.Add(new OpenApiType(){
                Name = "signature_id",
                Property = "SignatureId",
                Type = "string",
                Value = SignatureId,
            });
            types.Add(new OpenApiType(){
                Name = "email_address",
                Property = "EmailAddress",
                Type = "string",
                Value = EmailAddress,
            });
            types.Add(new OpenApiType(){
                Name = "name",
                Property = "Name",
                Type = "string",
                Value = Name,
            });
            types.Add(new OpenApiType(){
                Name = "expires_at",
                Property = "ExpiresAt",
                Type = "int?",
                Value = ExpiresAt,
            });

            return types;
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
