/*
 * HelloSign API
 *
 * HelloSign v3 API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: apisupport@hellosign.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HelloSign.Client.OpenAPIDateConverter;

namespace HelloSign.Model
{
    /// <summary>
    /// Basic information about the event that occurred.
    /// </summary>
    [DataContract(Name = "EventCallbackRequestEvent")]
    [JsonObject(ItemNullValueHandling = NullValueHandling.Ignore)]
    public partial class EventCallbackRequestEvent : IOpenApiTyped, IEquatable<EventCallbackRequestEvent>, IValidatableObject
    {
        /// <summary>
        /// Type of callback event that was triggered.
        /// </summary>
        /// <value>Type of callback event that was triggered.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventTypeEnum
        {
            /// <summary>
            /// Enum AccountConfirmed for value: account_confirmed
            /// </summary>
            [EnumMember(Value = "account_confirmed")]
            AccountConfirmed = 1,

            /// <summary>
            /// Enum UnknownError for value: unknown_error
            /// </summary>
            [EnumMember(Value = "unknown_error")]
            UnknownError = 2,

            /// <summary>
            /// Enum FileError for value: file_error
            /// </summary>
            [EnumMember(Value = "file_error")]
            FileError = 3,

            /// <summary>
            /// Enum SignUrlInvalid for value: sign_url_invalid
            /// </summary>
            [EnumMember(Value = "sign_url_invalid")]
            SignUrlInvalid = 4,

            /// <summary>
            /// Enum SignatureRequestViewed for value: signature_request_viewed
            /// </summary>
            [EnumMember(Value = "signature_request_viewed")]
            SignatureRequestViewed = 5,

            /// <summary>
            /// Enum SignatureRequestSigned for value: signature_request_signed
            /// </summary>
            [EnumMember(Value = "signature_request_signed")]
            SignatureRequestSigned = 6,

            /// <summary>
            /// Enum SignatureRequestSent for value: signature_request_sent
            /// </summary>
            [EnumMember(Value = "signature_request_sent")]
            SignatureRequestSent = 7,

            /// <summary>
            /// Enum SignatureRequestAllSigned for value: signature_request_all_signed
            /// </summary>
            [EnumMember(Value = "signature_request_all_signed")]
            SignatureRequestAllSigned = 8,

            /// <summary>
            /// Enum SignatureRequestEmailBounce for value: signature_request_email_bounce
            /// </summary>
            [EnumMember(Value = "signature_request_email_bounce")]
            SignatureRequestEmailBounce = 9,

            /// <summary>
            /// Enum SignatureRequestRemind for value: signature_request_remind
            /// </summary>
            [EnumMember(Value = "signature_request_remind")]
            SignatureRequestRemind = 10,

            /// <summary>
            /// Enum SignatureRequestIncompleteQes for value: signature_request_incomplete_qes
            /// </summary>
            [EnumMember(Value = "signature_request_incomplete_qes")]
            SignatureRequestIncompleteQes = 11,

            /// <summary>
            /// Enum SignatureRequestDestroyed for value: signature_request_destroyed
            /// </summary>
            [EnumMember(Value = "signature_request_destroyed")]
            SignatureRequestDestroyed = 12,

            /// <summary>
            /// Enum SignatureRequestCanceled for value: signature_request_canceled
            /// </summary>
            [EnumMember(Value = "signature_request_canceled")]
            SignatureRequestCanceled = 13,

            /// <summary>
            /// Enum SignatureRequestDownloadable for value: signature_request_downloadable
            /// </summary>
            [EnumMember(Value = "signature_request_downloadable")]
            SignatureRequestDownloadable = 14,

            /// <summary>
            /// Enum SignatureRequestDeclined for value: signature_request_declined
            /// </summary>
            [EnumMember(Value = "signature_request_declined")]
            SignatureRequestDeclined = 15,

            /// <summary>
            /// Enum SignatureRequestReassigned for value: signature_request_reassigned
            /// </summary>
            [EnumMember(Value = "signature_request_reassigned")]
            SignatureRequestReassigned = 16,

            /// <summary>
            /// Enum SignatureRequestInvalid for value: signature_request_invalid
            /// </summary>
            [EnumMember(Value = "signature_request_invalid")]
            SignatureRequestInvalid = 17,

            /// <summary>
            /// Enum SignatureRequestPrepared for value: signature_request_prepared
            /// </summary>
            [EnumMember(Value = "signature_request_prepared")]
            SignatureRequestPrepared = 18,

            /// <summary>
            /// Enum SignatureRequestExpired for value: signature_request_expired
            /// </summary>
            [EnumMember(Value = "signature_request_expired")]
            SignatureRequestExpired = 19,

            /// <summary>
            /// Enum TemplateCreated for value: template_created
            /// </summary>
            [EnumMember(Value = "template_created")]
            TemplateCreated = 20,

            /// <summary>
            /// Enum TemplateError for value: template_error
            /// </summary>
            [EnumMember(Value = "template_error")]
            TemplateError = 21

        }


        /// <summary>
        /// Type of callback event that was triggered.
        /// </summary>
        /// <value>Type of callback event that was triggered.</value>
        [DataMember(Name = "event_type", IsRequired = true, EmitDefaultValue = true)]
        public EventTypeEnum EventType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EventCallbackRequestEvent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EventCallbackRequestEvent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EventCallbackRequestEvent" /> class.
        /// </summary>
        /// <param name="eventTime">Time the event was created (using Unix time). (required).</param>
        /// <param name="eventType">Type of callback event that was triggered. (required).</param>
        /// <param name="eventHash">Generated hash used to verify source of event data. (required).</param>
        /// <param name="eventMetadata">eventMetadata (required).</param>
        public EventCallbackRequestEvent(string eventTime = default(string), EventTypeEnum eventType = default(EventTypeEnum), string eventHash = default(string), EventCallbackRequestEventMetadata eventMetadata = default(EventCallbackRequestEventMetadata))
        {
            
            // to ensure "eventTime" is required (not null)
            if (eventTime == null)
            {
                throw new ArgumentNullException("eventTime is a required property for EventCallbackRequestEvent and cannot be null");
            }
            this.EventTime = eventTime;
            this.EventType = eventType;
            // to ensure "eventHash" is required (not null)
            if (eventHash == null)
            {
                throw new ArgumentNullException("eventHash is a required property for EventCallbackRequestEvent and cannot be null");
            }
            this.EventHash = eventHash;
            // to ensure "eventMetadata" is required (not null)
            if (eventMetadata == null)
            {
                throw new ArgumentNullException("eventMetadata is a required property for EventCallbackRequestEvent and cannot be null");
            }
            this.EventMetadata = eventMetadata;
        }

        /// <summary>
        /// Time the event was created (using Unix time).
        /// </summary>
        /// <value>Time the event was created (using Unix time).</value>
        [DataMember(Name = "event_time", IsRequired = true, EmitDefaultValue = true)]
        public string EventTime { get; set; }

        /// <summary>
        /// Generated hash used to verify source of event data.
        /// </summary>
        /// <value>Generated hash used to verify source of event data.</value>
        [DataMember(Name = "event_hash", IsRequired = true, EmitDefaultValue = true)]
        public string EventHash { get; set; }

        /// <summary>
        /// Gets or Sets EventMetadata
        /// </summary>
        [DataMember(Name = "event_metadata", IsRequired = true, EmitDefaultValue = true)]
        public EventCallbackRequestEventMetadata EventMetadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EventCallbackRequestEvent {\n");
            sb.Append("  EventTime: ").Append(EventTime).Append("\n");
            sb.Append("  EventType: ").Append(EventType).Append("\n");
            sb.Append("  EventHash: ").Append(EventHash).Append("\n");
            sb.Append("  EventMetadata: ").Append(EventMetadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EventCallbackRequestEvent);
        }

        /// <summary>
        /// Returns true if EventCallbackRequestEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of EventCallbackRequestEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EventCallbackRequestEvent input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EventTime == input.EventTime ||
                    (this.EventTime != null &&
                    this.EventTime.Equals(input.EventTime))
                ) && 
                (
                    this.EventType == input.EventType ||
                    this.EventType.Equals(input.EventType)
                ) && 
                (
                    this.EventHash == input.EventHash ||
                    (this.EventHash != null &&
                    this.EventHash.Equals(input.EventHash))
                ) && 
                (
                    this.EventMetadata == input.EventMetadata ||
                    (this.EventMetadata != null &&
                    this.EventMetadata.Equals(input.EventMetadata))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EventTime != null)
                {
                    hashCode = (hashCode * 59) + this.EventTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EventType.GetHashCode();
                if (this.EventHash != null)
                {
                    hashCode = (hashCode * 59) + this.EventHash.GetHashCode();
                }
                if (this.EventMetadata != null)
                {
                    hashCode = (hashCode * 59) + this.EventMetadata.GetHashCode();
                }
                return hashCode;
            }
        }

        public List<OpenApiType> GetOpenApiTypes()
        {
            var types = new List<OpenApiType>();
            types.Add(new OpenApiType(){
                Name = "event_time",
                Property = "EventTime",
                Type = "string",
                Value = EventTime,
            });
            types.Add(new OpenApiType(){
                Name = "event_type",
                Property = "EventType",
                Type = "string",
                Value = EventType,
            });
            types.Add(new OpenApiType(){
                Name = "event_hash",
                Property = "EventHash",
                Type = "string",
                Value = EventHash,
            });
            types.Add(new OpenApiType(){
                Name = "event_metadata",
                Property = "EventMetadata",
                Type = "EventCallbackRequestEventMetadata",
                Value = EventMetadata,
            });

            return types;
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
