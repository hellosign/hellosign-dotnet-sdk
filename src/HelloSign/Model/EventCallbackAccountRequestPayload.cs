/*
 * Dropbox Sign API
 *
 * Dropbox Sign v3 API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: apisupport@hellosign.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HelloSign.Client.OpenAPIDateConverter;

namespace HelloSign.Model
{
    /// <summary>
    /// EventCallbackAccountRequestPayload
    /// </summary>
    [DataContract(Name = "EventCallbackAccountRequestPayload")]
    [JsonObject(ItemNullValueHandling = NullValueHandling.Ignore)]
    public partial class EventCallbackAccountRequestPayload : IOpenApiTyped, IEquatable<EventCallbackAccountRequestPayload>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EventCallbackAccountRequestPayload" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EventCallbackAccountRequestPayload() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EventCallbackAccountRequestPayload" /> class.
        /// </summary>
        /// <param name="_event">_event (required).</param>
        /// <param name="signatureRequest">signatureRequest.</param>
        /// <param name="template">template.</param>
        public EventCallbackAccountRequestPayload(EventCallbackRequestEvent _event = default(EventCallbackRequestEvent), SignatureRequestResponse signatureRequest = default(SignatureRequestResponse), TemplateResponse template = default(TemplateResponse))
        {
            
            // to ensure "_event" is required (not null)
            if (_event == null)
            {
                throw new ArgumentNullException("_event is a required property for EventCallbackAccountRequestPayload and cannot be null");
            }
            this.Event = _event;
            this.SignatureRequest = signatureRequest;
            this.Template = template;
        }

        /// <summary>
        /// Gets or Sets Event
        /// </summary>
        [DataMember(Name = "event", IsRequired = true, EmitDefaultValue = true)]
        public EventCallbackRequestEvent Event { get; set; }

        /// <summary>
        /// Gets or Sets SignatureRequest
        /// </summary>
        [DataMember(Name = "signature_request", EmitDefaultValue = true)]
        public SignatureRequestResponse SignatureRequest { get; set; }

        /// <summary>
        /// Gets or Sets Template
        /// </summary>
        [DataMember(Name = "template", EmitDefaultValue = true)]
        public TemplateResponse Template { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EventCallbackAccountRequestPayload {\n");
            sb.Append("  Event: ").Append(Event).Append("\n");
            sb.Append("  SignatureRequest: ").Append(SignatureRequest).Append("\n");
            sb.Append("  Template: ").Append(Template).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EventCallbackAccountRequestPayload);
        }

        /// <summary>
        /// Returns true if EventCallbackAccountRequestPayload instances are equal
        /// </summary>
        /// <param name="input">Instance of EventCallbackAccountRequestPayload to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EventCallbackAccountRequestPayload input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Event == input.Event ||
                    (this.Event != null &&
                    this.Event.Equals(input.Event))
                ) && 
                (
                    this.SignatureRequest == input.SignatureRequest ||
                    (this.SignatureRequest != null &&
                    this.SignatureRequest.Equals(input.SignatureRequest))
                ) && 
                (
                    this.Template == input.Template ||
                    (this.Template != null &&
                    this.Template.Equals(input.Template))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Event != null)
                {
                    hashCode = (hashCode * 59) + this.Event.GetHashCode();
                }
                if (this.SignatureRequest != null)
                {
                    hashCode = (hashCode * 59) + this.SignatureRequest.GetHashCode();
                }
                if (this.Template != null)
                {
                    hashCode = (hashCode * 59) + this.Template.GetHashCode();
                }
                return hashCode;
            }
        }

        public List<OpenApiType> GetOpenApiTypes()
        {
            var types = new List<OpenApiType>();
            types.Add(new OpenApiType(){
                Name = "event",
                Property = "Event",
                Type = "EventCallbackRequestEvent",
                Value = Event,
            });
            types.Add(new OpenApiType(){
                Name = "signature_request",
                Property = "SignatureRequest",
                Type = "SignatureRequestResponse",
                Value = SignatureRequest,
            });
            types.Add(new OpenApiType(){
                Name = "template",
                Property = "Template",
                Type = "TemplateResponse",
                Value = Template,
            });

            return types;
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
