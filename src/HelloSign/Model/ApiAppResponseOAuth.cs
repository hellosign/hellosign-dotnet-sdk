/*
 * Dropbox Sign API
 *
 * Dropbox Sign v3 API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: apisupport@hellosign.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HelloSign.Client.OpenAPIDateConverter;

namespace HelloSign.Model
{
    /// <summary>
    /// An object describing the app&#39;s OAuth properties, or null if OAuth is not configured for the app.
    /// </summary>
    [DataContract(Name = "ApiAppResponseOAuth")]
    [JsonObject(ItemNullValueHandling = NullValueHandling.Ignore)]
    public partial class ApiAppResponseOAuth : IOpenApiTyped, IEquatable<ApiAppResponseOAuth>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiAppResponseOAuth" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ApiAppResponseOAuth() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiAppResponseOAuth" /> class.
        /// </summary>
        /// <param name="callbackUrl">The app&#39;s OAuth callback URL..</param>
        /// <param name="secret">The app&#39;s OAuth secret, or null if the app does not belong to user..</param>
        /// <param name="scopes">Array of OAuth scopes used by the app..</param>
        /// <param name="chargesUsers">Boolean indicating whether the app owner or the account granting permission is billed for OAuth requests..</param>
        public ApiAppResponseOAuth(string callbackUrl = default(string), string secret = default(string), List<string> scopes = default(List<string>), bool chargesUsers = default(bool))
        {
            
            this.CallbackUrl = callbackUrl;
            this.Secret = secret;
            this.Scopes = scopes;
            this.ChargesUsers = chargesUsers;
        }

        /// <summary>
        /// The app&#39;s OAuth callback URL.
        /// </summary>
        /// <value>The app&#39;s OAuth callback URL.</value>
        [DataMember(Name = "callback_url", EmitDefaultValue = true)]
        public string CallbackUrl { get; set; }

        /// <summary>
        /// The app&#39;s OAuth secret, or null if the app does not belong to user.
        /// </summary>
        /// <value>The app&#39;s OAuth secret, or null if the app does not belong to user.</value>
        [DataMember(Name = "secret", EmitDefaultValue = true)]
        public string Secret { get; set; }

        /// <summary>
        /// Array of OAuth scopes used by the app.
        /// </summary>
        /// <value>Array of OAuth scopes used by the app.</value>
        [DataMember(Name = "scopes", EmitDefaultValue = true)]
        public List<string> Scopes { get; set; }

        /// <summary>
        /// Boolean indicating whether the app owner or the account granting permission is billed for OAuth requests.
        /// </summary>
        /// <value>Boolean indicating whether the app owner or the account granting permission is billed for OAuth requests.</value>
        [DataMember(Name = "charges_users", EmitDefaultValue = true)]
        public bool ChargesUsers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApiAppResponseOAuth {\n");
            sb.Append("  CallbackUrl: ").Append(CallbackUrl).Append("\n");
            sb.Append("  Secret: ").Append(Secret).Append("\n");
            sb.Append("  Scopes: ").Append(Scopes).Append("\n");
            sb.Append("  ChargesUsers: ").Append(ChargesUsers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApiAppResponseOAuth);
        }

        /// <summary>
        /// Returns true if ApiAppResponseOAuth instances are equal
        /// </summary>
        /// <param name="input">Instance of ApiAppResponseOAuth to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApiAppResponseOAuth input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CallbackUrl == input.CallbackUrl ||
                    (this.CallbackUrl != null &&
                    this.CallbackUrl.Equals(input.CallbackUrl))
                ) && 
                (
                    this.Secret == input.Secret ||
                    (this.Secret != null &&
                    this.Secret.Equals(input.Secret))
                ) && 
                (
                    this.Scopes == input.Scopes ||
                    this.Scopes != null &&
                    input.Scopes != null &&
                    this.Scopes.SequenceEqual(input.Scopes)
                ) && 
                (
                    this.ChargesUsers == input.ChargesUsers ||
                    this.ChargesUsers.Equals(input.ChargesUsers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CallbackUrl != null)
                {
                    hashCode = (hashCode * 59) + this.CallbackUrl.GetHashCode();
                }
                if (this.Secret != null)
                {
                    hashCode = (hashCode * 59) + this.Secret.GetHashCode();
                }
                if (this.Scopes != null)
                {
                    hashCode = (hashCode * 59) + this.Scopes.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ChargesUsers.GetHashCode();
                return hashCode;
            }
        }

        public List<OpenApiType> GetOpenApiTypes()
        {
            var types = new List<OpenApiType>();
            types.Add(new OpenApiType(){
                Name = "callback_url",
                Property = "CallbackUrl",
                Type = "string",
                Value = CallbackUrl,
            });
            types.Add(new OpenApiType(){
                Name = "secret",
                Property = "Secret",
                Type = "string",
                Value = Secret,
            });
            types.Add(new OpenApiType(){
                Name = "scopes",
                Property = "Scopes",
                Type = "List<string>",
                Value = Scopes,
            });
            types.Add(new OpenApiType(){
                Name = "charges_users",
                Property = "ChargesUsers",
                Type = "bool",
                Value = ChargesUsers,
            });

            return types;
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
