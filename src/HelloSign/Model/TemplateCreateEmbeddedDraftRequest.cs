/*
 * HelloSign API
 *
 * HelloSign v3 API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: apisupport@hellosign.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HelloSign.Client.OpenAPIDateConverter;

namespace HelloSign.Model
{
    /// <summary>
    /// TemplateCreateEmbeddedDraftRequest
    /// </summary>
    [DataContract(Name = "TemplateCreateEmbeddedDraftRequest")]
    [JsonObject(ItemNullValueHandling = NullValueHandling.Ignore)]
    public partial class TemplateCreateEmbeddedDraftRequest : IOpenApiTyped, IEquatable<TemplateCreateEmbeddedDraftRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateCreateEmbeddedDraftRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TemplateCreateEmbeddedDraftRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateCreateEmbeddedDraftRequest" /> class.
        /// </summary>
        /// <param name="file">Use &#x60;file[]&#x60; to indicate the uploaded file(s) to send for signature.  This endpoint requires either **file** or **file_url[]**, but not both..</param>
        /// <param name="fileUrl">Use &#x60;file_url[]&#x60; to have HelloSign download the file(s) to send for signature.  This endpoint requires either **file** or **file_url[]**, but not both..</param>
        /// <param name="allowCcs">This allows the requester to specify whether the user is allowed to provide email addresses to CC when creating a template. (default to true).</param>
        /// <param name="allowReassign">Allows signers to reassign their signature requests to other signers if set to &#x60;true&#x60;. Defaults to &#x60;false&#x60;.  **Note**: Only available for Premium plan and higher. (default to false).</param>
        /// <param name="attachments">A list describing the attachments.</param>
        /// <param name="ccRoles">The CC roles that must be assigned when using the template to send a signature request.</param>
        /// <param name="clientId">Client id of the app you&#39;re using to create this draft. Used to apply the branding and callback url defined for the app. (required).</param>
        /// <param name="editorOptions">editorOptions.</param>
        /// <param name="fieldOptions">fieldOptions.</param>
        /// <param name="forceSignerRoles">Provide users the ability to review/edit the template signer roles. (default to false).</param>
        /// <param name="forceSubjectMessage">Provide users the ability to review/edit the template subject and message. (default to false).</param>
        /// <param name="formFieldGroups">Group information for fields defined in &#x60;form_fields_per_document&#x60;. String-indexed JSON array with &#x60;group_label&#x60; and &#x60;requirement&#x60; keys. &#x60;form_fields_per_document&#x60; must contain fields referencing a group defined in &#x60;form_field_groups&#x60;..</param>
        /// <param name="formFieldRules">Conditional Logic rules for fields defined in &#x60;form_fields_per_document&#x60;..</param>
        /// <param name="formFieldsPerDocument">The fields that should appear on the document, expressed as an array of objects. (We&#39;re currently fixing a bug where this property only accepts a two-dimensional array. You can read about it here: &lt;a href&#x3D;\&quot;/docs/placing-fields/form-fields-per-document\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Using Form Fields per Document&lt;/a&gt;.)  **NOTE**: Fields like **text**, **dropdown**, **checkbox**, **radio**, and **hyperlink** have additional required and optional parameters. Check out the list of [additional parameters](/api/reference/constants/#form-fields-per-document) for these field types.  * Text Field use &#x60;SubFormFieldsPerDocumentText&#x60; * Dropdown Field use &#x60;SubFormFieldsPerDocumentDropdown&#x60; * Hyperlink Field use &#x60;SubFormFieldsPerDocumentHyperlink&#x60; * Checkbox Field use &#x60;SubFormFieldsPerDocumentCheckbox&#x60; * Radio Field use &#x60;SubFormFieldsPerDocumentRadio&#x60; * Signature Field use &#x60;SubFormFieldsPerDocumentSignature&#x60; * Date Signed Field use &#x60;SubFormFieldsPerDocumentDateSigned&#x60; * Initials Field use &#x60;SubFormFieldsPerDocumentInitials&#x60; * Text Merge Field use &#x60;SubFormFieldsPerDocumentTextMerge&#x60; * Checkbox Merge Field use &#x60;SubFormFieldsPerDocumentCheckboxMerge&#x60;.</param>
        /// <param name="mergeFields">Add merge fields to the template. Merge fields are placed by the user creating the template and used to pre-fill data by passing values into signature requests with the &#x60;custom_fields&#x60; parameter.   If the signature request using that template *does not* pass a value into a merge field, then an empty field remains in the document..</param>
        /// <param name="message">The default template email message..</param>
        /// <param name="metadata">Key-value data that should be attached to the signature request. This metadata is included in all API responses and events involving the signature request. For example, use the metadata field to store a signer&#39;s order number for look up when receiving events for the signature request.  Each request can include up to 10 metadata keys (or 50 nested metadata keys), with key names up to 40 characters long and values up to 1000 characters long..</param>
        /// <param name="showPreview">This allows the requester to enable the editor/preview experience.  - &#x60;show_preview&#x3D;true&#x60;: Allows requesters to enable the editor/preview experience. - &#x60;show_preview&#x3D;false&#x60;: Allows requesters to disable the editor/preview experience. (default to false).</param>
        /// <param name="showProgressStepper">When only one step remains in the signature request process and this parameter is set to &#x60;false&#x60; then the progress stepper will be hidden. (default to true).</param>
        /// <param name="signerRoles">An array of the designated signer roles that must be specified when sending a SignatureRequest using this Template..</param>
        /// <param name="skipMeNow">Disables the \&quot;Me (Now)\&quot; option for the person preparing the document. Does not work with type &#x60;send_document&#x60;. Defaults to &#x60;false&#x60;. (default to false).</param>
        /// <param name="subject">The template title (alias)..</param>
        /// <param name="testMode">Whether this is a test, the signature request created from this draft will not be legally binding if set to &#x60;true&#x60;. Defaults to &#x60;false&#x60;. (default to false).</param>
        /// <param name="title">The title you want to assign to the SignatureRequest..</param>
        /// <param name="usePreexistingFields">Enable the detection of predefined PDF fields by setting the &#x60;use_preexisting_fields&#x60; to &#x60;true&#x60; (defaults to disabled, or &#x60;false&#x60;). (default to false).</param>
        public TemplateCreateEmbeddedDraftRequest(List<System.IO.Stream> file = default(List<System.IO.Stream>), List<string> fileUrl = default(List<string>), bool allowCcs = true, bool allowReassign = false, List<SubAttachment> attachments = default(List<SubAttachment>), List<string> ccRoles = default(List<string>), string clientId = default(string), SubEditorOptions editorOptions = default(SubEditorOptions), SubFieldOptions fieldOptions = default(SubFieldOptions), bool forceSignerRoles = false, bool forceSubjectMessage = false, List<SubFormFieldGroup> formFieldGroups = default(List<SubFormFieldGroup>), List<SubFormFieldRule> formFieldRules = default(List<SubFormFieldRule>), List<SubFormFieldsPerDocumentBase> formFieldsPerDocument = default(List<SubFormFieldsPerDocumentBase>), List<SubMergeField> mergeFields = default(List<SubMergeField>), string message = default(string), Dictionary<string, Object> metadata = default(Dictionary<string, Object>), bool showPreview = false, bool showProgressStepper = true, List<SubTemplateRole> signerRoles = default(List<SubTemplateRole>), bool skipMeNow = false, string subject = default(string), bool testMode = false, string title = default(string), bool usePreexistingFields = false)
        {
            
            // to ensure "clientId" is required (not null)
            if (clientId == null)
            {
                throw new ArgumentNullException("clientId is a required property for TemplateCreateEmbeddedDraftRequest and cannot be null");
            }
            this.ClientId = clientId;
            this.File = file;
            this.FileUrl = fileUrl;
            this.AllowCcs = allowCcs;
            this.AllowReassign = allowReassign;
            this.Attachments = attachments;
            this.CcRoles = ccRoles;
            this.EditorOptions = editorOptions;
            this.FieldOptions = fieldOptions;
            this.ForceSignerRoles = forceSignerRoles;
            this.ForceSubjectMessage = forceSubjectMessage;
            this.FormFieldGroups = formFieldGroups;
            this.FormFieldRules = formFieldRules;
            this.FormFieldsPerDocument = formFieldsPerDocument;
            this.MergeFields = mergeFields;
            this.Message = message;
            this.Metadata = metadata;
            this.ShowPreview = showPreview;
            this.ShowProgressStepper = showProgressStepper;
            this.SignerRoles = signerRoles;
            this.SkipMeNow = skipMeNow;
            this.Subject = subject;
            this.TestMode = testMode;
            this.Title = title;
            this.UsePreexistingFields = usePreexistingFields;
        }

        /// <summary>
        /// Client id of the app you&#39;re using to create this draft. Used to apply the branding and callback url defined for the app.
        /// </summary>
        /// <value>Client id of the app you&#39;re using to create this draft. Used to apply the branding and callback url defined for the app.</value>
        [DataMember(Name = "client_id", IsRequired = true, EmitDefaultValue = true)]
        public string ClientId { get; set; }

        /// <summary>
        /// Use &#x60;file[]&#x60; to indicate the uploaded file(s) to send for signature.  This endpoint requires either **file** or **file_url[]**, but not both.
        /// </summary>
        /// <value>Use &#x60;file[]&#x60; to indicate the uploaded file(s) to send for signature.  This endpoint requires either **file** or **file_url[]**, but not both.</value>
        [DataMember(Name = "file", EmitDefaultValue = true)]
        public List<System.IO.Stream> File { get; set; }

        /// <summary>
        /// Use &#x60;file_url[]&#x60; to have HelloSign download the file(s) to send for signature.  This endpoint requires either **file** or **file_url[]**, but not both.
        /// </summary>
        /// <value>Use &#x60;file_url[]&#x60; to have HelloSign download the file(s) to send for signature.  This endpoint requires either **file** or **file_url[]**, but not both.</value>
        [DataMember(Name = "file_url", EmitDefaultValue = true)]
        public List<string> FileUrl { get; set; }

        /// <summary>
        /// This allows the requester to specify whether the user is allowed to provide email addresses to CC when creating a template.
        /// </summary>
        /// <value>This allows the requester to specify whether the user is allowed to provide email addresses to CC when creating a template.</value>
        [DataMember(Name = "allow_ccs", EmitDefaultValue = true)]
        public bool AllowCcs { get; set; }

        /// <summary>
        /// Allows signers to reassign their signature requests to other signers if set to &#x60;true&#x60;. Defaults to &#x60;false&#x60;.  **Note**: Only available for Premium plan and higher.
        /// </summary>
        /// <value>Allows signers to reassign their signature requests to other signers if set to &#x60;true&#x60;. Defaults to &#x60;false&#x60;.  **Note**: Only available for Premium plan and higher.</value>
        [DataMember(Name = "allow_reassign", EmitDefaultValue = true)]
        public bool AllowReassign { get; set; }

        /// <summary>
        /// A list describing the attachments
        /// </summary>
        /// <value>A list describing the attachments</value>
        [DataMember(Name = "attachments", EmitDefaultValue = true)]
        public List<SubAttachment> Attachments { get; set; }

        /// <summary>
        /// The CC roles that must be assigned when using the template to send a signature request
        /// </summary>
        /// <value>The CC roles that must be assigned when using the template to send a signature request</value>
        [DataMember(Name = "cc_roles", EmitDefaultValue = true)]
        public List<string> CcRoles { get; set; }

        /// <summary>
        /// Gets or Sets EditorOptions
        /// </summary>
        [DataMember(Name = "editor_options", EmitDefaultValue = true)]
        public SubEditorOptions EditorOptions { get; set; }

        /// <summary>
        /// Gets or Sets FieldOptions
        /// </summary>
        [DataMember(Name = "field_options", EmitDefaultValue = true)]
        public SubFieldOptions FieldOptions { get; set; }

        /// <summary>
        /// Provide users the ability to review/edit the template signer roles.
        /// </summary>
        /// <value>Provide users the ability to review/edit the template signer roles.</value>
        [DataMember(Name = "force_signer_roles", EmitDefaultValue = true)]
        public bool ForceSignerRoles { get; set; }

        /// <summary>
        /// Provide users the ability to review/edit the template subject and message.
        /// </summary>
        /// <value>Provide users the ability to review/edit the template subject and message.</value>
        [DataMember(Name = "force_subject_message", EmitDefaultValue = true)]
        public bool ForceSubjectMessage { get; set; }

        /// <summary>
        /// Group information for fields defined in &#x60;form_fields_per_document&#x60;. String-indexed JSON array with &#x60;group_label&#x60; and &#x60;requirement&#x60; keys. &#x60;form_fields_per_document&#x60; must contain fields referencing a group defined in &#x60;form_field_groups&#x60;.
        /// </summary>
        /// <value>Group information for fields defined in &#x60;form_fields_per_document&#x60;. String-indexed JSON array with &#x60;group_label&#x60; and &#x60;requirement&#x60; keys. &#x60;form_fields_per_document&#x60; must contain fields referencing a group defined in &#x60;form_field_groups&#x60;.</value>
        [DataMember(Name = "form_field_groups", EmitDefaultValue = true)]
        public List<SubFormFieldGroup> FormFieldGroups { get; set; }

        /// <summary>
        /// Conditional Logic rules for fields defined in &#x60;form_fields_per_document&#x60;.
        /// </summary>
        /// <value>Conditional Logic rules for fields defined in &#x60;form_fields_per_document&#x60;.</value>
        [DataMember(Name = "form_field_rules", EmitDefaultValue = true)]
        public List<SubFormFieldRule> FormFieldRules { get; set; }

        /// <summary>
        /// The fields that should appear on the document, expressed as an array of objects. (We&#39;re currently fixing a bug where this property only accepts a two-dimensional array. You can read about it here: &lt;a href&#x3D;\&quot;/docs/placing-fields/form-fields-per-document\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Using Form Fields per Document&lt;/a&gt;.)  **NOTE**: Fields like **text**, **dropdown**, **checkbox**, **radio**, and **hyperlink** have additional required and optional parameters. Check out the list of [additional parameters](/api/reference/constants/#form-fields-per-document) for these field types.  * Text Field use &#x60;SubFormFieldsPerDocumentText&#x60; * Dropdown Field use &#x60;SubFormFieldsPerDocumentDropdown&#x60; * Hyperlink Field use &#x60;SubFormFieldsPerDocumentHyperlink&#x60; * Checkbox Field use &#x60;SubFormFieldsPerDocumentCheckbox&#x60; * Radio Field use &#x60;SubFormFieldsPerDocumentRadio&#x60; * Signature Field use &#x60;SubFormFieldsPerDocumentSignature&#x60; * Date Signed Field use &#x60;SubFormFieldsPerDocumentDateSigned&#x60; * Initials Field use &#x60;SubFormFieldsPerDocumentInitials&#x60; * Text Merge Field use &#x60;SubFormFieldsPerDocumentTextMerge&#x60; * Checkbox Merge Field use &#x60;SubFormFieldsPerDocumentCheckboxMerge&#x60;
        /// </summary>
        /// <value>The fields that should appear on the document, expressed as an array of objects. (We&#39;re currently fixing a bug where this property only accepts a two-dimensional array. You can read about it here: &lt;a href&#x3D;\&quot;/docs/placing-fields/form-fields-per-document\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Using Form Fields per Document&lt;/a&gt;.)  **NOTE**: Fields like **text**, **dropdown**, **checkbox**, **radio**, and **hyperlink** have additional required and optional parameters. Check out the list of [additional parameters](/api/reference/constants/#form-fields-per-document) for these field types.  * Text Field use &#x60;SubFormFieldsPerDocumentText&#x60; * Dropdown Field use &#x60;SubFormFieldsPerDocumentDropdown&#x60; * Hyperlink Field use &#x60;SubFormFieldsPerDocumentHyperlink&#x60; * Checkbox Field use &#x60;SubFormFieldsPerDocumentCheckbox&#x60; * Radio Field use &#x60;SubFormFieldsPerDocumentRadio&#x60; * Signature Field use &#x60;SubFormFieldsPerDocumentSignature&#x60; * Date Signed Field use &#x60;SubFormFieldsPerDocumentDateSigned&#x60; * Initials Field use &#x60;SubFormFieldsPerDocumentInitials&#x60; * Text Merge Field use &#x60;SubFormFieldsPerDocumentTextMerge&#x60; * Checkbox Merge Field use &#x60;SubFormFieldsPerDocumentCheckboxMerge&#x60;</value>
        [DataMember(Name = "form_fields_per_document", EmitDefaultValue = true)]
        public List<SubFormFieldsPerDocumentBase> FormFieldsPerDocument { get; set; }

        /// <summary>
        /// Add merge fields to the template. Merge fields are placed by the user creating the template and used to pre-fill data by passing values into signature requests with the &#x60;custom_fields&#x60; parameter.   If the signature request using that template *does not* pass a value into a merge field, then an empty field remains in the document.
        /// </summary>
        /// <value>Add merge fields to the template. Merge fields are placed by the user creating the template and used to pre-fill data by passing values into signature requests with the &#x60;custom_fields&#x60; parameter.   If the signature request using that template *does not* pass a value into a merge field, then an empty field remains in the document.</value>
        [DataMember(Name = "merge_fields", EmitDefaultValue = true)]
        public List<SubMergeField> MergeFields { get; set; }

        /// <summary>
        /// The default template email message.
        /// </summary>
        /// <value>The default template email message.</value>
        [DataMember(Name = "message", EmitDefaultValue = true)]
        public string Message { get; set; }

        /// <summary>
        /// Key-value data that should be attached to the signature request. This metadata is included in all API responses and events involving the signature request. For example, use the metadata field to store a signer&#39;s order number for look up when receiving events for the signature request.  Each request can include up to 10 metadata keys (or 50 nested metadata keys), with key names up to 40 characters long and values up to 1000 characters long.
        /// </summary>
        /// <value>Key-value data that should be attached to the signature request. This metadata is included in all API responses and events involving the signature request. For example, use the metadata field to store a signer&#39;s order number for look up when receiving events for the signature request.  Each request can include up to 10 metadata keys (or 50 nested metadata keys), with key names up to 40 characters long and values up to 1000 characters long.</value>
        [DataMember(Name = "metadata", EmitDefaultValue = true)]
        public Dictionary<string, Object> Metadata { get; set; }

        /// <summary>
        /// This allows the requester to enable the editor/preview experience.  - &#x60;show_preview&#x3D;true&#x60;: Allows requesters to enable the editor/preview experience. - &#x60;show_preview&#x3D;false&#x60;: Allows requesters to disable the editor/preview experience.
        /// </summary>
        /// <value>This allows the requester to enable the editor/preview experience.  - &#x60;show_preview&#x3D;true&#x60;: Allows requesters to enable the editor/preview experience. - &#x60;show_preview&#x3D;false&#x60;: Allows requesters to disable the editor/preview experience.</value>
        [DataMember(Name = "show_preview", EmitDefaultValue = true)]
        public bool ShowPreview { get; set; }

        /// <summary>
        /// When only one step remains in the signature request process and this parameter is set to &#x60;false&#x60; then the progress stepper will be hidden.
        /// </summary>
        /// <value>When only one step remains in the signature request process and this parameter is set to &#x60;false&#x60; then the progress stepper will be hidden.</value>
        [DataMember(Name = "show_progress_stepper", EmitDefaultValue = true)]
        public bool ShowProgressStepper { get; set; }

        /// <summary>
        /// An array of the designated signer roles that must be specified when sending a SignatureRequest using this Template.
        /// </summary>
        /// <value>An array of the designated signer roles that must be specified when sending a SignatureRequest using this Template.</value>
        [DataMember(Name = "signer_roles", EmitDefaultValue = true)]
        public List<SubTemplateRole> SignerRoles { get; set; }

        /// <summary>
        /// Disables the \&quot;Me (Now)\&quot; option for the person preparing the document. Does not work with type &#x60;send_document&#x60;. Defaults to &#x60;false&#x60;.
        /// </summary>
        /// <value>Disables the \&quot;Me (Now)\&quot; option for the person preparing the document. Does not work with type &#x60;send_document&#x60;. Defaults to &#x60;false&#x60;.</value>
        [DataMember(Name = "skip_me_now", EmitDefaultValue = true)]
        public bool SkipMeNow { get; set; }

        /// <summary>
        /// The template title (alias).
        /// </summary>
        /// <value>The template title (alias).</value>
        [DataMember(Name = "subject", EmitDefaultValue = true)]
        public string Subject { get; set; }

        /// <summary>
        /// Whether this is a test, the signature request created from this draft will not be legally binding if set to &#x60;true&#x60;. Defaults to &#x60;false&#x60;.
        /// </summary>
        /// <value>Whether this is a test, the signature request created from this draft will not be legally binding if set to &#x60;true&#x60;. Defaults to &#x60;false&#x60;.</value>
        [DataMember(Name = "test_mode", EmitDefaultValue = true)]
        public bool TestMode { get; set; }

        /// <summary>
        /// The title you want to assign to the SignatureRequest.
        /// </summary>
        /// <value>The title you want to assign to the SignatureRequest.</value>
        [DataMember(Name = "title", EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// Enable the detection of predefined PDF fields by setting the &#x60;use_preexisting_fields&#x60; to &#x60;true&#x60; (defaults to disabled, or &#x60;false&#x60;).
        /// </summary>
        /// <value>Enable the detection of predefined PDF fields by setting the &#x60;use_preexisting_fields&#x60; to &#x60;true&#x60; (defaults to disabled, or &#x60;false&#x60;).</value>
        [DataMember(Name = "use_preexisting_fields", EmitDefaultValue = true)]
        public bool UsePreexistingFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TemplateCreateEmbeddedDraftRequest {\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  File: ").Append(File).Append("\n");
            sb.Append("  FileUrl: ").Append(FileUrl).Append("\n");
            sb.Append("  AllowCcs: ").Append(AllowCcs).Append("\n");
            sb.Append("  AllowReassign: ").Append(AllowReassign).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  CcRoles: ").Append(CcRoles).Append("\n");
            sb.Append("  EditorOptions: ").Append(EditorOptions).Append("\n");
            sb.Append("  FieldOptions: ").Append(FieldOptions).Append("\n");
            sb.Append("  ForceSignerRoles: ").Append(ForceSignerRoles).Append("\n");
            sb.Append("  ForceSubjectMessage: ").Append(ForceSubjectMessage).Append("\n");
            sb.Append("  FormFieldGroups: ").Append(FormFieldGroups).Append("\n");
            sb.Append("  FormFieldRules: ").Append(FormFieldRules).Append("\n");
            sb.Append("  FormFieldsPerDocument: ").Append(FormFieldsPerDocument).Append("\n");
            sb.Append("  MergeFields: ").Append(MergeFields).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  ShowPreview: ").Append(ShowPreview).Append("\n");
            sb.Append("  ShowProgressStepper: ").Append(ShowProgressStepper).Append("\n");
            sb.Append("  SignerRoles: ").Append(SignerRoles).Append("\n");
            sb.Append("  SkipMeNow: ").Append(SkipMeNow).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  TestMode: ").Append(TestMode).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  UsePreexistingFields: ").Append(UsePreexistingFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TemplateCreateEmbeddedDraftRequest);
        }

        /// <summary>
        /// Returns true if TemplateCreateEmbeddedDraftRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of TemplateCreateEmbeddedDraftRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TemplateCreateEmbeddedDraftRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.File == input.File ||
                    this.File != null &&
                    input.File != null &&
                    this.File.SequenceEqual(input.File)
                ) && 
                (
                    this.FileUrl == input.FileUrl ||
                    this.FileUrl != null &&
                    input.FileUrl != null &&
                    this.FileUrl.SequenceEqual(input.FileUrl)
                ) && 
                (
                    this.AllowCcs == input.AllowCcs ||
                    this.AllowCcs.Equals(input.AllowCcs)
                ) && 
                (
                    this.AllowReassign == input.AllowReassign ||
                    this.AllowReassign.Equals(input.AllowReassign)
                ) && 
                (
                    this.Attachments == input.Attachments ||
                    this.Attachments != null &&
                    input.Attachments != null &&
                    this.Attachments.SequenceEqual(input.Attachments)
                ) && 
                (
                    this.CcRoles == input.CcRoles ||
                    this.CcRoles != null &&
                    input.CcRoles != null &&
                    this.CcRoles.SequenceEqual(input.CcRoles)
                ) && 
                (
                    this.EditorOptions == input.EditorOptions ||
                    (this.EditorOptions != null &&
                    this.EditorOptions.Equals(input.EditorOptions))
                ) && 
                (
                    this.FieldOptions == input.FieldOptions ||
                    (this.FieldOptions != null &&
                    this.FieldOptions.Equals(input.FieldOptions))
                ) && 
                (
                    this.ForceSignerRoles == input.ForceSignerRoles ||
                    this.ForceSignerRoles.Equals(input.ForceSignerRoles)
                ) && 
                (
                    this.ForceSubjectMessage == input.ForceSubjectMessage ||
                    this.ForceSubjectMessage.Equals(input.ForceSubjectMessage)
                ) && 
                (
                    this.FormFieldGroups == input.FormFieldGroups ||
                    this.FormFieldGroups != null &&
                    input.FormFieldGroups != null &&
                    this.FormFieldGroups.SequenceEqual(input.FormFieldGroups)
                ) && 
                (
                    this.FormFieldRules == input.FormFieldRules ||
                    this.FormFieldRules != null &&
                    input.FormFieldRules != null &&
                    this.FormFieldRules.SequenceEqual(input.FormFieldRules)
                ) && 
                (
                    this.FormFieldsPerDocument == input.FormFieldsPerDocument ||
                    this.FormFieldsPerDocument != null &&
                    input.FormFieldsPerDocument != null &&
                    this.FormFieldsPerDocument.SequenceEqual(input.FormFieldsPerDocument)
                ) && 
                (
                    this.MergeFields == input.MergeFields ||
                    this.MergeFields != null &&
                    input.MergeFields != null &&
                    this.MergeFields.SequenceEqual(input.MergeFields)
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    input.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                ) && 
                (
                    this.ShowPreview == input.ShowPreview ||
                    this.ShowPreview.Equals(input.ShowPreview)
                ) && 
                (
                    this.ShowProgressStepper == input.ShowProgressStepper ||
                    this.ShowProgressStepper.Equals(input.ShowProgressStepper)
                ) && 
                (
                    this.SignerRoles == input.SignerRoles ||
                    this.SignerRoles != null &&
                    input.SignerRoles != null &&
                    this.SignerRoles.SequenceEqual(input.SignerRoles)
                ) && 
                (
                    this.SkipMeNow == input.SkipMeNow ||
                    this.SkipMeNow.Equals(input.SkipMeNow)
                ) && 
                (
                    this.Subject == input.Subject ||
                    (this.Subject != null &&
                    this.Subject.Equals(input.Subject))
                ) && 
                (
                    this.TestMode == input.TestMode ||
                    this.TestMode.Equals(input.TestMode)
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.UsePreexistingFields == input.UsePreexistingFields ||
                    this.UsePreexistingFields.Equals(input.UsePreexistingFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClientId != null)
                {
                    hashCode = (hashCode * 59) + this.ClientId.GetHashCode();
                }
                if (this.File != null)
                {
                    hashCode = (hashCode * 59) + this.File.GetHashCode();
                }
                if (this.FileUrl != null)
                {
                    hashCode = (hashCode * 59) + this.FileUrl.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AllowCcs.GetHashCode();
                hashCode = (hashCode * 59) + this.AllowReassign.GetHashCode();
                if (this.Attachments != null)
                {
                    hashCode = (hashCode * 59) + this.Attachments.GetHashCode();
                }
                if (this.CcRoles != null)
                {
                    hashCode = (hashCode * 59) + this.CcRoles.GetHashCode();
                }
                if (this.EditorOptions != null)
                {
                    hashCode = (hashCode * 59) + this.EditorOptions.GetHashCode();
                }
                if (this.FieldOptions != null)
                {
                    hashCode = (hashCode * 59) + this.FieldOptions.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ForceSignerRoles.GetHashCode();
                hashCode = (hashCode * 59) + this.ForceSubjectMessage.GetHashCode();
                if (this.FormFieldGroups != null)
                {
                    hashCode = (hashCode * 59) + this.FormFieldGroups.GetHashCode();
                }
                if (this.FormFieldRules != null)
                {
                    hashCode = (hashCode * 59) + this.FormFieldRules.GetHashCode();
                }
                if (this.FormFieldsPerDocument != null)
                {
                    hashCode = (hashCode * 59) + this.FormFieldsPerDocument.GetHashCode();
                }
                if (this.MergeFields != null)
                {
                    hashCode = (hashCode * 59) + this.MergeFields.GetHashCode();
                }
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                if (this.Metadata != null)
                {
                    hashCode = (hashCode * 59) + this.Metadata.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ShowPreview.GetHashCode();
                hashCode = (hashCode * 59) + this.ShowProgressStepper.GetHashCode();
                if (this.SignerRoles != null)
                {
                    hashCode = (hashCode * 59) + this.SignerRoles.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SkipMeNow.GetHashCode();
                if (this.Subject != null)
                {
                    hashCode = (hashCode * 59) + this.Subject.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TestMode.GetHashCode();
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UsePreexistingFields.GetHashCode();
                return hashCode;
            }
        }

        public List<OpenApiType> GetOpenApiTypes()
        {
            var types = new List<OpenApiType>();
            types.Add(new OpenApiType(){
                Name = "client_id",
                Property = "ClientId",
                Type = "string",
                Value = ClientId,
            });
            types.Add(new OpenApiType(){
                Name = "file",
                Property = "File",
                Type = "List<System.IO.Stream>",
                Value = File,
            });
            types.Add(new OpenApiType(){
                Name = "file_url",
                Property = "FileUrl",
                Type = "List<string>",
                Value = FileUrl,
            });
            types.Add(new OpenApiType(){
                Name = "allow_ccs",
                Property = "AllowCcs",
                Type = "bool",
                Value = AllowCcs,
            });
            types.Add(new OpenApiType(){
                Name = "allow_reassign",
                Property = "AllowReassign",
                Type = "bool",
                Value = AllowReassign,
            });
            types.Add(new OpenApiType(){
                Name = "attachments",
                Property = "Attachments",
                Type = "List<SubAttachment>",
                Value = Attachments,
            });
            types.Add(new OpenApiType(){
                Name = "cc_roles",
                Property = "CcRoles",
                Type = "List<string>",
                Value = CcRoles,
            });
            types.Add(new OpenApiType(){
                Name = "editor_options",
                Property = "EditorOptions",
                Type = "SubEditorOptions",
                Value = EditorOptions,
            });
            types.Add(new OpenApiType(){
                Name = "field_options",
                Property = "FieldOptions",
                Type = "SubFieldOptions",
                Value = FieldOptions,
            });
            types.Add(new OpenApiType(){
                Name = "force_signer_roles",
                Property = "ForceSignerRoles",
                Type = "bool",
                Value = ForceSignerRoles,
            });
            types.Add(new OpenApiType(){
                Name = "force_subject_message",
                Property = "ForceSubjectMessage",
                Type = "bool",
                Value = ForceSubjectMessage,
            });
            types.Add(new OpenApiType(){
                Name = "form_field_groups",
                Property = "FormFieldGroups",
                Type = "List<SubFormFieldGroup>",
                Value = FormFieldGroups,
            });
            types.Add(new OpenApiType(){
                Name = "form_field_rules",
                Property = "FormFieldRules",
                Type = "List<SubFormFieldRule>",
                Value = FormFieldRules,
            });
            types.Add(new OpenApiType(){
                Name = "form_fields_per_document",
                Property = "FormFieldsPerDocument",
                Type = "List<SubFormFieldsPerDocumentBase>",
                Value = FormFieldsPerDocument,
            });
            types.Add(new OpenApiType(){
                Name = "merge_fields",
                Property = "MergeFields",
                Type = "List<SubMergeField>",
                Value = MergeFields,
            });
            types.Add(new OpenApiType(){
                Name = "message",
                Property = "Message",
                Type = "string",
                Value = Message,
            });
            types.Add(new OpenApiType(){
                Name = "metadata",
                Property = "Metadata",
                Type = "Dictionary<string, Object>",
                Value = Metadata,
            });
            types.Add(new OpenApiType(){
                Name = "show_preview",
                Property = "ShowPreview",
                Type = "bool",
                Value = ShowPreview,
            });
            types.Add(new OpenApiType(){
                Name = "show_progress_stepper",
                Property = "ShowProgressStepper",
                Type = "bool",
                Value = ShowProgressStepper,
            });
            types.Add(new OpenApiType(){
                Name = "signer_roles",
                Property = "SignerRoles",
                Type = "List<SubTemplateRole>",
                Value = SignerRoles,
            });
            types.Add(new OpenApiType(){
                Name = "skip_me_now",
                Property = "SkipMeNow",
                Type = "bool",
                Value = SkipMeNow,
            });
            types.Add(new OpenApiType(){
                Name = "subject",
                Property = "Subject",
                Type = "string",
                Value = Subject,
            });
            types.Add(new OpenApiType(){
                Name = "test_mode",
                Property = "TestMode",
                Type = "bool",
                Value = TestMode,
            });
            types.Add(new OpenApiType(){
                Name = "title",
                Property = "Title",
                Type = "string",
                Value = Title,
            });
            types.Add(new OpenApiType(){
                Name = "use_preexisting_fields",
                Property = "UsePreexistingFields",
                Type = "bool",
                Value = UsePreexistingFields,
            });

            return types;
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Message (string) maxLength
            if (this.Message != null && this.Message.Length > 5000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Message, length must be less than 5000.", new [] { "Message" });
            }

            // Subject (string) maxLength
            if (this.Subject != null && this.Subject.Length > 200)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Subject, length must be less than 200.", new [] { "Subject" });
            }

            yield break;
        }
    }

}
