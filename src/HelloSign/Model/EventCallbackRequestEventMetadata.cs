/*
 * HelloSign API
 *
 * HelloSign v3 API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: apisupport@hellosign.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HelloSign.Client.OpenAPIDateConverter;

namespace HelloSign.Model
{
    /// <summary>
    /// Specific metadata about the event.
    /// </summary>
    [DataContract(Name = "EventCallbackRequestEventMetadata")]
    [JsonObject(ItemNullValueHandling = NullValueHandling.Ignore)]
    public partial class EventCallbackRequestEventMetadata : IOpenApiTyped, IEquatable<EventCallbackRequestEventMetadata>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EventCallbackRequestEventMetadata" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EventCallbackRequestEventMetadata() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EventCallbackRequestEventMetadata" /> class.
        /// </summary>
        /// <param name="relatedSignatureId">Signature ID for a specific signer. Applicable to &#x60;signature_request_signed&#x60; and &#x60;signature_request_viewed&#x60; events..</param>
        /// <param name="reportedForAccountId">Account ID the event was reported for..</param>
        /// <param name="reportedForAppId">App ID the event was reported for..</param>
        /// <param name="eventMessage">Message about a declined or failed (due to error) signature flow..</param>
        public EventCallbackRequestEventMetadata(string relatedSignatureId = default(string), string reportedForAccountId = default(string), string reportedForAppId = default(string), string eventMessage = default(string))
        {
            
            this.RelatedSignatureId = relatedSignatureId;
            this.ReportedForAccountId = reportedForAccountId;
            this.ReportedForAppId = reportedForAppId;
            this.EventMessage = eventMessage;
        }

        /// <summary>
        /// Signature ID for a specific signer. Applicable to &#x60;signature_request_signed&#x60; and &#x60;signature_request_viewed&#x60; events.
        /// </summary>
        /// <value>Signature ID for a specific signer. Applicable to &#x60;signature_request_signed&#x60; and &#x60;signature_request_viewed&#x60; events.</value>
        [DataMember(Name = "related_signature_id", EmitDefaultValue = true)]
        public string RelatedSignatureId { get; set; }

        /// <summary>
        /// Account ID the event was reported for.
        /// </summary>
        /// <value>Account ID the event was reported for.</value>
        [DataMember(Name = "reported_for_account_id", EmitDefaultValue = true)]
        public string ReportedForAccountId { get; set; }

        /// <summary>
        /// App ID the event was reported for.
        /// </summary>
        /// <value>App ID the event was reported for.</value>
        [DataMember(Name = "reported_for_app_id", EmitDefaultValue = true)]
        public string ReportedForAppId { get; set; }

        /// <summary>
        /// Message about a declined or failed (due to error) signature flow.
        /// </summary>
        /// <value>Message about a declined or failed (due to error) signature flow.</value>
        [DataMember(Name = "event_message", EmitDefaultValue = true)]
        public string EventMessage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EventCallbackRequestEventMetadata {\n");
            sb.Append("  RelatedSignatureId: ").Append(RelatedSignatureId).Append("\n");
            sb.Append("  ReportedForAccountId: ").Append(ReportedForAccountId).Append("\n");
            sb.Append("  ReportedForAppId: ").Append(ReportedForAppId).Append("\n");
            sb.Append("  EventMessage: ").Append(EventMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EventCallbackRequestEventMetadata);
        }

        /// <summary>
        /// Returns true if EventCallbackRequestEventMetadata instances are equal
        /// </summary>
        /// <param name="input">Instance of EventCallbackRequestEventMetadata to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EventCallbackRequestEventMetadata input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RelatedSignatureId == input.RelatedSignatureId ||
                    (this.RelatedSignatureId != null &&
                    this.RelatedSignatureId.Equals(input.RelatedSignatureId))
                ) && 
                (
                    this.ReportedForAccountId == input.ReportedForAccountId ||
                    (this.ReportedForAccountId != null &&
                    this.ReportedForAccountId.Equals(input.ReportedForAccountId))
                ) && 
                (
                    this.ReportedForAppId == input.ReportedForAppId ||
                    (this.ReportedForAppId != null &&
                    this.ReportedForAppId.Equals(input.ReportedForAppId))
                ) && 
                (
                    this.EventMessage == input.EventMessage ||
                    (this.EventMessage != null &&
                    this.EventMessage.Equals(input.EventMessage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RelatedSignatureId != null)
                {
                    hashCode = (hashCode * 59) + this.RelatedSignatureId.GetHashCode();
                }
                if (this.ReportedForAccountId != null)
                {
                    hashCode = (hashCode * 59) + this.ReportedForAccountId.GetHashCode();
                }
                if (this.ReportedForAppId != null)
                {
                    hashCode = (hashCode * 59) + this.ReportedForAppId.GetHashCode();
                }
                if (this.EventMessage != null)
                {
                    hashCode = (hashCode * 59) + this.EventMessage.GetHashCode();
                }
                return hashCode;
            }
        }

        public List<OpenApiType> GetOpenApiTypes()
        {
            var types = new List<OpenApiType>();
            types.Add(new OpenApiType(){
                Name = "related_signature_id",
                Property = "RelatedSignatureId",
                Type = "string",
                Value = RelatedSignatureId,
            });
            types.Add(new OpenApiType(){
                Name = "reported_for_account_id",
                Property = "ReportedForAccountId",
                Type = "string",
                Value = ReportedForAccountId,
            });
            types.Add(new OpenApiType(){
                Name = "reported_for_app_id",
                Property = "ReportedForAppId",
                Type = "string",
                Value = ReportedForAppId,
            });
            types.Add(new OpenApiType(){
                Name = "event_message",
                Property = "EventMessage",
                Type = "string",
                Value = EventMessage,
            });

            return types;
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
